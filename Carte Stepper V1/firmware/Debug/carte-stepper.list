
carte-stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000701c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080071fc  080071fc  000081fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007298  08007298  0000911c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007298  08007298  00008298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072a0  080072a0  0000911c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a0  080072a0  000082a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072a4  080072a4  000082a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  080072a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  2000011c  080073c4  0000911c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  080073c4  00009918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000911c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e77b  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003632  00000000  00000000  000278c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  0002af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f2  00000000  00000000  0002c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242d8  00000000  00000000  0002ded2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0d8  00000000  00000000  000521aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f04d9  00000000  00000000  00071282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016175b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ce4  00000000  00000000  001617a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00169484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000011c 	.word	0x2000011c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080071e4 	.word	0x080071e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000120 	.word	0x20000120
 800021c:	080071e4 	.word	0x080071e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(char c){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	2201      	movs	r2, #1
 80005fe:	4804      	ldr	r0, [pc, #16]	@ (8000610 <__io_putchar+0x24>)
 8000600:	f004 ffdb 	bl	80055ba <HAL_UART_Transmit>
	return c;
 8000604:	79fb      	ldrb	r3, [r7, #7]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000340 	.word	0x20000340

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f001 f82c 	bl	8001676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f85f 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 fb53 	bl	8000ccc <MX_GPIO_Init>
  MX_ADC2_Init();
 8000626:	f000 f8a9 	bl	800077c <MX_ADC2_Init>
  MX_FDCAN2_Init();
 800062a:	f000 f90d 	bl	8000848 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800062e:	f000 f951 	bl	80008d4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000632:	f000 f98f 	bl	8000954 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000636:	f000 fa21 	bl	8000a7c <MX_TIM2_Init>
  MX_TIM3_Init();
 800063a:	f000 fa79 	bl	8000b30 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800063e:	f000 fad1 	bl	8000be4 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000642:	f000 fb1b 	bl	8000c7c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("Init done\n\r");
 8000646:	4821      	ldr	r0, [pc, #132]	@ (80006cc <main+0xb8>)
 8000648:	f005 ff60 	bl	800650c <iprintf>



  for (uint8_t stepper_i = 0; stepper_i < STEPPERS_AMNT; stepper_i++)
 800064c:	2300      	movs	r3, #0
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	e012      	b.n	8000678 <main+0x64>
	  stepperInit(&steppers[stepper_i], &stepper_configs[stepper_i]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	225c      	movs	r2, #92	@ 0x5c
 8000656:	fb02 f303 	mul.w	r3, r2, r3
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <main+0xbc>)
 800065c:	1898      	adds	r0, r3, r2
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4a1a      	ldr	r2, [pc, #104]	@ (80006d4 <main+0xc0>)
 800066a:	4413      	add	r3, r2
 800066c:	4619      	mov	r1, r3
 800066e:	f000 fbed 	bl	8000e4c <stepperInit>
  for (uint8_t stepper_i = 0; stepper_i < STEPPERS_AMNT; stepper_i++)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	3301      	adds	r3, #1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d9e9      	bls.n	8000652 <main+0x3e>



  HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2101      	movs	r1, #1
 8000682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000686:	f002 fc5b 	bl	8002f40 <HAL_GPIO_WritePin>

  for (uint8_t stepper_i = 0; stepper_i < STEPPERS_AMNT; stepper_i++)
 800068a:	2300      	movs	r3, #0
 800068c:	71bb      	strb	r3, [r7, #6]
 800068e:	e00d      	b.n	80006ac <main+0x98>
	  stepperSetFrequency(&steppers[stepper_i], 2000);
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	225c      	movs	r2, #92	@ 0x5c
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <main+0xbc>)
 800069a:	4413      	add	r3, r2
 800069c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fbb1 	bl	8000e08 <stepperSetFrequency>
  for (uint8_t stepper_i = 0; stepper_i < STEPPERS_AMNT; stepper_i++)
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	3301      	adds	r3, #1
 80006aa:	71bb      	strb	r3, [r7, #6]
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d9ee      	bls.n	8000690 <main+0x7c>


  printf("Code alive and running\n\r");
 80006b2:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <main+0xc4>)
 80006b4:	f005 ff2a 	bl	800650c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	4808      	ldr	r0, [pc, #32]	@ (80006dc <main+0xc8>)
 80006bc:	f002 fc58 	bl	8002f70 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80006c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c4:	f001 f848 	bl	8001758 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80006c8:	bf00      	nop
 80006ca:	e7f5      	b.n	80006b8 <main+0xa4>
 80006cc:	080071fc 	.word	0x080071fc
 80006d0:	200006b0 	.word	0x200006b0
 80006d4:	20000000 	.word	0x20000000
 80006d8:	08007208 	.word	0x08007208
 80006dc:	48000400 	.word	0x48000400

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	2238      	movs	r2, #56	@ 0x38
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 ff61 	bl	80065b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000702:	2000      	movs	r0, #0
 8000704:	f002 fe78 	bl	80033f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000708:	2322      	movs	r3, #34	@ 0x22
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000722:	2301      	movs	r3, #1
 8000724:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000726:	2315      	movs	r3, #21
 8000728:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	4618      	mov	r0, r3
 800073c:	f002 ff10 	bl	8003560 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000746:	f000 fb23 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2104      	movs	r1, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fa0e 	bl	8003b84 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800076e:	f000 fb0f 	bl	8000d90 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	@ 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2220      	movs	r2, #32
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f005 ff14 	bl	80065b6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800078e:	4b2b      	ldr	r3, [pc, #172]	@ (800083c <MX_ADC2_Init+0xc0>)
 8000790:	4a2b      	ldr	r2, [pc, #172]	@ (8000840 <MX_ADC2_Init+0xc4>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000794:	4b29      	ldr	r3, [pc, #164]	@ (800083c <MX_ADC2_Init+0xc0>)
 8000796:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800079a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800079c:	4b27      	ldr	r3, [pc, #156]	@ (800083c <MX_ADC2_Init+0xc0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a2:	4b26      	ldr	r3, [pc, #152]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007a8:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ae:	4b23      	ldr	r3, [pc, #140]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007f6:	4811      	ldr	r0, [pc, #68]	@ (800083c <MX_ADC2_Init+0xc0>)
 80007f8:	f001 f9a6 	bl	8001b48 <HAL_ADC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000802:	f000 fac5 	bl	8000d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_ADC2_Init+0xc8>)
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080a:	2306      	movs	r3, #6
 800080c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000812:	237f      	movs	r3, #127	@ 0x7f
 8000814:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000816:	2304      	movs	r3, #4
 8000818:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <MX_ADC2_Init+0xc0>)
 8000824:	f001 fb3e 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800082e:	f000 faaf 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000138 	.word	0x20000138
 8000840:	50000100 	.word	0x50000100
 8000844:	08600004 	.word	0x08600004

08000848 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 800084e:	4a20      	ldr	r2, [pc, #128]	@ (80008d0 <MX_FDCAN2_Init+0x88>)
 8000850:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 8000866:	2200      	movs	r2, #0
 8000868:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 800086c:	2200      	movs	r2, #0
 800086e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 8000872:	2200      	movs	r2, #0
 8000874:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 8000878:	2210      	movs	r2, #16
 800087a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 800087e:	2201      	movs	r2, #1
 8000880:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 8000884:	2201      	movs	r2, #1
 8000886:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 800088a:	2201      	movs	r2, #1
 800088c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 8000890:	2201      	movs	r2, #1
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 8000896:	2201      	movs	r2, #1
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 800089c:	2201      	movs	r2, #1
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_FDCAN2_Init+0x84>)
 80008ba:	f002 f803 	bl	80028c4 <HAL_FDCAN_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80008c4:	f000 fa64 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001a4 	.word	0x200001a4
 80008d0:	40006800 	.word	0x40006800

080008d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_I2C2_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_I2C2_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x50916E9F;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_I2C2_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <MX_I2C2_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_I2C2_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_I2C2_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_I2C2_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_I2C2_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_I2C2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_I2C2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800090e:	480e      	ldr	r0, [pc, #56]	@ (8000948 <MX_I2C2_Init+0x74>)
 8000910:	f002 fb48 	bl	8002fa4 <HAL_I2C_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800091a:	f000 fa39 	bl	8000d90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4809      	ldr	r0, [pc, #36]	@ (8000948 <MX_I2C2_Init+0x74>)
 8000922:	f002 fbda 	bl	80030da <HAL_I2CEx_ConfigAnalogFilter>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800092c:	f000 fa30 	bl	8000d90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_I2C2_Init+0x74>)
 8000934:	f002 fc1c 	bl	8003170 <HAL_I2CEx_ConfigDigitalFilter>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 fa27 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000208 	.word	0x20000208
 800094c:	40005800 	.word	0x40005800
 8000950:	50916e9f 	.word	0x50916e9f

08000954 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b098      	sub	sp, #96	@ 0x60
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2234      	movs	r2, #52	@ 0x34
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f005 fe18 	bl	80065b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000986:	4b3b      	ldr	r3, [pc, #236]	@ (8000a74 <MX_TIM1_Init+0x120>)
 8000988:	4a3b      	ldr	r2, [pc, #236]	@ (8000a78 <MX_TIM1_Init+0x124>)
 800098a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800098c:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <MX_TIM1_Init+0x120>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b38      	ldr	r3, [pc, #224]	@ (8000a74 <MX_TIM1_Init+0x120>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000998:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <MX_TIM1_Init+0x120>)
 800099a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800099e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <MX_TIM1_Init+0x120>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a6:	4b33      	ldr	r3, [pc, #204]	@ (8000a74 <MX_TIM1_Init+0x120>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <MX_TIM1_Init+0x120>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b2:	4830      	ldr	r0, [pc, #192]	@ (8000a74 <MX_TIM1_Init+0x120>)
 80009b4:	f003 fd3e 	bl	8004434 <HAL_TIM_PWM_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009be:	f000 f9e7 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009d2:	4619      	mov	r1, r3
 80009d4:	4827      	ldr	r0, [pc, #156]	@ (8000a74 <MX_TIM1_Init+0x120>)
 80009d6:	f004 fc59 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009e0:	f000 f9d6 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e4:	2360      	movs	r3, #96	@ 0x60
 80009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f0:	2300      	movs	r3, #0
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a04:	2208      	movs	r2, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	481a      	ldr	r0, [pc, #104]	@ (8000a74 <MX_TIM1_Init+0x120>)
 8000a0a:	f003 fe77 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a14:	f000 f9bc 	bl	8000d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <MX_TIM1_Init+0x120>)
 8000a56:	f004 fca7 	bl	80053a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a60:	f000 f996 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a64:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <MX_TIM1_Init+0x120>)
 8000a66:	f000 fbed 	bl	8001244 <HAL_TIM_MspPostInit>

}
 8000a6a:	bf00      	nop
 8000a6c:	3760      	adds	r7, #96	@ 0x60
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000025c 	.word	0x2000025c
 8000a78:	40012c00 	.word	0x40012c00

08000a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	615a      	str	r2, [r3, #20]
 8000a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000aa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac8:	4818      	ldr	r0, [pc, #96]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000aca:	f003 fcb3 	bl	8004434 <HAL_TIM_PWM_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ad4:	f000 f95c 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4811      	ldr	r0, [pc, #68]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000ae8:	f004 fbd0 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000af2:	f000 f94d 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af6:	2360      	movs	r3, #96	@ 0x60
 8000af8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	2204      	movs	r2, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000b0e:	f003 fdf5 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b18:	f000 f93a 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b1c:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <MX_TIM2_Init+0xb0>)
 8000b1e:	f000 fb91 	bl	8001244 <HAL_TIM_MspPostInit>

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200002a8 	.word	0x200002a8

08000b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000b56:	4a22      	ldr	r2, [pc, #136]	@ (8000be0 <MX_TIM3_Init+0xb0>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b7a:	4818      	ldr	r0, [pc, #96]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000b7c:	f003 fc5a 	bl	8004434 <HAL_TIM_PWM_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b86:	f000 f903 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4810      	ldr	r0, [pc, #64]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000b9a:	f004 fb77 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ba4:	f000 f8f4 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba8:	2360      	movs	r3, #96	@ 0x60
 8000baa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4807      	ldr	r0, [pc, #28]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000bc0:	f003 fd9c 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bca:	f000 f8e1 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bce:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <MX_TIM3_Init+0xac>)
 8000bd0:	f000 fb38 	bl	8001244 <HAL_TIM_MspPostInit>

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	@ 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200002f4 	.word	0x200002f4
 8000be0:	40000400 	.word	0x40000400

08000be4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be8:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000bea:	4a23      	ldr	r2, [pc, #140]	@ (8000c78 <MX_USART2_UART_Init+0x94>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c26:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2c:	4811      	ldr	r0, [pc, #68]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c2e:	f004 fc74 	bl	800551a <HAL_UART_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c38:	f000 f8aa 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c40:	f005 fa9e 	bl	8006180 <HAL_UARTEx_SetTxFifoThreshold>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4a:	f000 f8a1 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4808      	ldr	r0, [pc, #32]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c52:	f005 fad3 	bl	80061fc <HAL_UARTEx_SetRxFifoThreshold>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c5c:	f000 f898 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <MX_USART2_UART_Init+0x90>)
 8000c62:	f005 fa54 	bl	800610e <HAL_UARTEx_DisableFifoMode>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c6c:	f000 f890 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000340 	.word	0x20000340
 8000c78:	40004400 	.word	0x40004400

08000c7c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c80:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000c82:	4a11      	ldr	r2, [pc, #68]	@ (8000cc8 <MX_USB_PCD_Init+0x4c>)
 8000c84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000c88:	2208      	movs	r2, #8
 8000c8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_USB_PCD_Init+0x48>)
 8000cb2:	f002 faa9 	bl	8003208 <HAL_PCD_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000cbc:	f000 f868 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200003d4 	.word	0x200003d4
 8000cc8:	40005c00 	.word	0x40005c00

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b29      	ldr	r3, [pc, #164]	@ (8000d88 <MX_GPIO_Init+0xbc>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a28      	ldr	r2, [pc, #160]	@ (8000d88 <MX_GPIO_Init+0xbc>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <MX_GPIO_Init+0xbc>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <MX_GPIO_Init+0xbc>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a22      	ldr	r2, [pc, #136]	@ (8000d88 <MX_GPIO_Init+0xbc>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <MX_GPIO_Init+0xbc>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_DIR_C_Pin|MOTOR_DIR_A_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f248 0121 	movw	r1, #32801	@ 0x8021
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f002 f910 	bl	8002f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR_B_Pin|STATUS_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2190      	movs	r1, #144	@ 0x90
 8000d24:	4819      	ldr	r0, [pc, #100]	@ (8000d8c <MX_GPIO_Init+0xc0>)
 8000d26:	f002 f90b 	bl	8002f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_EN_Pin MOTOR_DIR_C_Pin MOTOR_DIR_A_Pin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_C_Pin|MOTOR_DIR_A_Pin;
 8000d2a:	f248 0321 	movw	r3, #32801	@ 0x8021
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f001 ff79 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : AU_Pin */
  GPIO_InitStruct.Pin = AU_Pin;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AU_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480b      	ldr	r0, [pc, #44]	@ (8000d8c <MX_GPIO_Init+0xc0>)
 8000d60:	f001 ff6c 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_B_Pin STATUS_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_B_Pin|STATUS_Pin;
 8000d64:	2390      	movs	r3, #144	@ 0x90
 8000d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <MX_GPIO_Init+0xc0>)
 8000d7c:	f001 ff5e 	bl	8002c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	48000400 	.word	0x48000400

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <Error_Handler+0x8>

08000d9c <timerStart>:
	#endif
}

// ========================== Hardware abstraction ========================== //

static inline void timerStart(TIM_HandleTypeDef* handle) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	handle->Instance->CR1 |= TIM_CR1_CEN;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <timerStop>:

static inline void timerStop(TIM_HandleTypeDef* handle) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	handle->Instance->CR1 &=~ TIM_CR1_CEN;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <timerEnableInterrupt>:

static void timerEnableInterrupt(TIM_HandleTypeDef* handle) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	handle->Instance->DIER |= TIM_DIER_UIE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0201 	orr.w	r2, r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <stepperSetFrequency>:
		stepper->step_offset += 0x10000;//0xFFFF;
	}
	#endif
}

void stepperSetFrequency(stepper_t* stepper, uint32_t frequency) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
	if (frequency == 0) {
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d105      	bne.n	8000e24 <stepperSetFrequency+0x1c>
		timerStop(stepper->config.handle);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ffcf 	bl	8000dc0 <timerStop>
	} else {
		timerStart(stepper->config.handle);
		stepper->config.handle->Instance->ARR = ((stepper->divided_clock)/(frequency)) - 1;
	}
}
 8000e22:	e00e      	b.n	8000e42 <stepperSetFrequency+0x3a>
		timerStart(stepper->config.handle);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ffb7 	bl	8000d9c <timerStart>
		stepper->config.handle->Instance->ARR = ((stepper->divided_clock)/(frequency)) - 1;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3a01      	subs	r2, #1
 8000e40:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <stepperInit>:

// ========================== High level ========================== //

void stepperInit(stepper_t* stepper, const stepper_config_t *config) {
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	// Copy config to stepper structure
	stepper->config = *config;
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Initialize state values
	stepper->step_offset = -65535; // timer interupts trigger once at start for some reason
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a39      	ldr	r2, [pc, #228]	@ (8000f5c <stepperInit+0x110>)
 8000e76:	64da      	str	r2, [r3, #76]	@ 0x4c

	stepper->config.handle->Instance->PSC = (stepper->config.clock / (stepper->config.max_freq)) -1;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3a01      	subs	r2, #1
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
	stepper->divided_clock = stepper->config.clock / (stepper->config.handle->Instance->PSC + 1);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	649a      	str	r2, [r3, #72]	@ 0x48

	//printf("stepper PSC : %ld, divided clock %ld\n", stepper->handle->Instance->PSC, stepper->divided_clock);

	//stepperSetFrequency(stepper, 10);
	if(stepper->config.channel_inverted)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7a1b      	ldrb	r3, [r3, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d008      	beq.n	8000ebe <stepperInit+0x72>
		HAL_TIMEx_PWMN_Start(stepper->config.handle, stepper->config.channel);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f004 f92e 	bl	8005118 <HAL_TIMEx_PWMN_Start>
 8000ebc:	e007      	b.n	8000ece <stepperInit+0x82>
	else
		HAL_TIM_PWM_Start(stepper->config.handle, stepper->config.channel);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f003 fb0b 	bl	80044e4 <HAL_TIM_PWM_Start>
	//stopTimer(stepper->handle);

	stepperSetFrequency(stepper, 0);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff99 	bl	8000e08 <stepperSetFrequency>

	switch (stepper->config.channel){
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b0c      	cmp	r3, #12
 8000edc:	d834      	bhi.n	8000f48 <stepperInit+0xfc>
 8000ede:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee4 <stepperInit+0x98>)
 8000ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee4:	08000f19 	.word	0x08000f19
 8000ee8:	08000f49 	.word	0x08000f49
 8000eec:	08000f49 	.word	0x08000f49
 8000ef0:	08000f49 	.word	0x08000f49
 8000ef4:	08000f25 	.word	0x08000f25
 8000ef8:	08000f49 	.word	0x08000f49
 8000efc:	08000f49 	.word	0x08000f49
 8000f00:	08000f49 	.word	0x08000f49
 8000f04:	08000f31 	.word	0x08000f31
 8000f08:	08000f49 	.word	0x08000f49
 8000f0c:	08000f49 	.word	0x08000f49
 8000f10:	08000f49 	.word	0x08000f49
 8000f14:	08000f3d 	.word	0x08000f3d
		case TIM_CHANNEL_1: stepper->config.handle->Instance->CCR1 = CCR; break;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	220a      	movs	r2, #10
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f22:	e011      	b.n	8000f48 <stepperInit+0xfc>
		case TIM_CHANNEL_2:	stepper->config.handle->Instance->CCR2 = CCR; break;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f2e:	e00b      	b.n	8000f48 <stepperInit+0xfc>
		case TIM_CHANNEL_3:	stepper->config.handle->Instance->CCR3 = CCR; break;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	220a      	movs	r2, #10
 8000f38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f3a:	e005      	b.n	8000f48 <stepperInit+0xfc>
		case TIM_CHANNEL_4:	stepper->config.handle->Instance->CCR4 = CCR; break;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	220a      	movs	r2, #10
 8000f44:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f46:	bf00      	nop
			timerStart(stepper->config.counter_handle);
		#else
			HAL_TIM_Encoder_Start_IT(stepper->counter_handle, TIM_CHANNEL_ALL);
		#endif
	#else
		timerEnableInterrupt(stepper->config.handle);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff49 	bl	8000de4 <timerEnableInterrupt>
	#endif
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	ffff0001 	.word	0xffff0001

08000f60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f96:	f002 fad3 	bl	8003540 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b09e      	sub	sp, #120	@ 0x78
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2250      	movs	r2, #80	@ 0x50
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f005 faf4 	bl	80065b6 <memset>
  if(hadc->Instance==ADC2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <HAL_ADC_MspInit+0xa4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d134      	bne.n	8001042 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fdc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fde:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fe2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 ffe7 	bl	8003fbc <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ff4:	f7ff fecc 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_ADC_MspInit+0xa8>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <HAL_ADC_MspInit+0xa8>)
 8000ffe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_ADC_MspInit+0xa8>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_ADC_MspInit+0xa8>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001014:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <HAL_ADC_MspInit+0xa8>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <HAL_ADC_MspInit+0xa8>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin;
 8001028:	23c2      	movs	r3, #194	@ 0xc2
 800102a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102c:	2303      	movs	r3, #3
 800102e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f001 fdfd 	bl	8002c3c <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001042:	bf00      	nop
 8001044:	3778      	adds	r7, #120	@ 0x78
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	50000100 	.word	0x50000100
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09e      	sub	sp, #120	@ 0x78
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2250      	movs	r2, #80	@ 0x50
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f005 fa9e 	bl	80065b6 <memset>
  if(hfdcan->Instance==FDCAN2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1f      	ldr	r2, [pc, #124]	@ (80010fc <HAL_FDCAN_MspInit+0xa8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d137      	bne.n	80010f4 <HAL_FDCAN_MspInit+0xa0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001088:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800108a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800108e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f002 ff91 	bl	8003fbc <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80010a0:	f7ff fe76 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <HAL_FDCAN_MspInit+0xac>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a8:	4a15      	ldr	r2, [pc, #84]	@ (8001100 <HAL_FDCAN_MspInit+0xac>)
 80010aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <HAL_FDCAN_MspInit+0xac>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <HAL_FDCAN_MspInit+0xac>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <HAL_FDCAN_MspInit+0xac>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <HAL_FDCAN_MspInit+0xac>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80010d4:	2360      	movs	r3, #96	@ 0x60
 80010d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80010e4:	2309      	movs	r3, #9
 80010e6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_FDCAN_MspInit+0xb0>)
 80010f0:	f001 fda4 	bl	8002c3c <HAL_GPIO_Init>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80010f4:	bf00      	nop
 80010f6:	3778      	adds	r7, #120	@ 0x78
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40006800 	.word	0x40006800
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400

08001108 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09e      	sub	sp, #120	@ 0x78
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2250      	movs	r2, #80	@ 0x50
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f005 fa44 	bl	80065b6 <memset>
  if(hi2c->Instance==I2C2)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <HAL_I2C_MspInit+0xa8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d137      	bne.n	80011a8 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4618      	mov	r0, r3
 8001146:	f002 ff39 	bl	8003fbc <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001150:	f7ff fe1e 	bl	8000d90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	4a16      	ldr	r2, [pc, #88]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800116c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001170:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001172:	2312      	movs	r3, #18
 8001174:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800117e:	2304      	movs	r3, #4
 8001180:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118c:	f001 fd56 	bl	8002c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 8001192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001194:	4a07      	ldr	r2, [pc, #28]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 8001196:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800119a:	6593      	str	r3, [r2, #88]	@ 0x58
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 800119e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80011a8:	bf00      	nop
 80011aa:	3778      	adds	r7, #120	@ 0x78
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40005800 	.word	0x40005800
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <HAL_TIM_PWM_MspInit+0x80>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10c      	bne.n	80011e4 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ce:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 80011d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011e2:	e022      	b.n	800122a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ec:	d10c      	bne.n	8001208 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
}
 8001206:	e010      	b.n	800122a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0c      	ldr	r2, [pc, #48]	@ (8001240 <HAL_TIM_PWM_MspInit+0x88>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10b      	bne.n	800122a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	4a09      	ldr	r2, [pc, #36]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6593      	str	r3, [r2, #88]	@ 0x58
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_TIM_PWM_MspInit+0x84>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
}
 800122a:	bf00      	nop
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40012c00 	.word	0x40012c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40000400 	.word	0x40000400

08001244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a34      	ldr	r2, [pc, #208]	@ (8001334 <HAL_TIM_MspPostInit+0xf0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d11e      	bne.n	80012a4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a33      	ldr	r2, [pc, #204]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_STP_A_Pin;
 800127e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001290:	2306      	movs	r3, #6
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_STP_A_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129e:	f001 fccd 	bl	8002c3c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012a2:	e043      	b.n	800132c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ac:	d11c      	bne.n	80012e8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_STP_B_Pin;
 80012c6:	2308      	movs	r3, #8
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012d6:	2301      	movs	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_STP_B_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4816      	ldr	r0, [pc, #88]	@ (800133c <HAL_TIM_MspPostInit+0xf8>)
 80012e2:	f001 fcab 	bl	8002c3c <HAL_GPIO_Init>
}
 80012e6:	e021      	b.n	800132c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <HAL_TIM_MspPostInit+0xfc>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d11c      	bne.n	800132c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <HAL_TIM_MspPostInit+0xf4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_STP_C_Pin;
 800130a:	2310      	movs	r3, #16
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800131a:	2302      	movs	r3, #2
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_STP_C_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f001 fc88 	bl	8002c3c <HAL_GPIO_Init>
}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40012c00 	.word	0x40012c00
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400
 8001340:	40000400 	.word	0x40000400

08001344 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b09e      	sub	sp, #120	@ 0x78
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2250      	movs	r2, #80	@ 0x50
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f005 f926 	bl	80065b6 <memset>
  if(huart->Instance==USART2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <HAL_UART_MspInit+0xa8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d136      	bne.n	80013e2 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001374:	2302      	movs	r3, #2
 8001376:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fe1b 	bl	8003fbc <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800138c:	f7ff fd00 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_UART_MspInit+0xac>)
 8001392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001394:	4a16      	ldr	r2, [pc, #88]	@ (80013f0 <HAL_UART_MspInit+0xac>)
 8001396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139a:	6593      	str	r3, [r2, #88]	@ 0x58
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_UART_MspInit+0xac>)
 800139e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_UART_MspInit+0xac>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <HAL_UART_MspInit+0xac>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_UART_MspInit+0xac>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80013c0:	230c      	movs	r3, #12
 80013c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d0:	2307      	movs	r3, #7
 80013d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013de:	f001 fc2d 	bl	8002c3c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013e2:	bf00      	nop
 80013e4:	3778      	adds	r7, #120	@ 0x78
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b098      	sub	sp, #96	@ 0x60
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	2250      	movs	r2, #80	@ 0x50
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f005 f8d6 	bl	80065b6 <memset>
  if(hpcd->Instance==USB)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_PCD_MspInit+0x60>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d11a      	bne.n	800144a <HAL_PCD_MspInit+0x56>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001418:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800141a:	2300      	movs	r3, #0
 800141c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fdca 	bl	8003fbc <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800142e:	f7ff fcaf 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_PCD_MspInit+0x64>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_PCD_MspInit+0x64>)
 8001438:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800143c:	6593      	str	r3, [r2, #88]	@ 0x58
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_PCD_MspInit+0x64>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800144a:	bf00      	nop
 800144c:	3760      	adds	r7, #96	@ 0x60
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40005c00 	.word	0x40005c00
 8001458:	40021000 	.word	0x40021000

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f933 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e00a      	b.n	80014e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014cc:	f3af 8000 	nop.w
 80014d0:	4601      	mov	r1, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	60ba      	str	r2, [r7, #8]
 80014d8:	b2ca      	uxtb	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dbf0      	blt.n	80014cc <_read+0x12>
  }

  return len;
 80014ea:	687b      	ldr	r3, [r7, #4]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e009      	b.n	800151a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	60ba      	str	r2, [r7, #8]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f86c 	bl	80005ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	3301      	adds	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	dbf1      	blt.n	8001506 <_write+0x12>
  }
  return len;
 8001522:	687b      	ldr	r3, [r7, #4]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_close>:

int _close(int file)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001554:	605a      	str	r2, [r3, #4]
  return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_isatty>:

int _isatty(int file)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800156c:	2301      	movs	r3, #1
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800159c:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <_sbrk+0x5c>)
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <_sbrk+0x60>)
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <_sbrk+0x64>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <_sbrk+0x68>)
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d207      	bcs.n	80015d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c4:	f005 f846 	bl	8006654 <__errno>
 80015c8:	4603      	mov	r3, r0
 80015ca:	220c      	movs	r2, #12
 80015cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e009      	b.n	80015e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015da:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <_sbrk+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2001c000 	.word	0x2001c000
 80015f4:	00000400 	.word	0x00000400
 80015f8:	200007c4 	.word	0x200007c4
 80015fc:	20000918 	.word	0x20000918

08001600 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <SystemInit+0x20>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <SystemInit+0x20>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001624:	480d      	ldr	r0, [pc, #52]	@ (800165c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001626:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001628:	f7ff ffea 	bl	8001600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <LoopForever+0x6>)
  ldr r1, =_edata
 800162e:	490d      	ldr	r1, [pc, #52]	@ (8001664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001630:	4a0d      	ldr	r2, [pc, #52]	@ (8001668 <LoopForever+0xe>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001644:	4c0a      	ldr	r4, [pc, #40]	@ (8001670 <LoopForever+0x16>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f005 f805 	bl	8006660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001656:	f7fe ffdd 	bl	8000614 <main>

0800165a <LoopForever>:

LoopForever:
    b LoopForever
 800165a:	e7fe      	b.n	800165a <LoopForever>
  ldr   r0, =_estack
 800165c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001668:	080072a8 	.word	0x080072a8
  ldr r2, =_sbss
 800166c:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001670:	20000918 	.word	0x20000918

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>

08001676 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f001 f8ed 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001686:	200f      	movs	r0, #15
 8001688:	f000 f80e 	bl	80016a8 <HAL_InitTick>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	e001      	b.n	800169c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001698:	f7ff fc62 	bl	8000f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800169c:	79fb      	ldrb	r3, [r7, #7]

}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016b4:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <HAL_InitTick+0x68>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d022      	beq.n	8001702 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_InitTick+0x6c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <HAL_InitTick+0x68>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 f8ea 	bl	80028aa <HAL_SYSTICK_Config>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10f      	bne.n	80016fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b0f      	cmp	r3, #15
 80016e0:	d809      	bhi.n	80016f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e2:	2200      	movs	r2, #0
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	f04f 30ff 	mov.w	r0, #4294967295
 80016ea:	f001 f8c4 	bl	8002876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_InitTick+0x70>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e007      	b.n	8001706 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	e004      	b.n	8001706 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e001      	b.n	8001706 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200000bc 	.word	0x200000bc
 8001714:	200000b4 	.word	0x200000b4
 8001718:	200000b8 	.word	0x200000b8

0800171c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_IncTick+0x1c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <HAL_IncTick+0x20>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4413      	add	r3, r2
 800172a:	4a03      	ldr	r2, [pc, #12]	@ (8001738 <HAL_IncTick+0x1c>)
 800172c:	6013      	str	r3, [r2, #0]
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	200007c8 	.word	0x200007c8
 800173c:	200000bc 	.word	0x200000bc

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200007c8 	.word	0x200007c8

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d004      	beq.n	800177c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_Delay+0x40>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177c:	bf00      	nop
 800177e:	f7ff ffdf 	bl	8001740 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d8f7      	bhi.n	800177e <HAL_Delay+0x26>
  {
  }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200000bc 	.word	0x200000bc

0800179c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	609a      	str	r2, [r3, #8]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3360      	adds	r3, #96	@ 0x60
 8001816:	461a      	mov	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <LL_ADC_SetOffset+0x44>)
 8001826:	4013      	ands	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	4313      	orrs	r3, r2
 8001834:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800183c:	bf00      	nop
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	03fff000 	.word	0x03fff000

0800184c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3360      	adds	r3, #96	@ 0x60
 800185a:	461a      	mov	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3360      	adds	r3, #96	@ 0x60
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b087      	sub	sp, #28
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3360      	adds	r3, #96	@ 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80018d8:	bf00      	nop
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3360      	adds	r3, #96	@ 0x60
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	431a      	orrs	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	615a      	str	r2, [r3, #20]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3330      	adds	r3, #48	@ 0x30
 8001950:	461a      	mov	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	211f      	movs	r1, #31
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	401a      	ands	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	0e9b      	lsrs	r3, r3, #26
 8001978:	f003 011f 	and.w	r1, r3, #31
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	431a      	orrs	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800198c:	bf00      	nop
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3314      	adds	r3, #20
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	0e5b      	lsrs	r3, r3, #25
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	0d1b      	lsrs	r3, r3, #20
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2107      	movs	r1, #7
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	401a      	ands	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	0d1b      	lsrs	r3, r3, #20
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	431a      	orrs	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0318 	and.w	r3, r3, #24
 8001a12:	4908      	ldr	r1, [pc, #32]	@ (8001a34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a14:	40d9      	lsrs	r1, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	400b      	ands	r3, r1
 8001a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	0007ffff 	.word	0x0007ffff

08001a38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6093      	str	r3, [r2, #8]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ac0:	d101      	bne.n	8001ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_IsEnabled+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_IsEnabled+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d101      	bne.n	8001b38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e19b      	b.n	8001e9a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fa19 	bl	8000fa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff67 	bl	8001a5c <LL_ADC_IsDeepPowerDownEnabled>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff4d 	bl	8001a38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff82 	bl	8001aac <LL_ADC_IsInternalRegulatorEnabled>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff66 	bl	8001a84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb8:	4b97      	ldr	r3, [pc, #604]	@ (8001e18 <HAL_ADC_Init+0x2d0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	4a97      	ldr	r2, [pc, #604]	@ (8001e1c <HAL_ADC_Init+0x2d4>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bcc:	e002      	b.n	8001bd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f9      	bne.n	8001bce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff64 	bl	8001aac <LL_ADC_IsInternalRegulatorEnabled>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff75 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001c10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 8134 	bne.w	8001e88 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 8130 	bne.w	8001e88 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c30:	f043 0202 	orr.w	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff49 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d137      	bne.n	8001cb8 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c50:	d004      	beq.n	8001c5c <HAL_ADC_Init+0x114>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a72      	ldr	r2, [pc, #456]	@ (8001e20 <HAL_ADC_Init+0x2d8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d10f      	bne.n	8001c7c <HAL_ADC_Init+0x134>
 8001c5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001c60:	f7ff ff38 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c64:	4604      	mov	r4, r0
 8001c66:	486e      	ldr	r0, [pc, #440]	@ (8001e20 <HAL_ADC_Init+0x2d8>)
 8001c68:	f7ff ff34 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4323      	orrs	r3, r4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e008      	b.n	8001c8e <HAL_ADC_Init+0x146>
 8001c7c:	4869      	ldr	r0, [pc, #420]	@ (8001e24 <HAL_ADC_Init+0x2dc>)
 8001c7e:	f7ff ff29 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c9a:	d004      	beq.n	8001ca6 <HAL_ADC_Init+0x15e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a5f      	ldr	r2, [pc, #380]	@ (8001e20 <HAL_ADC_Init+0x2d8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x162>
 8001ca6:	4a60      	ldr	r2, [pc, #384]	@ (8001e28 <HAL_ADC_Init+0x2e0>)
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_Init+0x164>
 8001caa:	4a60      	ldr	r2, [pc, #384]	@ (8001e2c <HAL_ADC_Init+0x2e4>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7ff fd72 	bl	800179c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7f5b      	ldrb	r3, [r3, #29]
 8001cbc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cc8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cd6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	3b01      	subs	r3, #1
 8001cec:	045b      	lsls	r3, r3, #17
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d00:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	4b46      	ldr	r3, [pc, #280]	@ (8001e30 <HAL_ADC_Init+0x2e8>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	69b9      	ldr	r1, [r7, #24]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff feee 	bl	8001b20 <LL_ADC_INJ_IsConversionOngoing>
 8001d44:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d17b      	bne.n	8001e44 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d178      	bne.n	8001e44 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d56:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d5e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d6e:	f023 0302 	bic.w	r3, r3, #2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d017      	beq.n	8001db4 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001d92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001da0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6911      	ldr	r1, [r2, #16]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001db2:	e013      	b.n	8001ddc <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001dc2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001dd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dd8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d126      	bne.n	8001e34 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	e015      	b.n	8001e44 <HAL_ADC_Init+0x2fc>
 8001e18:	200000b4 	.word	0x200000b4
 8001e1c:	053e2d63 	.word	0x053e2d63
 8001e20:	50000100 	.word	0x50000100
 8001e24:	50000400 	.word	0x50000400
 8001e28:	50000300 	.word	0x50000300
 8001e2c:	50000700 	.word	0x50000700
 8001e30:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10c      	bne.n	8001e66 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f023 010f 	bic.w	r1, r3, #15
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	1e5a      	subs	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e64:	e007      	b.n	8001e76 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 020f 	bic.w	r2, r2, #15
 8001e74:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e86:	e007      	b.n	8001e98 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	f043 0210 	orr.w	r2, r3, #16
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	@ 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd90      	pop	{r4, r7, pc}
 8001ea2:	bf00      	nop

08001ea4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x24>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f000 bc04 	b.w	80026d0 <HAL_ADC_ConfigChannel+0x82c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe10 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 83e8 	bne.w	80026b2 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f7ff fd26 	bl	8001940 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fdfe 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001efe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fe0a 	bl	8001b20 <LL_ADC_INJ_IsConversionOngoing>
 8001f0c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 81d9 	bne.w	80022cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 81d4 	bne.w	80022cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f2c:	d10f      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7ff fd2d 	bl	8001998 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fce7 	bl	800191a <LL_ADC_SetSamplingTimeCommonConfig>
 8001f4c:	e00e      	b.n	8001f6c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f7ff fd1c 	bl	8001998 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fcd7 	bl	800191a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d022      	beq.n	8001fd4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f9e:	f7ff fc31 	bl	8001804 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6919      	ldr	r1, [r3, #16]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f7ff fc7d 	bl	80018ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x126>
 8001fc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x128>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f7ff fc89 	bl	80018e4 <LL_ADC_SetOffsetSaturation>
 8001fd2:	e17b      	b.n	80022cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fc36 	bl	800184c <LL_ADC_GetOffsetChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10a      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x15c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fc2b 	bl	800184c <LL_ADC_GetOffsetChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	0e9b      	lsrs	r3, r3, #26
 8001ffa:	f003 021f 	and.w	r2, r3, #31
 8001ffe:	e01e      	b.n	800203e <HAL_ADC_ConfigChannel+0x19a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fc20 	bl	800184c <LL_ADC_GetOffsetChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800201e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002022:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800202e:	2320      	movs	r3, #32
 8002030:	e004      	b.n	800203c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x1b2>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	0e9b      	lsrs	r3, r3, #26
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	e018      	b.n	8002088 <HAL_ADC_ConfigChannel+0x1e4>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800206a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800206e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002072:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e004      	b.n	8002088 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800207e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002088:	429a      	cmp	r2, r3
 800208a:	d106      	bne.n	800209a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fbef 	bl	8001878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fbd3 	bl	800184c <LL_ADC_GetOffsetChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x222>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fbc8 	bl	800184c <LL_ADC_GetOffsetChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	e01e      	b.n	8002104 <HAL_ADC_ConfigChannel+0x260>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fbbd 	bl	800184c <LL_ADC_GetOffsetChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80020e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80020ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e004      	b.n	8002102 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80020f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_ADC_ConfigChannel+0x278>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0e9b      	lsrs	r3, r3, #26
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	e018      	b.n	800214e <HAL_ADC_ConfigChannel+0x2aa>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002130:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002134:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002138:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e004      	b.n	800214e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800214e:	429a      	cmp	r2, r3
 8002150:	d106      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	2101      	movs	r1, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fb8c 	bl	8001878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2102      	movs	r1, #2
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fb70 	bl	800184c <LL_ADC_GetOffsetChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10a      	bne.n	800218c <HAL_ADC_ConfigChannel+0x2e8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2102      	movs	r1, #2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fb65 	bl	800184c <LL_ADC_GetOffsetChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	0e9b      	lsrs	r3, r3, #26
 8002186:	f003 021f 	and.w	r2, r3, #31
 800218a:	e01e      	b.n	80021ca <HAL_ADC_ConfigChannel+0x326>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2102      	movs	r1, #2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fb5a 	bl	800184c <LL_ADC_GetOffsetChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80021aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80021b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80021ba:	2320      	movs	r3, #32
 80021bc:	e004      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80021be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x33e>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0e9b      	lsrs	r3, r3, #26
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	e016      	b.n	8002210 <HAL_ADC_ConfigChannel+0x36c>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80021f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80021fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e004      	b.n	8002210 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002206:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002210:	429a      	cmp	r2, r3
 8002212:	d106      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	2102      	movs	r1, #2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fb2b 	bl	8001878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2103      	movs	r1, #3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fb0f 	bl	800184c <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x3aa>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2103      	movs	r1, #3
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fb04 	bl	800184c <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	e017      	b.n	800227e <HAL_ADC_ConfigChannel+0x3da>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2103      	movs	r1, #3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff faf9 	bl	800184c <LL_ADC_GetOffsetChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002268:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800226a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x3f2>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	e011      	b.n	80022ba <HAL_ADC_ConfigChannel+0x416>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80022a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80022a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e003      	b.n	80022ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80022b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d106      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	2103      	movs	r1, #3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fad6 	bl	8001878 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fbff 	bl	8001ad4 <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 813d 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f7ff fb80 	bl	80019f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4aa2      	ldr	r2, [pc, #648]	@ (8002580 <HAL_ADC_ConfigChannel+0x6dc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	f040 812e 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10b      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x480>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2b09      	cmp	r3, #9
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e019      	b.n	8002358 <HAL_ADC_ConfigChannel+0x4b4>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002334:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2b09      	cmp	r3, #9
 8002350:	bf94      	ite	ls
 8002352:	2301      	movls	r3, #1
 8002354:	2300      	movhi	r3, #0
 8002356:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002358:	2b00      	cmp	r3, #0
 800235a:	d079      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x4d4>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	3301      	adds	r3, #1
 8002370:	069b      	lsls	r3, r3, #26
 8002372:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002376:	e015      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x500>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002388:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800238a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x520>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	e017      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x550>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80023d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80023d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80023e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	ea42 0103 	orr.w	r1, r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_ADC_ConfigChannel+0x576>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	3301      	adds	r3, #1
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	051b      	lsls	r3, r3, #20
 8002418:	e018      	b.n	800244c <HAL_ADC_ConfigChannel+0x5a8>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800242a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800242c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244c:	430b      	orrs	r3, r1
 800244e:	e07e      	b.n	800254e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_ADC_ConfigChannel+0x5c8>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	069b      	lsls	r3, r3, #26
 8002466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800246a:	e015      	b.n	8002498 <HAL_ADC_ConfigChannel+0x5f4>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	069b      	lsls	r3, r3, #26
 8002494:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x614>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	2101      	movs	r1, #1
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	e017      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x644>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	61fb      	str	r3, [r7, #28]
  return result;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e003      	b.n	80024dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	ea42 0103 	orr.w	r1, r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x670>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	3301      	adds	r3, #1
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	3b1e      	subs	r3, #30
 800250c:	051b      	lsls	r3, r3, #20
 800250e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002512:	e01b      	b.n	800254c <HAL_ADC_ConfigChannel+0x6a8>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	613b      	str	r3, [r7, #16]
  return result;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800252c:	2320      	movs	r3, #32
 800252e:	e003      	b.n	8002538 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	f003 021f 	and.w	r2, r3, #31
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	3b1e      	subs	r3, #30
 8002546:	051b      	lsls	r3, r3, #20
 8002548:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002552:	4619      	mov	r1, r3
 8002554:	f7ff fa20 	bl	8001998 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_ADC_ConfigChannel+0x6e0>)
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80af 	beq.w	80026c4 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800256e:	d004      	beq.n	800257a <HAL_ADC_ConfigChannel+0x6d6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <HAL_ADC_ConfigChannel+0x6e4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10a      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x6ec>
 800257a:	4b04      	ldr	r3, [pc, #16]	@ (800258c <HAL_ADC_ConfigChannel+0x6e8>)
 800257c:	e009      	b.n	8002592 <HAL_ADC_ConfigChannel+0x6ee>
 800257e:	bf00      	nop
 8002580:	407f0000 	.word	0x407f0000
 8002584:	80080000 	.word	0x80080000
 8002588:	50000100 	.word	0x50000100
 800258c:	50000300 	.word	0x50000300
 8002590:	4b51      	ldr	r3, [pc, #324]	@ (80026d8 <HAL_ADC_ConfigChannel+0x834>)
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f928 	bl	80017e8 <LL_ADC_GetCommonPathInternalCh>
 8002598:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a4e      	ldr	r2, [pc, #312]	@ (80026dc <HAL_ADC_ConfigChannel+0x838>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x70c>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a4d      	ldr	r2, [pc, #308]	@ (80026e0 <HAL_ADC_ConfigChannel+0x83c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d134      	bne.n	800261a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d12e      	bne.n	800261a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025c4:	d17e      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ce:	d004      	beq.n	80025da <HAL_ADC_ConfigChannel+0x736>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a43      	ldr	r2, [pc, #268]	@ (80026e4 <HAL_ADC_ConfigChannel+0x840>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x73a>
 80025da:	4a43      	ldr	r2, [pc, #268]	@ (80026e8 <HAL_ADC_ConfigChannel+0x844>)
 80025dc:	e000      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x73c>
 80025de:	4a3e      	ldr	r2, [pc, #248]	@ (80026d8 <HAL_ADC_ConfigChannel+0x834>)
 80025e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f7ff f8e9 	bl	80017c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f0:	4b3e      	ldr	r3, [pc, #248]	@ (80026ec <HAL_ADC_ConfigChannel+0x848>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	4a3e      	ldr	r2, [pc, #248]	@ (80026f0 <HAL_ADC_ConfigChannel+0x84c>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800260a:	e002      	b.n	8002612 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3b01      	subs	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f9      	bne.n	800260c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002618:	e054      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a35      	ldr	r2, [pc, #212]	@ (80026f4 <HAL_ADC_ConfigChannel+0x850>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d120      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11a      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002638:	d144      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002642:	d004      	beq.n	800264e <HAL_ADC_ConfigChannel+0x7aa>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a26      	ldr	r2, [pc, #152]	@ (80026e4 <HAL_ADC_ConfigChannel+0x840>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x7ae>
 800264e:	4a26      	ldr	r2, [pc, #152]	@ (80026e8 <HAL_ADC_ConfigChannel+0x844>)
 8002650:	e000      	b.n	8002654 <HAL_ADC_ConfigChannel+0x7b0>
 8002652:	4a21      	ldr	r2, [pc, #132]	@ (80026d8 <HAL_ADC_ConfigChannel+0x834>)
 8002654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002658:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f7ff f8af 	bl	80017c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002664:	e02e      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a23      	ldr	r2, [pc, #140]	@ (80026f8 <HAL_ADC_ConfigChannel+0x854>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d129      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d123      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a18      	ldr	r2, [pc, #96]	@ (80026e4 <HAL_ADC_ConfigChannel+0x840>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01e      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800268e:	d004      	beq.n	800269a <HAL_ADC_ConfigChannel+0x7f6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a13      	ldr	r2, [pc, #76]	@ (80026e4 <HAL_ADC_ConfigChannel+0x840>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x7fa>
 800269a:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <HAL_ADC_ConfigChannel+0x844>)
 800269c:	e000      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x7fc>
 800269e:	4a0e      	ldr	r2, [pc, #56]	@ (80026d8 <HAL_ADC_ConfigChannel+0x834>)
 80026a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f7ff f889 	bl	80017c2 <LL_ADC_SetCommonPathInternalCh>
 80026b0:	e008      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	f043 0220 	orr.w	r2, r3, #32
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	37d8      	adds	r7, #216	@ 0xd8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	50000700 	.word	0x50000700
 80026dc:	c3210000 	.word	0xc3210000
 80026e0:	90c00010 	.word	0x90c00010
 80026e4:	50000100 	.word	0x50000100
 80026e8:	50000300 	.word	0x50000300
 80026ec:	200000b4 	.word	0x200000b4
 80026f0:	053e2d63 	.word	0x053e2d63
 80026f4:	c7520000 	.word	0xc7520000
 80026f8:	cb840000 	.word	0xcb840000

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	@ (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	@ 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800282c:	d301      	bcc.n	8002832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282e:	2301      	movs	r3, #1
 8002830:	e00f      	b.n	8002852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002832:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <SysTick_Config+0x40>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283a:	210f      	movs	r1, #15
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	f7ff ff8e 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <SysTick_Config+0x40>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284a:	4b04      	ldr	r3, [pc, #16]	@ (800285c <SysTick_Config+0x40>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000e010 	.word	0xe000e010

08002860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff47 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff5e 	bl	8002744 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff90 	bl	80027b4 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5f 	bl	8002760 <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffb2 	bl	800281c <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e147      	b.n	8002b66 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fbb2 	bl	8001054 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0210 	bic.w	r2, r2, #16
 80028fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002900:	f7fe ff1e 	bl	8001740 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002906:	e012      	b.n	800292e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002908:	f7fe ff1a 	bl	8001740 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b0a      	cmp	r3, #10
 8002914:	d90b      	bls.n	800292e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2203      	movs	r2, #3
 8002926:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e11b      	b.n	8002b66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b08      	cmp	r3, #8
 800293a:	d0e5      	beq.n	8002908 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800294c:	f7fe fef8 	bl	8001740 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002952:	e012      	b.n	800297a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002954:	f7fe fef4 	bl	8001740 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b0a      	cmp	r3, #10
 8002960:	d90b      	bls.n	800297a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0f5      	b.n	8002b66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0e5      	beq.n	8002954 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0202 	orr.w	r2, r2, #2
 8002996:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a74      	ldr	r2, [pc, #464]	@ (8002b70 <HAL_FDCAN_Init+0x2ac>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d103      	bne.n	80029aa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80029a2:	4a74      	ldr	r2, [pc, #464]	@ (8002b74 <HAL_FDCAN_Init+0x2b0>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7c1b      	ldrb	r3, [r3, #16]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d108      	bne.n	80029c4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029c0:	619a      	str	r2, [r3, #24]
 80029c2:	e007      	b.n	80029d4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7c5b      	ldrb	r3, [r3, #17]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d108      	bne.n	80029ee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	e007      	b.n	80029fe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7c9b      	ldrb	r3, [r3, #18]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d108      	bne.n	8002a18 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a14:	619a      	str	r2, [r3, #24]
 8002a16:	e007      	b.n	8002a28 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a26:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002a4c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0210 	bic.w	r2, r2, #16
 8002a5c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d108      	bne.n	8002a78 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0204 	orr.w	r2, r2, #4
 8002a74:	619a      	str	r2, [r3, #24]
 8002a76:	e02c      	b.n	8002ad2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d028      	beq.n	8002ad2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d01c      	beq.n	8002ac2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a96:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0210 	orr.w	r2, r2, #16
 8002aa6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d110      	bne.n	8002ad2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0220 	orr.w	r2, r2, #32
 8002abe:	619a      	str	r2, [r3, #24]
 8002ac0:	e007      	b.n	8002ad2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0220 	orr.w	r2, r2, #32
 8002ad0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ae2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002aea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002afa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002afc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b06:	d115      	bne.n	8002b34 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	3b01      	subs	r3, #1
 8002b14:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b16:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b20:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b30:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b32:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f814 	bl	8002b78 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40006400 	.word	0x40006400
 8002b74:	40006500 	.word	0x40006500

08002b78 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b80:	4b2c      	ldr	r3, [pc, #176]	@ (8002c34 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002b82:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2b      	ldr	r2, [pc, #172]	@ (8002c38 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d103      	bne.n	8002b96 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002b94:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ba4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bca:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd2:	061a      	lsls	r2, r3, #24
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e005      	b.n	8002c18 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3304      	adds	r3, #4
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3f3      	bcc.n	8002c0c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	4000a400 	.word	0x4000a400
 8002c38:	40006800 	.word	0x40006800

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c4a:	e15a      	b.n	8002f02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 814c 	beq.w	8002efc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d005      	beq.n	8002c7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d130      	bne.n	8002cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 0201 	and.w	r2, r3, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d017      	beq.n	8002d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d123      	bne.n	8002d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	08da      	lsrs	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	6939      	ldr	r1, [r7, #16]
 8002d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0203 	and.w	r2, r3, #3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80a6 	beq.w	8002efc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f20 <HAL_GPIO_Init+0x2e4>)
 8002db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f20 <HAL_GPIO_Init+0x2e4>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dbc:	4b58      	ldr	r3, [pc, #352]	@ (8002f20 <HAL_GPIO_Init+0x2e4>)
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc8:	4a56      	ldr	r2, [pc, #344]	@ (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002df2:	d01f      	beq.n	8002e34 <HAL_GPIO_Init+0x1f8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a4c      	ldr	r2, [pc, #304]	@ (8002f28 <HAL_GPIO_Init+0x2ec>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d019      	beq.n	8002e30 <HAL_GPIO_Init+0x1f4>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a4b      	ldr	r2, [pc, #300]	@ (8002f2c <HAL_GPIO_Init+0x2f0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <HAL_GPIO_Init+0x1f0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a4a      	ldr	r2, [pc, #296]	@ (8002f30 <HAL_GPIO_Init+0x2f4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00d      	beq.n	8002e28 <HAL_GPIO_Init+0x1ec>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a49      	ldr	r2, [pc, #292]	@ (8002f34 <HAL_GPIO_Init+0x2f8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <HAL_GPIO_Init+0x1e8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a48      	ldr	r2, [pc, #288]	@ (8002f38 <HAL_GPIO_Init+0x2fc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_GPIO_Init+0x1e4>
 8002e1c:	2305      	movs	r3, #5
 8002e1e:	e00a      	b.n	8002e36 <HAL_GPIO_Init+0x1fa>
 8002e20:	2306      	movs	r3, #6
 8002e22:	e008      	b.n	8002e36 <HAL_GPIO_Init+0x1fa>
 8002e24:	2304      	movs	r3, #4
 8002e26:	e006      	b.n	8002e36 <HAL_GPIO_Init+0x1fa>
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e004      	b.n	8002e36 <HAL_GPIO_Init+0x1fa>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x1fa>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_GPIO_Init+0x1fa>
 8002e34:	2300      	movs	r3, #0
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	f002 0203 	and.w	r2, r2, #3
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	4093      	lsls	r3, r2
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e46:	4937      	ldr	r1, [pc, #220]	@ (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e54:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e78:	4a30      	ldr	r2, [pc, #192]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ea2:	4a26      	ldr	r2, [pc, #152]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ea8:	4b24      	ldr	r3, [pc, #144]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ef6:	4a11      	ldr	r2, [pc, #68]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3301      	adds	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f ae9d 	bne.w	8002c4c <HAL_GPIO_Init+0x10>
  }
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010000 	.word	0x40010000
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	48000800 	.word	0x48000800
 8002f30:	48000c00 	.word	0x48000c00
 8002f34:	48001000 	.word	0x48001000
 8002f38:	48001400 	.word	0x48001400
 8002f3c:	40010400 	.word	0x40010400

08002f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f50:	787b      	ldrb	r3, [r7, #1]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4013      	ands	r3, r2
 8002f88:	041a      	lsls	r2, r3, #16
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43d9      	mvns	r1, r3
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	400b      	ands	r3, r1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e08d      	b.n	80030d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe f89c 	bl	8001108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2224      	movs	r2, #36	@ 0x24
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	e006      	b.n	800302c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800302a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d108      	bne.n	8003046 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	e007      	b.n	8003056 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003068:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003078:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d138      	bne.n	8003162 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e032      	b.n	8003164 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2224      	movs	r2, #36	@ 0x24
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800312c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	d139      	bne.n	80031fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003190:	2302      	movs	r3, #2
 8003192:	e033      	b.n	80031fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0c0      	b.n	800339c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe f8e0 	bl	80013f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2203      	movs	r2, #3
 8003238:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 f867 	bl	8006314 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e03e      	b.n	80032ca <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	3311      	adds	r3, #17
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	3310      	adds	r3, #16
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	3313      	adds	r3, #19
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	3320      	adds	r3, #32
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	3324      	adds	r3, #36	@ 0x24
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	440b      	add	r3, r1
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	3301      	adds	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	791b      	ldrb	r3, [r3, #4]
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d3bb      	bcc.n	800324c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e044      	b.n	8003364 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	440b      	add	r3, r1
 8003340:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	3301      	adds	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	791b      	ldrb	r3, [r3, #4]
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	429a      	cmp	r2, r3
 800336c:	d3b5      	bcc.n	80032da <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	e893 0006 	ldmia.w	r3, {r1, r2}
 800337a:	f002 ffe6 	bl	800634a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7a9b      	ldrb	r3, [r3, #10]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f805 	bl	80033a4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d141      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003406:	4b4b      	ldr	r3, [pc, #300]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003412:	d131      	bne.n	8003478 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003414:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800341a:	4a46      	ldr	r2, [pc, #280]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003420:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003424:	4b43      	ldr	r3, [pc, #268]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800342c:	4a41      	ldr	r2, [pc, #260]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003432:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003434:	4b40      	ldr	r3, [pc, #256]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2232      	movs	r2, #50	@ 0x32
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	4a3f      	ldr	r2, [pc, #252]	@ (800353c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	0c9b      	lsrs	r3, r3, #18
 8003446:	3301      	adds	r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800344a:	e002      	b.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3b01      	subs	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003452:	4b38      	ldr	r3, [pc, #224]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345e:	d102      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f2      	bne.n	800344c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003466:	4b33      	ldr	r3, [pc, #204]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003472:	d158      	bne.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e057      	b.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003478:	4b2e      	ldr	r3, [pc, #184]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800347e:	4a2d      	ldr	r2, [pc, #180]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003484:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003488:	e04d      	b.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003490:	d141      	bne.n	8003516 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003492:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349e:	d131      	bne.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034a0:	4b24      	ldr	r3, [pc, #144]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034a6:	4a23      	ldr	r2, [pc, #140]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034b0:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2232      	movs	r2, #50	@ 0x32
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	0c9b      	lsrs	r3, r3, #18
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d6:	e002      	b.n	80034de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3b01      	subs	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034de:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ea:	d102      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f2      	bne.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034f2:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034fe:	d112      	bne.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e011      	b.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003504:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800350a:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003514:	e007      	b.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800351e:	4a05      	ldr	r2, [pc, #20]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003520:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003524:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40007000 	.word	0x40007000
 8003538:	200000b4 	.word	0x200000b4
 800353c:	431bde83 	.word	0x431bde83

08003540 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a04      	ldr	r2, [pc, #16]	@ (800355c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800354a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800354e:	6093      	str	r3, [r2, #8]
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40007000 	.word	0x40007000

08003560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e2fe      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d075      	beq.n	800366a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357e:	4b97      	ldr	r3, [pc, #604]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003588:	4b94      	ldr	r3, [pc, #592]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d102      	bne.n	800359e <HAL_RCC_OscConfig+0x3e>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_OscConfig+0x44>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d10b      	bne.n	80035bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	4b8d      	ldr	r3, [pc, #564]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d05b      	beq.n	8003668 <HAL_RCC_OscConfig+0x108>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d157      	bne.n	8003668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e2d9      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x74>
 80035c6:	4b85      	ldr	r3, [pc, #532]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a84      	ldr	r2, [pc, #528]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e01d      	b.n	8003610 <HAL_RCC_OscConfig+0xb0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x98>
 80035de:	4b7f      	ldr	r3, [pc, #508]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7e      	ldr	r2, [pc, #504]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b7c      	ldr	r3, [pc, #496]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7b      	ldr	r2, [pc, #492]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0xb0>
 80035f8:	4b78      	ldr	r3, [pc, #480]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a77      	ldr	r2, [pc, #476]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b75      	ldr	r3, [pc, #468]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a74      	ldr	r2, [pc, #464]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 800360a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800360e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d013      	beq.n	8003640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe f892 	bl	8001740 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe f88e 	bl	8001740 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	@ 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e29e      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003632:	4b6a      	ldr	r3, [pc, #424]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0xc0>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe f87e 	bl	8001740 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe f87a 	bl	8001740 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e28a      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365a:	4b60      	ldr	r3, [pc, #384]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0xe8>
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d075      	beq.n	8003762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	4b59      	ldr	r3, [pc, #356]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	4b56      	ldr	r3, [pc, #344]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b0c      	cmp	r3, #12
 800368e:	d102      	bne.n	8003696 <HAL_RCC_OscConfig+0x136>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d002      	beq.n	800369c <HAL_RCC_OscConfig+0x13c>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b04      	cmp	r3, #4
 800369a:	d11f      	bne.n	80036dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800369c:	4b4f      	ldr	r3, [pc, #316]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_OscConfig+0x154>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e25d      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b49      	ldr	r3, [pc, #292]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	4946      	ldr	r1, [pc, #280]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036c8:	4b45      	ldr	r3, [pc, #276]	@ (80037e0 <HAL_RCC_OscConfig+0x280>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd ffeb 	bl	80016a8 <HAL_InitTick>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d043      	beq.n	8003760 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e249      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d023      	beq.n	800372c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4b3d      	ldr	r3, [pc, #244]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a3c      	ldr	r2, [pc, #240]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80036ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe f826 	bl	8001740 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f8:	f7fe f822 	bl	8001740 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e232      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370a:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b31      	ldr	r3, [pc, #196]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	492d      	ldr	r1, [pc, #180]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
 800372a:	e01a      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372c:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2a      	ldr	r2, [pc, #168]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003732:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fe f802 	bl	8001740 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003740:	f7fd fffe 	bl	8001740 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e20e      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1e0>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d041      	beq.n	80037f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 8003778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377c:	4a17      	ldr	r2, [pc, #92]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fd ffdb 	bl	8001740 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378e:	f7fd ffd7 	bl	8001740 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e1e7      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a0:	4b0e      	ldr	r3, [pc, #56]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80037a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ef      	beq.n	800378e <HAL_RCC_OscConfig+0x22e>
 80037ae:	e020      	b.n	80037f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b0:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b6:	4a09      	ldr	r2, [pc, #36]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fd ffbe 	bl	8001740 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c6:	e00d      	b.n	80037e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c8:	f7fd ffba 	bl	8001740 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d906      	bls.n	80037e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1ca      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	200000b8 	.word	0x200000b8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ea      	bne.n	80037c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80a6 	beq.w	800394c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003804:	4b84      	ldr	r3, [pc, #528]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_OscConfig+0x2b4>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x2b6>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003824:	6593      	str	r3, [r2, #88]	@ 0x58
 8003826:	4b7c      	ldr	r3, [pc, #496]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003836:	4b79      	ldr	r3, [pc, #484]	@ (8003a1c <HAL_RCC_OscConfig+0x4bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003842:	4b76      	ldr	r3, [pc, #472]	@ (8003a1c <HAL_RCC_OscConfig+0x4bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a75      	ldr	r2, [pc, #468]	@ (8003a1c <HAL_RCC_OscConfig+0x4bc>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fd ff77 	bl	8001740 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fd ff73 	bl	8001740 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e183      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003868:	4b6c      	ldr	r3, [pc, #432]	@ (8003a1c <HAL_RCC_OscConfig+0x4bc>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d108      	bne.n	800388e <HAL_RCC_OscConfig+0x32e>
 800387c:	4b66      	ldr	r3, [pc, #408]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003882:	4a65      	ldr	r2, [pc, #404]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800388c:	e024      	b.n	80038d8 <HAL_RCC_OscConfig+0x378>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b05      	cmp	r3, #5
 8003894:	d110      	bne.n	80038b8 <HAL_RCC_OscConfig+0x358>
 8003896:	4b60      	ldr	r3, [pc, #384]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389c:	4a5e      	ldr	r2, [pc, #376]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 800389e:	f043 0304 	orr.w	r3, r3, #4
 80038a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038b6:	e00f      	b.n	80038d8 <HAL_RCC_OscConfig+0x378>
 80038b8:	4b57      	ldr	r3, [pc, #348]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038be:	4a56      	ldr	r2, [pc, #344]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c8:	4b53      	ldr	r3, [pc, #332]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	4a52      	ldr	r2, [pc, #328]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80038d0:	f023 0304 	bic.w	r3, r3, #4
 80038d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d016      	beq.n	800390e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fd ff2e 	bl	8001740 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e8:	f7fd ff2a 	bl	8001740 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e138      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fe:	4b46      	ldr	r3, [pc, #280]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ed      	beq.n	80038e8 <HAL_RCC_OscConfig+0x388>
 800390c:	e015      	b.n	800393a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fd ff17 	bl	8001740 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003914:	e00a      	b.n	800392c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fd ff13 	bl	8001740 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003924:	4293      	cmp	r3, r2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e121      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800392c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ed      	bne.n	8003916 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003940:	4b35      	ldr	r3, [pc, #212]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	4a34      	ldr	r2, [pc, #208]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d03c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01c      	beq.n	800399a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003960:	4b2d      	ldr	r3, [pc, #180]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003962:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003966:	4a2c      	ldr	r2, [pc, #176]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fd fee6 	bl	8001740 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003978:	f7fd fee2 	bl	8001740 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0f2      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800398a:	4b23      	ldr	r3, [pc, #140]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 800398c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ef      	beq.n	8003978 <HAL_RCC_OscConfig+0x418>
 8003998:	e01b      	b.n	80039d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800399a:	4b1f      	ldr	r3, [pc, #124]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 800399c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fd fec9 	bl	8001740 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039b2:	f7fd fec5 	bl	8001740 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0d5      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039c4:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80039c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1ef      	bne.n	80039b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80c9 	beq.w	8003b6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	f000 8083 	beq.w	8003af0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d15e      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a08      	ldr	r2, [pc, #32]	@ (8003a18 <HAL_RCC_OscConfig+0x4b8>)
 80039f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fe9f 	bl	8001740 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	e00c      	b.n	8003a20 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a06:	f7fd fe9b 	bl	8001740 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d905      	bls.n	8003a20 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e0ab      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a20:	4b55      	ldr	r3, [pc, #340]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ec      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2c:	4b52      	ldr	r3, [pc, #328]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4b52      	ldr	r3, [pc, #328]	@ (8003b7c <HAL_RCC_OscConfig+0x61c>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6a11      	ldr	r1, [r2, #32]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	4311      	orrs	r1, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a46:	0212      	lsls	r2, r2, #8
 8003a48:	4311      	orrs	r1, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a4e:	0852      	lsrs	r2, r2, #1
 8003a50:	3a01      	subs	r2, #1
 8003a52:	0552      	lsls	r2, r2, #21
 8003a54:	4311      	orrs	r1, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a5a:	0852      	lsrs	r2, r2, #1
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	0652      	lsls	r2, r2, #25
 8003a60:	4311      	orrs	r1, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a66:	06d2      	lsls	r2, r2, #27
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	4943      	ldr	r1, [pc, #268]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a70:	4b41      	ldr	r3, [pc, #260]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a40      	ldr	r2, [pc, #256]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4a3d      	ldr	r2, [pc, #244]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd fe5a 	bl	8001740 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd fe56 	bl	8001740 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e066      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa2:	4b35      	ldr	r3, [pc, #212]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x530>
 8003aae:	e05e      	b.n	8003b6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab0:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a30      	ldr	r2, [pc, #192]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003ab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fe40 	bl	8001740 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fe3c 	bl	8001740 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e04c      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad6:	4b28      	ldr	r3, [pc, #160]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ae2:	4b25      	ldr	r3, [pc, #148]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	4924      	ldr	r1, [pc, #144]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003ae8:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <HAL_RCC_OscConfig+0x620>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	60cb      	str	r3, [r1, #12]
 8003aee:	e03e      	b.n	8003b6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e039      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003afc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <HAL_RCC_OscConfig+0x618>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0203 	and.w	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d12c      	bne.n	8003b6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d123      	bne.n	8003b6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d11b      	bne.n	8003b6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d113      	bne.n	8003b6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	3b01      	subs	r3, #1
 8003b64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	019f800c 	.word	0x019f800c
 8003b80:	feeefffc 	.word	0xfeeefffc

08003b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e11e      	b.n	8003dda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b91      	ldr	r3, [pc, #580]	@ (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d910      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b8e      	ldr	r3, [pc, #568]	@ (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 020f 	bic.w	r2, r3, #15
 8003bb2:	498c      	ldr	r1, [pc, #560]	@ (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b8a      	ldr	r3, [pc, #552]	@ (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e106      	b.n	8003dda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d073      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d129      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be0:	4b81      	ldr	r3, [pc, #516]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0f4      	b.n	8003dda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bf0:	f000 f99e 	bl	8003f30 <RCC_GetSysClockFreqFromPLLSource>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4a7c      	ldr	r2, [pc, #496]	@ (8003dec <HAL_RCC_ClockConfig+0x268>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d93f      	bls.n	8003c7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bfe:	4b7a      	ldr	r3, [pc, #488]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d033      	beq.n	8003c7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d12f      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c1e:	4b72      	ldr	r3, [pc, #456]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c26:	4a70      	ldr	r2, [pc, #448]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e024      	b.n	8003c7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0c6      	b.n	8003dda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4c:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0be      	b.n	8003dda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c5c:	f000 f8ce 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4a61      	ldr	r2, [pc, #388]	@ (8003dec <HAL_RCC_ClockConfig+0x268>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d909      	bls.n	8003c7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c72:	4a5d      	ldr	r2, [pc, #372]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c7a:	2380      	movs	r3, #128	@ 0x80
 8003c7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c7e:	4b5a      	ldr	r3, [pc, #360]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4957      	ldr	r1, [pc, #348]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c90:	f7fd fd56 	bl	8001740 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fd fd52 	bl	8001740 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e095      	b.n	8003dda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b4e      	ldr	r3, [pc, #312]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd8:	4b43      	ldr	r3, [pc, #268]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a42      	ldr	r2, [pc, #264]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003cde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ce2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003cfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b39      	ldr	r3, [pc, #228]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4936      	ldr	r1, [pc, #216]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b80      	cmp	r3, #128	@ 0x80
 8003d18:	d105      	bne.n	8003d26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d1a:	4b33      	ldr	r3, [pc, #204]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	4a32      	ldr	r2, [pc, #200]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003d20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d26:	4b2f      	ldr	r3, [pc, #188]	@ (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d21d      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d34:	4b2b      	ldr	r3, [pc, #172]	@ (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 020f 	bic.w	r2, r3, #15
 8003d3c:	4929      	ldr	r1, [pc, #164]	@ (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d44:	f7fd fcfc 	bl	8001740 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fd fcf8 	bl	8001740 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e03b      	b.n	8003dda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1ed      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4917      	ldr	r1, [pc, #92]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9a:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	490f      	ldr	r1, [pc, #60]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dae:	f000 f825 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	490c      	ldr	r1, [pc, #48]	@ (8003df0 <HAL_RCC_ClockConfig+0x26c>)
 8003dc0:	5ccb      	ldrb	r3, [r1, r3]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	4a0a      	ldr	r2, [pc, #40]	@ (8003df4 <HAL_RCC_ClockConfig+0x270>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003dce:	4b0a      	ldr	r3, [pc, #40]	@ (8003df8 <HAL_RCC_ClockConfig+0x274>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd fc68 	bl	80016a8 <HAL_InitTick>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40022000 	.word	0x40022000
 8003de8:	40021000 	.word	0x40021000
 8003dec:	04c4b400 	.word	0x04c4b400
 8003df0:	08007224 	.word	0x08007224
 8003df4:	200000b4 	.word	0x200000b4
 8003df8:	200000b8 	.word	0x200000b8

08003dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e02:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d102      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e047      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e14:	4b27      	ldr	r3, [pc, #156]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e20:	4b26      	ldr	r3, [pc, #152]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	e03e      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e26:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d136      	bne.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e32:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	3301      	adds	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d10c      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e50:	4a1a      	ldr	r2, [pc, #104]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	4a16      	ldr	r2, [pc, #88]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e5a:	68d2      	ldr	r2, [r2, #12]
 8003e5c:	0a12      	lsrs	r2, r2, #8
 8003e5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	617b      	str	r3, [r7, #20]
      break;
 8003e68:	e00c      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e6a:	4a13      	ldr	r2, [pc, #76]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	4a10      	ldr	r2, [pc, #64]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e74:	68d2      	ldr	r2, [r2, #12]
 8003e76:	0a12      	lsrs	r2, r2, #8
 8003e78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e7c:	fb02 f303 	mul.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
      break;
 8003e82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	0e5b      	lsrs	r3, r3, #25
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	e001      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ea4:	693b      	ldr	r3, [r7, #16]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200

08003ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	@ (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	200000b4 	.word	0x200000b4

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	@ (8003f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	08007234 	.word	0x08007234

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f08:	f7ff ffda 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0adb      	lsrs	r3, r3, #11
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08007234 	.word	0x08007234

08003f30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f36:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d10c      	bne.n	8003f6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f54:	4a17      	ldr	r2, [pc, #92]	@ (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	4a14      	ldr	r2, [pc, #80]	@ (8003fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f5e:	68d2      	ldr	r2, [r2, #12]
 8003f60:	0a12      	lsrs	r2, r2, #8
 8003f62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	617b      	str	r3, [r7, #20]
    break;
 8003f6c:	e00c      	b.n	8003f88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f6e:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	0a12      	lsrs	r2, r2, #8
 8003f7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    break;
 8003f86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f88:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	0e5b      	lsrs	r3, r3, #25
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	3301      	adds	r3, #1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fa2:	687b      	ldr	r3, [r7, #4]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	007a1200 	.word	0x007a1200
 8003fb8:	00f42400 	.word	0x00f42400

08003fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fc8:	2300      	movs	r3, #0
 8003fca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8098 	beq.w	800410a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fde:	4b43      	ldr	r3, [pc, #268]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10d      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4b40      	ldr	r3, [pc, #256]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	4a3f      	ldr	r2, [pc, #252]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004002:	2301      	movs	r3, #1
 8004004:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004006:	4b3a      	ldr	r3, [pc, #232]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a39      	ldr	r2, [pc, #228]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004012:	f7fd fb95 	bl	8001740 <HAL_GetTick>
 8004016:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004018:	e009      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fd fb91 	bl	8001740 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d902      	bls.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	74fb      	strb	r3, [r7, #19]
        break;
 800402c:	e005      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800402e:	4b30      	ldr	r3, [pc, #192]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0ef      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d159      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004040:	4b2a      	ldr	r3, [pc, #168]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01e      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	429a      	cmp	r2, r3
 800405a:	d019      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800405c:	4b23      	ldr	r3, [pc, #140]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004066:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004068:	4b20      	ldr	r3, [pc, #128]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406e:	4a1f      	ldr	r2, [pc, #124]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004078:	4b1c      	ldr	r3, [pc, #112]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	4a1b      	ldr	r2, [pc, #108]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004088:	4a18      	ldr	r2, [pc, #96]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fd fb51 	bl	8001740 <HAL_GetTick>
 800409e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a0:	e00b      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fd fb4d 	bl	8001740 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d902      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	74fb      	strb	r3, [r7, #19]
            break;
 80040b8:	e006      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ba:	4b0c      	ldr	r3, [pc, #48]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ec      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ce:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040dc:	4903      	ldr	r1, [pc, #12]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040e4:	e008      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	74bb      	strb	r3, [r7, #18]
 80040ea:	e005      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f8:	7c7b      	ldrb	r3, [r7, #17]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4ba7      	ldr	r3, [pc, #668]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004102:	4aa6      	ldr	r2, [pc, #664]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004108:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004116:	4ba1      	ldr	r3, [pc, #644]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f023 0203 	bic.w	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	499d      	ldr	r1, [pc, #628]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004138:	4b98      	ldr	r3, [pc, #608]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	f023 020c 	bic.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	4995      	ldr	r1, [pc, #596]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800415a:	4b90      	ldr	r3, [pc, #576]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	498c      	ldr	r1, [pc, #560]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800417c:	4b87      	ldr	r3, [pc, #540]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4984      	ldr	r1, [pc, #528]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800419e:	4b7f      	ldr	r3, [pc, #508]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	497b      	ldr	r1, [pc, #492]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c0:	4b76      	ldr	r3, [pc, #472]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	4973      	ldr	r1, [pc, #460]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e2:	4b6e      	ldr	r3, [pc, #440]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	496a      	ldr	r1, [pc, #424]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004204:	4b65      	ldr	r3, [pc, #404]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4962      	ldr	r1, [pc, #392]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004226:	4b5d      	ldr	r3, [pc, #372]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	4959      	ldr	r1, [pc, #356]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004248:	4b54      	ldr	r3, [pc, #336]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	4951      	ldr	r1, [pc, #324]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004266:	2b00      	cmp	r3, #0
 8004268:	d015      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800426a:	4b4c      	ldr	r3, [pc, #304]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	4948      	ldr	r1, [pc, #288]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004288:	d105      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428a:	4b44      	ldr	r3, [pc, #272]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4a43      	ldr	r2, [pc, #268]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004294:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d015      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042a2:	4b3e      	ldr	r3, [pc, #248]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	493a      	ldr	r1, [pc, #232]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c0:	d105      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c2:	4b36      	ldr	r3, [pc, #216]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a35      	ldr	r2, [pc, #212]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042cc:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042da:	4b30      	ldr	r3, [pc, #192]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	492c      	ldr	r1, [pc, #176]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042f8:	d105      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fa:	4b28      	ldr	r3, [pc, #160]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4a27      	ldr	r2, [pc, #156]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004304:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d015      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004312:	4b22      	ldr	r3, [pc, #136]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004318:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004320:	491e      	ldr	r1, [pc, #120]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004330:	d105      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004332:	4b1a      	ldr	r3, [pc, #104]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4a19      	ldr	r2, [pc, #100]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800433c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d015      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800434a:	4b14      	ldr	r3, [pc, #80]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004358:	4910      	ldr	r1, [pc, #64]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004368:	d105      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436a:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4a0b      	ldr	r2, [pc, #44]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004374:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d018      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004382:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	4902      	ldr	r1, [pc, #8]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	e001      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800439c:	40021000 	.word	0x40021000
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043a6:	d105      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043a8:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a20      	ldr	r2, [pc, #128]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d015      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	4918      	ldr	r1, [pc, #96]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043de:	d105      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043e0:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a12      	ldr	r2, [pc, #72]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d015      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004406:	490a      	ldr	r1, [pc, #40]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004412:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004416:	d105      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a04      	ldr	r2, [pc, #16]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800441e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004422:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004424:	7cbb      	ldrb	r3, [r7, #18]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000

08004434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e049      	b.n	80044da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc feac 	bl	80011b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f000 fa56 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_TIM_PWM_Start+0x24>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	bf14      	ite	ne
 8004500:	2301      	movne	r3, #1
 8004502:	2300      	moveq	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	e03c      	b.n	8004582 <HAL_TIM_PWM_Start+0x9e>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b04      	cmp	r3, #4
 800450c:	d109      	bne.n	8004522 <HAL_TIM_PWM_Start+0x3e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b01      	cmp	r3, #1
 8004518:	bf14      	ite	ne
 800451a:	2301      	movne	r3, #1
 800451c:	2300      	moveq	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	e02f      	b.n	8004582 <HAL_TIM_PWM_Start+0x9e>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d109      	bne.n	800453c <HAL_TIM_PWM_Start+0x58>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e022      	b.n	8004582 <HAL_TIM_PWM_Start+0x9e>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b0c      	cmp	r3, #12
 8004540:	d109      	bne.n	8004556 <HAL_TIM_PWM_Start+0x72>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	bf14      	ite	ne
 800454e:	2301      	movne	r3, #1
 8004550:	2300      	moveq	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e015      	b.n	8004582 <HAL_TIM_PWM_Start+0x9e>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b10      	cmp	r3, #16
 800455a:	d109      	bne.n	8004570 <HAL_TIM_PWM_Start+0x8c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e008      	b.n	8004582 <HAL_TIM_PWM_Start+0x9e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e0a1      	b.n	80046ce <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <HAL_TIM_PWM_Start+0xb6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004598:	e023      	b.n	80045e2 <HAL_TIM_PWM_Start+0xfe>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b04      	cmp	r3, #4
 800459e:	d104      	bne.n	80045aa <HAL_TIM_PWM_Start+0xc6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a8:	e01b      	b.n	80045e2 <HAL_TIM_PWM_Start+0xfe>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_PWM_Start+0xd6>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b8:	e013      	b.n	80045e2 <HAL_TIM_PWM_Start+0xfe>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b0c      	cmp	r3, #12
 80045be:	d104      	bne.n	80045ca <HAL_TIM_PWM_Start+0xe6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045c8:	e00b      	b.n	80045e2 <HAL_TIM_PWM_Start+0xfe>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Start+0xf6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045d8:	e003      	b.n	80045e2 <HAL_TIM_PWM_Start+0xfe>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2201      	movs	r2, #1
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd6e 	bl	80050cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <HAL_TIM_PWM_Start+0x1f4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_TIM_PWM_Start+0x148>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a37      	ldr	r2, [pc, #220]	@ (80046dc <HAL_TIM_PWM_Start+0x1f8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_TIM_PWM_Start+0x148>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a35      	ldr	r2, [pc, #212]	@ (80046e0 <HAL_TIM_PWM_Start+0x1fc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_TIM_PWM_Start+0x148>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a34      	ldr	r2, [pc, #208]	@ (80046e4 <HAL_TIM_PWM_Start+0x200>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_TIM_PWM_Start+0x148>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a32      	ldr	r2, [pc, #200]	@ (80046e8 <HAL_TIM_PWM_Start+0x204>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_PWM_Start+0x148>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a31      	ldr	r2, [pc, #196]	@ (80046ec <HAL_TIM_PWM_Start+0x208>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_TIM_PWM_Start+0x14c>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_TIM_PWM_Start+0x14e>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a23      	ldr	r2, [pc, #140]	@ (80046d8 <HAL_TIM_PWM_Start+0x1f4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d01d      	beq.n	800468c <HAL_TIM_PWM_Start+0x1a8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004658:	d018      	beq.n	800468c <HAL_TIM_PWM_Start+0x1a8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a24      	ldr	r2, [pc, #144]	@ (80046f0 <HAL_TIM_PWM_Start+0x20c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <HAL_TIM_PWM_Start+0x1a8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a22      	ldr	r2, [pc, #136]	@ (80046f4 <HAL_TIM_PWM_Start+0x210>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_TIM_PWM_Start+0x1a8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1a      	ldr	r2, [pc, #104]	@ (80046dc <HAL_TIM_PWM_Start+0x1f8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_TIM_PWM_Start+0x1a8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a18      	ldr	r2, [pc, #96]	@ (80046e0 <HAL_TIM_PWM_Start+0x1fc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_TIM_PWM_Start+0x1a8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <HAL_TIM_PWM_Start+0x208>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d115      	bne.n	80046b8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <HAL_TIM_PWM_Start+0x214>)
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b06      	cmp	r3, #6
 800469c:	d015      	beq.n	80046ca <HAL_TIM_PWM_Start+0x1e6>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a4:	d011      	beq.n	80046ca <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e008      	b.n	80046ca <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e000      	b.n	80046cc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40013400 	.word	0x40013400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800
 80046ec:	40015000 	.word	0x40015000
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	00010007 	.word	0x00010007

080046fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004716:	2302      	movs	r3, #2
 8004718:	e0ff      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b14      	cmp	r3, #20
 8004726:	f200 80f0 	bhi.w	800490a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800472a:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004785 	.word	0x08004785
 8004734:	0800490b 	.word	0x0800490b
 8004738:	0800490b 	.word	0x0800490b
 800473c:	0800490b 	.word	0x0800490b
 8004740:	080047c5 	.word	0x080047c5
 8004744:	0800490b 	.word	0x0800490b
 8004748:	0800490b 	.word	0x0800490b
 800474c:	0800490b 	.word	0x0800490b
 8004750:	08004807 	.word	0x08004807
 8004754:	0800490b 	.word	0x0800490b
 8004758:	0800490b 	.word	0x0800490b
 800475c:	0800490b 	.word	0x0800490b
 8004760:	08004847 	.word	0x08004847
 8004764:	0800490b 	.word	0x0800490b
 8004768:	0800490b 	.word	0x0800490b
 800476c:	0800490b 	.word	0x0800490b
 8004770:	08004889 	.word	0x08004889
 8004774:	0800490b 	.word	0x0800490b
 8004778:	0800490b 	.word	0x0800490b
 800477c:	0800490b 	.word	0x0800490b
 8004780:	080048c9 	.word	0x080048c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f974 	bl	8004a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0208 	orr.w	r2, r2, #8
 800479e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0204 	bic.w	r2, r2, #4
 80047ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	619a      	str	r2, [r3, #24]
      break;
 80047c2:	e0a5      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f9ee 	bl	8004bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	619a      	str	r2, [r3, #24]
      break;
 8004804:	e084      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fa61 	bl	8004cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0208 	orr.w	r2, r2, #8
 8004820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0204 	bic.w	r2, r2, #4
 8004830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	61da      	str	r2, [r3, #28]
      break;
 8004844:	e064      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fad3 	bl	8004df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69d9      	ldr	r1, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	021a      	lsls	r2, r3, #8
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	61da      	str	r2, [r3, #28]
      break;
 8004886:	e043      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fb46 	bl	8004f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048c6:	e023      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fb90 	bl	8004ff4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004908:	e002      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
      break;
 800490e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop

08004924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a48      	ldr	r2, [pc, #288]	@ (8004a58 <TIM_Base_SetConfig+0x134>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004942:	d00f      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a45      	ldr	r2, [pc, #276]	@ (8004a5c <TIM_Base_SetConfig+0x138>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00b      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a44      	ldr	r2, [pc, #272]	@ (8004a60 <TIM_Base_SetConfig+0x13c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a43      	ldr	r2, [pc, #268]	@ (8004a64 <TIM_Base_SetConfig+0x140>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a42      	ldr	r2, [pc, #264]	@ (8004a68 <TIM_Base_SetConfig+0x144>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d108      	bne.n	8004976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a37      	ldr	r2, [pc, #220]	@ (8004a58 <TIM_Base_SetConfig+0x134>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01f      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004984:	d01b      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a34      	ldr	r2, [pc, #208]	@ (8004a5c <TIM_Base_SetConfig+0x138>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d017      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a33      	ldr	r2, [pc, #204]	@ (8004a60 <TIM_Base_SetConfig+0x13c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a32      	ldr	r2, [pc, #200]	@ (8004a64 <TIM_Base_SetConfig+0x140>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00f      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a32      	ldr	r2, [pc, #200]	@ (8004a6c <TIM_Base_SetConfig+0x148>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a31      	ldr	r2, [pc, #196]	@ (8004a70 <TIM_Base_SetConfig+0x14c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a30      	ldr	r2, [pc, #192]	@ (8004a74 <TIM_Base_SetConfig+0x150>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a68 <TIM_Base_SetConfig+0x144>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d108      	bne.n	80049d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <TIM_Base_SetConfig+0x134>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <TIM_Base_SetConfig+0x100>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a19      	ldr	r2, [pc, #100]	@ (8004a64 <TIM_Base_SetConfig+0x140>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x100>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a19      	ldr	r2, [pc, #100]	@ (8004a6c <TIM_Base_SetConfig+0x148>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x100>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <TIM_Base_SetConfig+0x14c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x100>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a17      	ldr	r2, [pc, #92]	@ (8004a74 <TIM_Base_SetConfig+0x150>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x100>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a12      	ldr	r2, [pc, #72]	@ (8004a68 <TIM_Base_SetConfig+0x144>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d103      	bne.n	8004a2c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d105      	bne.n	8004a4a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f023 0201 	bic.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	611a      	str	r2, [r3, #16]
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40015000 	.word	0x40015000
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800

08004a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f023 0201 	bic.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f023 0302 	bic.w	r3, r3, #2
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a30      	ldr	r2, [pc, #192]	@ (8004b94 <TIM_OC1_SetConfig+0x11c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d013      	beq.n	8004b00 <TIM_OC1_SetConfig+0x88>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a2f      	ldr	r2, [pc, #188]	@ (8004b98 <TIM_OC1_SetConfig+0x120>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00f      	beq.n	8004b00 <TIM_OC1_SetConfig+0x88>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8004b9c <TIM_OC1_SetConfig+0x124>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <TIM_OC1_SetConfig+0x88>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba0 <TIM_OC1_SetConfig+0x128>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d007      	beq.n	8004b00 <TIM_OC1_SetConfig+0x88>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba4 <TIM_OC1_SetConfig+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC1_SetConfig+0x88>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba8 <TIM_OC1_SetConfig+0x130>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10c      	bne.n	8004b1a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0308 	bic.w	r3, r3, #8
 8004b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b94 <TIM_OC1_SetConfig+0x11c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <TIM_OC1_SetConfig+0xd2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <TIM_OC1_SetConfig+0x120>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00f      	beq.n	8004b4a <TIM_OC1_SetConfig+0xd2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <TIM_OC1_SetConfig+0x124>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <TIM_OC1_SetConfig+0xd2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba0 <TIM_OC1_SetConfig+0x128>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <TIM_OC1_SetConfig+0xd2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ba4 <TIM_OC1_SetConfig+0x12c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_OC1_SetConfig+0xd2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a18      	ldr	r2, [pc, #96]	@ (8004ba8 <TIM_OC1_SetConfig+0x130>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d111      	bne.n	8004b6e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40013400 	.word	0x40013400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800
 8004ba8:	40015000 	.word	0x40015000

08004bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f023 0210 	bic.w	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cbc <TIM_OC2_SetConfig+0x110>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <TIM_OC2_SetConfig+0x74>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc0 <TIM_OC2_SetConfig+0x114>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC2_SetConfig+0x74>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc4 <TIM_OC2_SetConfig+0x118>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10d      	bne.n	8004c3c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cbc <TIM_OC2_SetConfig+0x110>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <TIM_OC2_SetConfig+0xc0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc0 <TIM_OC2_SetConfig+0x114>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00f      	beq.n	8004c6c <TIM_OC2_SetConfig+0xc0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <TIM_OC2_SetConfig+0x11c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <TIM_OC2_SetConfig+0xc0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <TIM_OC2_SetConfig+0x120>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_OC2_SetConfig+0xc0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <TIM_OC2_SetConfig+0x124>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_OC2_SetConfig+0xc0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a17      	ldr	r2, [pc, #92]	@ (8004cc4 <TIM_OC2_SetConfig+0x118>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d113      	bne.n	8004c94 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40015000 	.word	0x40015000
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2b      	ldr	r2, [pc, #172]	@ (8004de0 <TIM_OC3_SetConfig+0x10c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d007      	beq.n	8004d46 <TIM_OC3_SetConfig+0x72>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2a      	ldr	r2, [pc, #168]	@ (8004de4 <TIM_OC3_SetConfig+0x110>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_OC3_SetConfig+0x72>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a29      	ldr	r2, [pc, #164]	@ (8004de8 <TIM_OC3_SetConfig+0x114>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d10d      	bne.n	8004d62 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <TIM_OC3_SetConfig+0x10c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <TIM_OC3_SetConfig+0xbe>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004de4 <TIM_OC3_SetConfig+0x110>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00f      	beq.n	8004d92 <TIM_OC3_SetConfig+0xbe>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	@ (8004dec <TIM_OC3_SetConfig+0x118>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00b      	beq.n	8004d92 <TIM_OC3_SetConfig+0xbe>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004df0 <TIM_OC3_SetConfig+0x11c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <TIM_OC3_SetConfig+0xbe>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1b      	ldr	r2, [pc, #108]	@ (8004df4 <TIM_OC3_SetConfig+0x120>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d003      	beq.n	8004d92 <TIM_OC3_SetConfig+0xbe>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a16      	ldr	r2, [pc, #88]	@ (8004de8 <TIM_OC3_SetConfig+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d113      	bne.n	8004dba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40013400 	.word	0x40013400
 8004de8:	40015000 	.word	0x40015000
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40014400 	.word	0x40014400
 8004df4:	40014800 	.word	0x40014800

08004df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	031b      	lsls	r3, r3, #12
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a2c      	ldr	r2, [pc, #176]	@ (8004f08 <TIM_OC4_SetConfig+0x110>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_OC4_SetConfig+0x74>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8004f0c <TIM_OC4_SetConfig+0x114>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_OC4_SetConfig+0x74>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a2a      	ldr	r2, [pc, #168]	@ (8004f10 <TIM_OC4_SetConfig+0x118>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d10d      	bne.n	8004e88 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	031b      	lsls	r3, r3, #12
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f08 <TIM_OC4_SetConfig+0x110>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <TIM_OC4_SetConfig+0xc0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a1e      	ldr	r2, [pc, #120]	@ (8004f0c <TIM_OC4_SetConfig+0x114>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00f      	beq.n	8004eb8 <TIM_OC4_SetConfig+0xc0>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <TIM_OC4_SetConfig+0x11c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_OC4_SetConfig+0xc0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f18 <TIM_OC4_SetConfig+0x120>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_OC4_SetConfig+0xc0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8004f1c <TIM_OC4_SetConfig+0x124>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_OC4_SetConfig+0xc0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a17      	ldr	r2, [pc, #92]	@ (8004f10 <TIM_OC4_SetConfig+0x118>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d113      	bne.n	8004ee0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ec6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	019b      	lsls	r3, r3, #6
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40013400 	.word	0x40013400
 8004f10:	40015000 	.word	0x40015000
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400
 8004f1c:	40014800 	.word	0x40014800

08004f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a19      	ldr	r2, [pc, #100]	@ (8004fdc <TIM_OC5_SetConfig+0xbc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_OC5_SetConfig+0x82>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <TIM_OC5_SetConfig+0xc0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_OC5_SetConfig+0x82>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a17      	ldr	r2, [pc, #92]	@ (8004fe4 <TIM_OC5_SetConfig+0xc4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_OC5_SetConfig+0x82>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a16      	ldr	r2, [pc, #88]	@ (8004fe8 <TIM_OC5_SetConfig+0xc8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_OC5_SetConfig+0x82>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a15      	ldr	r2, [pc, #84]	@ (8004fec <TIM_OC5_SetConfig+0xcc>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC5_SetConfig+0x82>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ff0 <TIM_OC5_SetConfig+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d109      	bne.n	8004fb6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800
 8004ff0:	40015000 	.word	0x40015000

08004ff4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800503a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	051b      	lsls	r3, r3, #20
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1a      	ldr	r2, [pc, #104]	@ (80050b4 <TIM_OC6_SetConfig+0xc0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <TIM_OC6_SetConfig+0x84>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <TIM_OC6_SetConfig+0xc4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00f      	beq.n	8005078 <TIM_OC6_SetConfig+0x84>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <TIM_OC6_SetConfig+0xc8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00b      	beq.n	8005078 <TIM_OC6_SetConfig+0x84>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <TIM_OC6_SetConfig+0xcc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <TIM_OC6_SetConfig+0x84>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a16      	ldr	r2, [pc, #88]	@ (80050c4 <TIM_OC6_SetConfig+0xd0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_OC6_SetConfig+0x84>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a15      	ldr	r2, [pc, #84]	@ (80050c8 <TIM_OC6_SetConfig+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d109      	bne.n	800508c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800507e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	029b      	lsls	r3, r3, #10
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	40015000 	.word	0x40015000

080050cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2201      	movs	r2, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1a      	ldr	r2, [r3, #32]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	401a      	ands	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	431a      	orrs	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <HAL_TIMEx_PWMN_Start+0x24>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	bf14      	ite	ne
 8005134:	2301      	movne	r3, #1
 8005136:	2300      	moveq	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	e022      	b.n	8005182 <HAL_TIMEx_PWMN_Start+0x6a>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b04      	cmp	r3, #4
 8005140:	d109      	bne.n	8005156 <HAL_TIMEx_PWMN_Start+0x3e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	e015      	b.n	8005182 <HAL_TIMEx_PWMN_Start+0x6a>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d109      	bne.n	8005170 <HAL_TIMEx_PWMN_Start+0x58>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	e008      	b.n	8005182 <HAL_TIMEx_PWMN_Start+0x6a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e06e      	b.n	8005268 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <HAL_TIMEx_PWMN_Start+0x82>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005198:	e013      	b.n	80051c2 <HAL_TIMEx_PWMN_Start+0xaa>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d104      	bne.n	80051aa <HAL_TIMEx_PWMN_Start+0x92>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051a8:	e00b      	b.n	80051c2 <HAL_TIMEx_PWMN_Start+0xaa>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d104      	bne.n	80051ba <HAL_TIMEx_PWMN_Start+0xa2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051b8:	e003      	b.n	80051c2 <HAL_TIMEx_PWMN_Start+0xaa>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2204      	movs	r2, #4
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 f980 	bl	80054d0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a22      	ldr	r2, [pc, #136]	@ (8005270 <HAL_TIMEx_PWMN_Start+0x158>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01d      	beq.n	8005226 <HAL_TIMEx_PWMN_Start+0x10e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f2:	d018      	beq.n	8005226 <HAL_TIMEx_PWMN_Start+0x10e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005274 <HAL_TIMEx_PWMN_Start+0x15c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_TIMEx_PWMN_Start+0x10e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_TIMEx_PWMN_Start+0x160>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_TIMEx_PWMN_Start+0x10e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <HAL_TIMEx_PWMN_Start+0x164>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_TIMEx_PWMN_Start+0x10e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <HAL_TIMEx_PWMN_Start+0x168>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_TIMEx_PWMN_Start+0x10e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a18      	ldr	r2, [pc, #96]	@ (8005284 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d115      	bne.n	8005252 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	4b16      	ldr	r3, [pc, #88]	@ (8005288 <HAL_TIMEx_PWMN_Start+0x170>)
 800522e:	4013      	ands	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b06      	cmp	r3, #6
 8005236:	d015      	beq.n	8005264 <HAL_TIMEx_PWMN_Start+0x14c>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523e:	d011      	beq.n	8005264 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005250:	e008      	b.n	8005264 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0201 	orr.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e000      	b.n	8005266 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40000400 	.word	0x40000400
 8005278:	40000800 	.word	0x40000800
 800527c:	40013400 	.word	0x40013400
 8005280:	40014000 	.word	0x40014000
 8005284:	40015000 	.word	0x40015000
 8005288:	00010007 	.word	0x00010007

0800528c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e06f      	b.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a31      	ldr	r2, [pc, #196]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d009      	beq.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a30      	ldr	r2, [pc, #192]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d108      	bne.n	80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1e      	ldr	r2, [pc, #120]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d01d      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d018      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1c      	ldr	r2, [pc, #112]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1a      	ldr	r2, [pc, #104]	@ (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a16      	ldr	r2, [pc, #88]	@ (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a11      	ldr	r2, [pc, #68]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d10c      	bne.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800535e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40013400 	.word	0x40013400
 8005398:	40015000 	.word	0x40015000
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40014000 	.word	0x40014000

080053a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e078      	b.n	80054b6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1c      	ldr	r2, [pc, #112]	@ (80054c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1b      	ldr	r2, [pc, #108]	@ (80054c8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a19      	ldr	r2, [pc, #100]	@ (80054cc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d11c      	bne.n	80054a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	051b      	lsls	r3, r3, #20
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40013400 	.word	0x40013400
 80054cc:	40015000 	.word	0x40015000

080054d0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	2204      	movs	r2, #4
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1a      	ldr	r2, [r3, #32]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	43db      	mvns	r3, r3
 80054f2:	401a      	ands	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1a      	ldr	r2, [r3, #32]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e042      	b.n	80055b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fb ff00 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	@ 0x24
 8005548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fbb3 	bl	8005cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8b4 	bl	80056d8 <UART_SetConfig>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e01b      	b.n	80055b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005588:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005598:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0201 	orr.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fc32 	bl	8005e14 <UART_CheckIdleState>
 80055b0:	4603      	mov	r3, r0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b08a      	sub	sp, #40	@ 0x28
 80055be:	af02      	add	r7, sp, #8
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d17b      	bne.n	80056cc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_UART_Transmit+0x26>
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e074      	b.n	80056ce <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2221      	movs	r2, #33	@ 0x21
 80055f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055f4:	f7fc f8a4 	bl	8001740 <HAL_GetTick>
 80055f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	88fa      	ldrh	r2, [r7, #6]
 8005606:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005612:	d108      	bne.n	8005626 <HAL_UART_Transmit+0x6c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	e003      	b.n	800562e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800562e:	e030      	b.n	8005692 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	2180      	movs	r1, #128	@ 0x80
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fc94 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e03d      	b.n	80056ce <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005666:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	3302      	adds	r3, #2
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	e007      	b.n	8005680 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	3301      	adds	r3, #1
 800567e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1c8      	bne.n	8005630 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2140      	movs	r1, #64	@ 0x40
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fc5d 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e006      	b.n	80056ce <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b08c      	sub	sp, #48	@ 0x30
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4baa      	ldr	r3, [pc, #680]	@ (80059b0 <UART_SetConfig+0x2d8>)
 8005708:	4013      	ands	r3, r2
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005710:	430b      	orrs	r3, r1
 8005712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a9f      	ldr	r2, [pc, #636]	@ (80059b4 <UART_SetConfig+0x2dc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005740:	4313      	orrs	r3, r2
 8005742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800574e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005758:	430b      	orrs	r3, r1
 800575a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	f023 010f 	bic.w	r1, r3, #15
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a90      	ldr	r2, [pc, #576]	@ (80059b8 <UART_SetConfig+0x2e0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d125      	bne.n	80057c8 <UART_SetConfig+0xf0>
 800577c:	4b8f      	ldr	r3, [pc, #572]	@ (80059bc <UART_SetConfig+0x2e4>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b03      	cmp	r3, #3
 8005788:	d81a      	bhi.n	80057c0 <UART_SetConfig+0xe8>
 800578a:	a201      	add	r2, pc, #4	@ (adr r2, 8005790 <UART_SetConfig+0xb8>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057a1 	.word	0x080057a1
 8005794:	080057b1 	.word	0x080057b1
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a6:	e116      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057a8:	2302      	movs	r3, #2
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ae:	e112      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b6:	e10e      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057be:	e10a      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c6:	e106      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a7c      	ldr	r2, [pc, #496]	@ (80059c0 <UART_SetConfig+0x2e8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d138      	bne.n	8005844 <UART_SetConfig+0x16c>
 80057d2:	4b7a      	ldr	r3, [pc, #488]	@ (80059bc <UART_SetConfig+0x2e4>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d82d      	bhi.n	800583c <UART_SetConfig+0x164>
 80057e0:	a201      	add	r2, pc, #4	@ (adr r2, 80057e8 <UART_SetConfig+0x110>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	0800582d 	.word	0x0800582d
 80057fc:	0800583d 	.word	0x0800583d
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	08005825 	.word	0x08005825
 800580c:	0800583d 	.word	0x0800583d
 8005810:	0800583d 	.word	0x0800583d
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005835 	.word	0x08005835
 800581c:	2300      	movs	r3, #0
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005822:	e0d8      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005824:	2302      	movs	r3, #2
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800582a:	e0d4      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800582c:	2304      	movs	r3, #4
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005832:	e0d0      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005834:	2308      	movs	r3, #8
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583a:	e0cc      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800583c:	2310      	movs	r3, #16
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005842:	e0c8      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a5e      	ldr	r2, [pc, #376]	@ (80059c4 <UART_SetConfig+0x2ec>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d125      	bne.n	800589a <UART_SetConfig+0x1c2>
 800584e:	4b5b      	ldr	r3, [pc, #364]	@ (80059bc <UART_SetConfig+0x2e4>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005854:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005858:	2b30      	cmp	r3, #48	@ 0x30
 800585a:	d016      	beq.n	800588a <UART_SetConfig+0x1b2>
 800585c:	2b30      	cmp	r3, #48	@ 0x30
 800585e:	d818      	bhi.n	8005892 <UART_SetConfig+0x1ba>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d00a      	beq.n	800587a <UART_SetConfig+0x1a2>
 8005864:	2b20      	cmp	r3, #32
 8005866:	d814      	bhi.n	8005892 <UART_SetConfig+0x1ba>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <UART_SetConfig+0x19a>
 800586c:	2b10      	cmp	r3, #16
 800586e:	d008      	beq.n	8005882 <UART_SetConfig+0x1aa>
 8005870:	e00f      	b.n	8005892 <UART_SetConfig+0x1ba>
 8005872:	2300      	movs	r3, #0
 8005874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005878:	e0ad      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800587a:	2302      	movs	r3, #2
 800587c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005880:	e0a9      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005882:	2304      	movs	r3, #4
 8005884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005888:	e0a5      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800588a:	2308      	movs	r3, #8
 800588c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005890:	e0a1      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005892:	2310      	movs	r3, #16
 8005894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005898:	e09d      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a4a      	ldr	r2, [pc, #296]	@ (80059c8 <UART_SetConfig+0x2f0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d125      	bne.n	80058f0 <UART_SetConfig+0x218>
 80058a4:	4b45      	ldr	r3, [pc, #276]	@ (80059bc <UART_SetConfig+0x2e4>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80058b0:	d016      	beq.n	80058e0 <UART_SetConfig+0x208>
 80058b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80058b4:	d818      	bhi.n	80058e8 <UART_SetConfig+0x210>
 80058b6:	2b80      	cmp	r3, #128	@ 0x80
 80058b8:	d00a      	beq.n	80058d0 <UART_SetConfig+0x1f8>
 80058ba:	2b80      	cmp	r3, #128	@ 0x80
 80058bc:	d814      	bhi.n	80058e8 <UART_SetConfig+0x210>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <UART_SetConfig+0x1f0>
 80058c2:	2b40      	cmp	r3, #64	@ 0x40
 80058c4:	d008      	beq.n	80058d8 <UART_SetConfig+0x200>
 80058c6:	e00f      	b.n	80058e8 <UART_SetConfig+0x210>
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ce:	e082      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058d0:	2302      	movs	r3, #2
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058d6:	e07e      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058d8:	2304      	movs	r3, #4
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058de:	e07a      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058e0:	2308      	movs	r3, #8
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e6:	e076      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058e8:	2310      	movs	r3, #16
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ee:	e072      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a35      	ldr	r2, [pc, #212]	@ (80059cc <UART_SetConfig+0x2f4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d12a      	bne.n	8005950 <UART_SetConfig+0x278>
 80058fa:	4b30      	ldr	r3, [pc, #192]	@ (80059bc <UART_SetConfig+0x2e4>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005908:	d01a      	beq.n	8005940 <UART_SetConfig+0x268>
 800590a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800590e:	d81b      	bhi.n	8005948 <UART_SetConfig+0x270>
 8005910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005914:	d00c      	beq.n	8005930 <UART_SetConfig+0x258>
 8005916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800591a:	d815      	bhi.n	8005948 <UART_SetConfig+0x270>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <UART_SetConfig+0x250>
 8005920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005924:	d008      	beq.n	8005938 <UART_SetConfig+0x260>
 8005926:	e00f      	b.n	8005948 <UART_SetConfig+0x270>
 8005928:	2300      	movs	r3, #0
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592e:	e052      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005930:	2302      	movs	r3, #2
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005936:	e04e      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800593e:	e04a      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005946:	e046      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594e:	e042      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a17      	ldr	r2, [pc, #92]	@ (80059b4 <UART_SetConfig+0x2dc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d13a      	bne.n	80059d0 <UART_SetConfig+0x2f8>
 800595a:	4b18      	ldr	r3, [pc, #96]	@ (80059bc <UART_SetConfig+0x2e4>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005960:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005968:	d01a      	beq.n	80059a0 <UART_SetConfig+0x2c8>
 800596a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800596e:	d81b      	bhi.n	80059a8 <UART_SetConfig+0x2d0>
 8005970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005974:	d00c      	beq.n	8005990 <UART_SetConfig+0x2b8>
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800597a:	d815      	bhi.n	80059a8 <UART_SetConfig+0x2d0>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <UART_SetConfig+0x2b0>
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005984:	d008      	beq.n	8005998 <UART_SetConfig+0x2c0>
 8005986:	e00f      	b.n	80059a8 <UART_SetConfig+0x2d0>
 8005988:	2300      	movs	r3, #0
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598e:	e022      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005990:	2302      	movs	r3, #2
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005996:	e01e      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005998:	2304      	movs	r3, #4
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599e:	e01a      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80059a0:	2308      	movs	r3, #8
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a6:	e016      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ae:	e012      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80059b0:	cfff69f3 	.word	0xcfff69f3
 80059b4:	40008000 	.word	0x40008000
 80059b8:	40013800 	.word	0x40013800
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40004400 	.word	0x40004400
 80059c4:	40004800 	.word	0x40004800
 80059c8:	40004c00 	.word	0x40004c00
 80059cc:	40005000 	.word	0x40005000
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4aae      	ldr	r2, [pc, #696]	@ (8005c94 <UART_SetConfig+0x5bc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	f040 8097 	bne.w	8005b10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d823      	bhi.n	8005a32 <UART_SetConfig+0x35a>
 80059ea:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <UART_SetConfig+0x318>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a23 	.word	0x08005a23
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a33 	.word	0x08005a33
 8005a0c:	08005a33 	.word	0x08005a33
 8005a10:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7fe fa60 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8005a18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a1a:	e010      	b.n	8005a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b9e      	ldr	r3, [pc, #632]	@ (8005c98 <UART_SetConfig+0x5c0>)
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a20:	e00d      	b.n	8005a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fe f9eb 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8005a26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a28:	e009      	b.n	8005a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a30:	e005      	b.n	8005a3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8130 	beq.w	8005ca6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	4a94      	ldr	r2, [pc, #592]	@ (8005c9c <UART_SetConfig+0x5c4>)
 8005a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d305      	bcc.n	8005a76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d903      	bls.n	8005a7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a7c:	e113      	b.n	8005ca6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	2200      	movs	r2, #0
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	60fa      	str	r2, [r7, #12]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	4a84      	ldr	r2, [pc, #528]	@ (8005c9c <UART_SetConfig+0x5c4>)
 8005a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2200      	movs	r2, #0
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005aa0:	f7fa fc0e 	bl	80002c0 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	020b      	lsls	r3, r1, #8
 8005ab6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005aba:	0202      	lsls	r2, r0, #8
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	6849      	ldr	r1, [r1, #4]
 8005ac0:	0849      	lsrs	r1, r1, #1
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	eb12 0804 	adds.w	r8, r2, r4
 8005acc:	eb43 0905 	adc.w	r9, r3, r5
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	469a      	mov	sl, r3
 8005ad8:	4693      	mov	fp, r2
 8005ada:	4652      	mov	r2, sl
 8005adc:	465b      	mov	r3, fp
 8005ade:	4640      	mov	r0, r8
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	f7fa fbed 	bl	80002c0 <__aeabi_uldivmod>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4613      	mov	r3, r2
 8005aec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005af4:	d308      	bcc.n	8005b08 <UART_SetConfig+0x430>
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afc:	d204      	bcs.n	8005b08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	e0ce      	b.n	8005ca6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b0e:	e0ca      	b.n	8005ca6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b18:	d166      	bne.n	8005be8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d827      	bhi.n	8005b72 <UART_SetConfig+0x49a>
 8005b22:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <UART_SetConfig+0x450>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b4d 	.word	0x08005b4d
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b5d 	.word	0x08005b5d
 8005b34:	08005b73 	.word	0x08005b73
 8005b38:	08005b63 	.word	0x08005b63
 8005b3c:	08005b73 	.word	0x08005b73
 8005b40:	08005b73 	.word	0x08005b73
 8005b44:	08005b73 	.word	0x08005b73
 8005b48:	08005b6b 	.word	0x08005b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7fe f9c4 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8005b50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b52:	e014      	b.n	8005b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7fe f9d6 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8005b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b5a:	e010      	b.n	8005b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8005c98 <UART_SetConfig+0x5c0>)
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b60:	e00d      	b.n	8005b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b62:	f7fe f94b 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8005b66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b68:	e009      	b.n	8005b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b70:	e005      	b.n	8005b7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8090 	beq.w	8005ca6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8a:	4a44      	ldr	r2, [pc, #272]	@ (8005c9c <UART_SetConfig+0x5c4>)
 8005b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b90:	461a      	mov	r2, r3
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b98:	005a      	lsls	r2, r3, #1
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	441a      	add	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2b0f      	cmp	r3, #15
 8005bb0:	d916      	bls.n	8005be0 <UART_SetConfig+0x508>
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb8:	d212      	bcs.n	8005be0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f023 030f 	bic.w	r3, r3, #15
 8005bc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	8bfb      	ldrh	r3, [r7, #30]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	8bfa      	ldrh	r2, [r7, #30]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	e062      	b.n	8005ca6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005be6:	e05e      	b.n	8005ca6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005be8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d828      	bhi.n	8005c42 <UART_SetConfig+0x56a>
 8005bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <UART_SetConfig+0x520>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	08005c43 	.word	0x08005c43
 8005c08:	08005c33 	.word	0x08005c33
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c43 	.word	0x08005c43
 8005c14:	08005c43 	.word	0x08005c43
 8005c18:	08005c3b 	.word	0x08005c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f7fe f95c 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8005c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c22:	e014      	b.n	8005c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c24:	f7fe f96e 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8005c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c2a:	e010      	b.n	8005c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c98 <UART_SetConfig+0x5c0>)
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c30:	e00d      	b.n	8005c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c32:	f7fe f8e3 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8005c36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c38:	e009      	b.n	8005c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c40:	e005      	b.n	8005c4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d028      	beq.n	8005ca6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	4a10      	ldr	r2, [pc, #64]	@ (8005c9c <UART_SetConfig+0x5c4>)
 8005c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	441a      	add	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d910      	bls.n	8005ca0 <UART_SetConfig+0x5c8>
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c84:	d20c      	bcs.n	8005ca0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	e009      	b.n	8005ca6 <UART_SetConfig+0x5ce>
 8005c92:	bf00      	nop
 8005c94:	40008000 	.word	0x40008000
 8005c98:	00f42400 	.word	0x00f42400
 8005c9c:	0800723c 	.word	0x0800723c
      }
      else
      {
        ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3730      	adds	r7, #48	@ 0x30
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dce:	d10a      	bne.n	8005de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b098      	sub	sp, #96	@ 0x60
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e24:	f7fb fc8c 	bl	8001740 <HAL_GetTick>
 8005e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d12f      	bne.n	8005e98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e40:	2200      	movs	r2, #0
 8005e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f88e 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d022      	beq.n	8005e98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e6      	bne.n	8005e52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e063      	b.n	8005f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d149      	bne.n	8005f3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f857 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d03c      	beq.n	8005f3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e6      	bne.n	8005ec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f12:	61fa      	str	r2, [r7, #28]
 8005f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	69b9      	ldr	r1, [r7, #24]
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e5      	bne.n	8005ef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e012      	b.n	8005f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3758      	adds	r7, #88	@ 0x58
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f78:	e04f      	b.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f80:	d04b      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f82:	f7fb fbdd 	bl	8001740 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d302      	bcc.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e04e      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d037      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b80      	cmp	r3, #128	@ 0x80
 8005fae:	d034      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b40      	cmp	r3, #64	@ 0x40
 8005fb4:	d031      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d110      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f838 	bl	8006042 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e029      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ff4:	d111      	bne.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f81e 	bl	8006042 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e00f      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4013      	ands	r3, r2
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	429a      	cmp	r2, r3
 8006028:	bf0c      	ite	eq
 800602a:	2301      	moveq	r3, #1
 800602c:	2300      	movne	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	429a      	cmp	r2, r3
 8006036:	d0a0      	beq.n	8005f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006042:	b480      	push	{r7}
 8006044:	b095      	sub	sp, #84	@ 0x54
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800605e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006068:	643b      	str	r3, [r7, #64]	@ 0x40
 800606a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800606e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e6      	bne.n	800604a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	61fb      	str	r3, [r7, #28]
   return(result);
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e3      	bne.n	800607c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d118      	bne.n	80060ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f023 0310 	bic.w	r3, r3, #16
 80060d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6979      	ldr	r1, [r7, #20]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	613b      	str	r3, [r7, #16]
   return(result);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e6      	bne.n	80060bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006102:	bf00      	nop
 8006104:	3754      	adds	r7, #84	@ 0x54
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_UARTEx_DisableFifoMode+0x16>
 8006120:	2302      	movs	r3, #2
 8006122:	e027      	b.n	8006174 <HAL_UARTEx_DisableFifoMode+0x66>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2224      	movs	r2, #36	@ 0x24
 8006130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0201 	bic.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006152:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006194:	2302      	movs	r3, #2
 8006196:	e02d      	b.n	80061f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2224      	movs	r2, #36	@ 0x24
 80061a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f84f 	bl	8006278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006210:	2302      	movs	r3, #2
 8006212:	e02d      	b.n	8006270 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2224      	movs	r2, #36	@ 0x24
 8006220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f811 	bl	8006278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006284:	2b00      	cmp	r3, #0
 8006286:	d108      	bne.n	800629a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006298:	e031      	b.n	80062fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800629a:	2308      	movs	r3, #8
 800629c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800629e:	2308      	movs	r3, #8
 80062a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	0e5b      	lsrs	r3, r3, #25
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	0f5b      	lsrs	r3, r3, #29
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	7b3a      	ldrb	r2, [r7, #12]
 80062c6:	4911      	ldr	r1, [pc, #68]	@ (800630c <UARTEx_SetNbDataToProcess+0x94>)
 80062c8:	5c8a      	ldrb	r2, [r1, r2]
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062ce:	7b3a      	ldrb	r2, [r7, #12]
 80062d0:	490f      	ldr	r1, [pc, #60]	@ (8006310 <UARTEx_SetNbDataToProcess+0x98>)
 80062d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	7b7a      	ldrb	r2, [r7, #13]
 80062e4:	4909      	ldr	r1, [pc, #36]	@ (800630c <UARTEx_SetNbDataToProcess+0x94>)
 80062e6:	5c8a      	ldrb	r2, [r1, r2]
 80062e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062ec:	7b7a      	ldrb	r2, [r7, #13]
 80062ee:	4908      	ldr	r1, [pc, #32]	@ (8006310 <UARTEx_SetNbDataToProcess+0x98>)
 80062f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	08007254 	.word	0x08007254
 8006310:	0800725c 	.word	0x0800725c

08006314 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800631c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006320:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	b29b      	uxth	r3, r3
 800632e:	43db      	mvns	r3, r3
 8006330:	b29b      	uxth	r3, r3
 8006332:	4013      	ands	r3, r2
 8006334:	b29a      	uxth	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <std>:
 8006388:	2300      	movs	r3, #0
 800638a:	b510      	push	{r4, lr}
 800638c:	4604      	mov	r4, r0
 800638e:	e9c0 3300 	strd	r3, r3, [r0]
 8006392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006396:	6083      	str	r3, [r0, #8]
 8006398:	8181      	strh	r1, [r0, #12]
 800639a:	6643      	str	r3, [r0, #100]	@ 0x64
 800639c:	81c2      	strh	r2, [r0, #14]
 800639e:	6183      	str	r3, [r0, #24]
 80063a0:	4619      	mov	r1, r3
 80063a2:	2208      	movs	r2, #8
 80063a4:	305c      	adds	r0, #92	@ 0x5c
 80063a6:	f000 f906 	bl	80065b6 <memset>
 80063aa:	4b0d      	ldr	r3, [pc, #52]	@ (80063e0 <std+0x58>)
 80063ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80063ae:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <std+0x5c>)
 80063b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063b2:	4b0d      	ldr	r3, [pc, #52]	@ (80063e8 <std+0x60>)
 80063b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063b6:	4b0d      	ldr	r3, [pc, #52]	@ (80063ec <std+0x64>)
 80063b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80063ba:	4b0d      	ldr	r3, [pc, #52]	@ (80063f0 <std+0x68>)
 80063bc:	6224      	str	r4, [r4, #32]
 80063be:	429c      	cmp	r4, r3
 80063c0:	d006      	beq.n	80063d0 <std+0x48>
 80063c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063c6:	4294      	cmp	r4, r2
 80063c8:	d002      	beq.n	80063d0 <std+0x48>
 80063ca:	33d0      	adds	r3, #208	@ 0xd0
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d105      	bne.n	80063dc <std+0x54>
 80063d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d8:	f000 b966 	b.w	80066a8 <__retarget_lock_init_recursive>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	bf00      	nop
 80063e0:	08006531 	.word	0x08006531
 80063e4:	08006553 	.word	0x08006553
 80063e8:	0800658b 	.word	0x0800658b
 80063ec:	080065af 	.word	0x080065af
 80063f0:	200007cc 	.word	0x200007cc

080063f4 <stdio_exit_handler>:
 80063f4:	4a02      	ldr	r2, [pc, #8]	@ (8006400 <stdio_exit_handler+0xc>)
 80063f6:	4903      	ldr	r1, [pc, #12]	@ (8006404 <stdio_exit_handler+0x10>)
 80063f8:	4803      	ldr	r0, [pc, #12]	@ (8006408 <stdio_exit_handler+0x14>)
 80063fa:	f000 b869 	b.w	80064d0 <_fwalk_sglue>
 80063fe:	bf00      	nop
 8006400:	200000c0 	.word	0x200000c0
 8006404:	08006f45 	.word	0x08006f45
 8006408:	200000d0 	.word	0x200000d0

0800640c <cleanup_stdio>:
 800640c:	6841      	ldr	r1, [r0, #4]
 800640e:	4b0c      	ldr	r3, [pc, #48]	@ (8006440 <cleanup_stdio+0x34>)
 8006410:	4299      	cmp	r1, r3
 8006412:	b510      	push	{r4, lr}
 8006414:	4604      	mov	r4, r0
 8006416:	d001      	beq.n	800641c <cleanup_stdio+0x10>
 8006418:	f000 fd94 	bl	8006f44 <_fflush_r>
 800641c:	68a1      	ldr	r1, [r4, #8]
 800641e:	4b09      	ldr	r3, [pc, #36]	@ (8006444 <cleanup_stdio+0x38>)
 8006420:	4299      	cmp	r1, r3
 8006422:	d002      	beq.n	800642a <cleanup_stdio+0x1e>
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fd8d 	bl	8006f44 <_fflush_r>
 800642a:	68e1      	ldr	r1, [r4, #12]
 800642c:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <cleanup_stdio+0x3c>)
 800642e:	4299      	cmp	r1, r3
 8006430:	d004      	beq.n	800643c <cleanup_stdio+0x30>
 8006432:	4620      	mov	r0, r4
 8006434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006438:	f000 bd84 	b.w	8006f44 <_fflush_r>
 800643c:	bd10      	pop	{r4, pc}
 800643e:	bf00      	nop
 8006440:	200007cc 	.word	0x200007cc
 8006444:	20000834 	.word	0x20000834
 8006448:	2000089c 	.word	0x2000089c

0800644c <global_stdio_init.part.0>:
 800644c:	b510      	push	{r4, lr}
 800644e:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <global_stdio_init.part.0+0x30>)
 8006450:	4c0b      	ldr	r4, [pc, #44]	@ (8006480 <global_stdio_init.part.0+0x34>)
 8006452:	4a0c      	ldr	r2, [pc, #48]	@ (8006484 <global_stdio_init.part.0+0x38>)
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	4620      	mov	r0, r4
 8006458:	2200      	movs	r2, #0
 800645a:	2104      	movs	r1, #4
 800645c:	f7ff ff94 	bl	8006388 <std>
 8006460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006464:	2201      	movs	r2, #1
 8006466:	2109      	movs	r1, #9
 8006468:	f7ff ff8e 	bl	8006388 <std>
 800646c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006470:	2202      	movs	r2, #2
 8006472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006476:	2112      	movs	r1, #18
 8006478:	f7ff bf86 	b.w	8006388 <std>
 800647c:	20000904 	.word	0x20000904
 8006480:	200007cc 	.word	0x200007cc
 8006484:	080063f5 	.word	0x080063f5

08006488 <__sfp_lock_acquire>:
 8006488:	4801      	ldr	r0, [pc, #4]	@ (8006490 <__sfp_lock_acquire+0x8>)
 800648a:	f000 b90e 	b.w	80066aa <__retarget_lock_acquire_recursive>
 800648e:	bf00      	nop
 8006490:	2000090d 	.word	0x2000090d

08006494 <__sfp_lock_release>:
 8006494:	4801      	ldr	r0, [pc, #4]	@ (800649c <__sfp_lock_release+0x8>)
 8006496:	f000 b909 	b.w	80066ac <__retarget_lock_release_recursive>
 800649a:	bf00      	nop
 800649c:	2000090d 	.word	0x2000090d

080064a0 <__sinit>:
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	f7ff fff0 	bl	8006488 <__sfp_lock_acquire>
 80064a8:	6a23      	ldr	r3, [r4, #32]
 80064aa:	b11b      	cbz	r3, 80064b4 <__sinit+0x14>
 80064ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b0:	f7ff bff0 	b.w	8006494 <__sfp_lock_release>
 80064b4:	4b04      	ldr	r3, [pc, #16]	@ (80064c8 <__sinit+0x28>)
 80064b6:	6223      	str	r3, [r4, #32]
 80064b8:	4b04      	ldr	r3, [pc, #16]	@ (80064cc <__sinit+0x2c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1f5      	bne.n	80064ac <__sinit+0xc>
 80064c0:	f7ff ffc4 	bl	800644c <global_stdio_init.part.0>
 80064c4:	e7f2      	b.n	80064ac <__sinit+0xc>
 80064c6:	bf00      	nop
 80064c8:	0800640d 	.word	0x0800640d
 80064cc:	20000904 	.word	0x20000904

080064d0 <_fwalk_sglue>:
 80064d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	4607      	mov	r7, r0
 80064d6:	4688      	mov	r8, r1
 80064d8:	4614      	mov	r4, r2
 80064da:	2600      	movs	r6, #0
 80064dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064e0:	f1b9 0901 	subs.w	r9, r9, #1
 80064e4:	d505      	bpl.n	80064f2 <_fwalk_sglue+0x22>
 80064e6:	6824      	ldr	r4, [r4, #0]
 80064e8:	2c00      	cmp	r4, #0
 80064ea:	d1f7      	bne.n	80064dc <_fwalk_sglue+0xc>
 80064ec:	4630      	mov	r0, r6
 80064ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f2:	89ab      	ldrh	r3, [r5, #12]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d907      	bls.n	8006508 <_fwalk_sglue+0x38>
 80064f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064fc:	3301      	adds	r3, #1
 80064fe:	d003      	beq.n	8006508 <_fwalk_sglue+0x38>
 8006500:	4629      	mov	r1, r5
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	4306      	orrs	r6, r0
 8006508:	3568      	adds	r5, #104	@ 0x68
 800650a:	e7e9      	b.n	80064e0 <_fwalk_sglue+0x10>

0800650c <iprintf>:
 800650c:	b40f      	push	{r0, r1, r2, r3}
 800650e:	b507      	push	{r0, r1, r2, lr}
 8006510:	4906      	ldr	r1, [pc, #24]	@ (800652c <iprintf+0x20>)
 8006512:	ab04      	add	r3, sp, #16
 8006514:	6808      	ldr	r0, [r1, #0]
 8006516:	f853 2b04 	ldr.w	r2, [r3], #4
 800651a:	6881      	ldr	r1, [r0, #8]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	f000 f9e9 	bl	80068f4 <_vfiprintf_r>
 8006522:	b003      	add	sp, #12
 8006524:	f85d eb04 	ldr.w	lr, [sp], #4
 8006528:	b004      	add	sp, #16
 800652a:	4770      	bx	lr
 800652c:	200000cc 	.word	0x200000cc

08006530 <__sread>:
 8006530:	b510      	push	{r4, lr}
 8006532:	460c      	mov	r4, r1
 8006534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006538:	f000 f868 	bl	800660c <_read_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	bfab      	itete	ge
 8006540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006542:	89a3      	ldrhlt	r3, [r4, #12]
 8006544:	181b      	addge	r3, r3, r0
 8006546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800654a:	bfac      	ite	ge
 800654c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800654e:	81a3      	strhlt	r3, [r4, #12]
 8006550:	bd10      	pop	{r4, pc}

08006552 <__swrite>:
 8006552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006556:	461f      	mov	r7, r3
 8006558:	898b      	ldrh	r3, [r1, #12]
 800655a:	05db      	lsls	r3, r3, #23
 800655c:	4605      	mov	r5, r0
 800655e:	460c      	mov	r4, r1
 8006560:	4616      	mov	r6, r2
 8006562:	d505      	bpl.n	8006570 <__swrite+0x1e>
 8006564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006568:	2302      	movs	r3, #2
 800656a:	2200      	movs	r2, #0
 800656c:	f000 f83c 	bl	80065e8 <_lseek_r>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	4632      	mov	r2, r6
 800657e:	463b      	mov	r3, r7
 8006580:	4628      	mov	r0, r5
 8006582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006586:	f000 b853 	b.w	8006630 <_write_r>

0800658a <__sseek>:
 800658a:	b510      	push	{r4, lr}
 800658c:	460c      	mov	r4, r1
 800658e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006592:	f000 f829 	bl	80065e8 <_lseek_r>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	bf15      	itete	ne
 800659c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800659e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80065a6:	81a3      	strheq	r3, [r4, #12]
 80065a8:	bf18      	it	ne
 80065aa:	81a3      	strhne	r3, [r4, #12]
 80065ac:	bd10      	pop	{r4, pc}

080065ae <__sclose>:
 80065ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b2:	f000 b809 	b.w	80065c8 <_close_r>

080065b6 <memset>:
 80065b6:	4402      	add	r2, r0
 80065b8:	4603      	mov	r3, r0
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d100      	bne.n	80065c0 <memset+0xa>
 80065be:	4770      	bx	lr
 80065c0:	f803 1b01 	strb.w	r1, [r3], #1
 80065c4:	e7f9      	b.n	80065ba <memset+0x4>
	...

080065c8 <_close_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d06      	ldr	r5, [pc, #24]	@ (80065e4 <_close_r+0x1c>)
 80065cc:	2300      	movs	r3, #0
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	f7fa ffaa 	bl	800152c <_close>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_close_r+0x1a>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_close_r+0x1a>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000908 	.word	0x20000908

080065e8 <_lseek_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	@ (8006608 <_lseek_r+0x20>)
 80065ec:	4604      	mov	r4, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fa ffbf 	bl	800157a <_lseek>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_lseek_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_lseek_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20000908 	.word	0x20000908

0800660c <_read_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	@ (800662c <_read_r+0x20>)
 8006610:	4604      	mov	r4, r0
 8006612:	4608      	mov	r0, r1
 8006614:	4611      	mov	r1, r2
 8006616:	2200      	movs	r2, #0
 8006618:	602a      	str	r2, [r5, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	f7fa ff4d 	bl	80014ba <_read>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_read_r+0x1e>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_read_r+0x1e>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	20000908 	.word	0x20000908

08006630 <_write_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d07      	ldr	r5, [pc, #28]	@ (8006650 <_write_r+0x20>)
 8006634:	4604      	mov	r4, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fa ff58 	bl	80014f4 <_write>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_write_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_write_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20000908 	.word	0x20000908

08006654 <__errno>:
 8006654:	4b01      	ldr	r3, [pc, #4]	@ (800665c <__errno+0x8>)
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	200000cc 	.word	0x200000cc

08006660 <__libc_init_array>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	4d0d      	ldr	r5, [pc, #52]	@ (8006698 <__libc_init_array+0x38>)
 8006664:	4c0d      	ldr	r4, [pc, #52]	@ (800669c <__libc_init_array+0x3c>)
 8006666:	1b64      	subs	r4, r4, r5
 8006668:	10a4      	asrs	r4, r4, #2
 800666a:	2600      	movs	r6, #0
 800666c:	42a6      	cmp	r6, r4
 800666e:	d109      	bne.n	8006684 <__libc_init_array+0x24>
 8006670:	4d0b      	ldr	r5, [pc, #44]	@ (80066a0 <__libc_init_array+0x40>)
 8006672:	4c0c      	ldr	r4, [pc, #48]	@ (80066a4 <__libc_init_array+0x44>)
 8006674:	f000 fdb6 	bl	80071e4 <_init>
 8006678:	1b64      	subs	r4, r4, r5
 800667a:	10a4      	asrs	r4, r4, #2
 800667c:	2600      	movs	r6, #0
 800667e:	42a6      	cmp	r6, r4
 8006680:	d105      	bne.n	800668e <__libc_init_array+0x2e>
 8006682:	bd70      	pop	{r4, r5, r6, pc}
 8006684:	f855 3b04 	ldr.w	r3, [r5], #4
 8006688:	4798      	blx	r3
 800668a:	3601      	adds	r6, #1
 800668c:	e7ee      	b.n	800666c <__libc_init_array+0xc>
 800668e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006692:	4798      	blx	r3
 8006694:	3601      	adds	r6, #1
 8006696:	e7f2      	b.n	800667e <__libc_init_array+0x1e>
 8006698:	080072a0 	.word	0x080072a0
 800669c:	080072a0 	.word	0x080072a0
 80066a0:	080072a0 	.word	0x080072a0
 80066a4:	080072a4 	.word	0x080072a4

080066a8 <__retarget_lock_init_recursive>:
 80066a8:	4770      	bx	lr

080066aa <__retarget_lock_acquire_recursive>:
 80066aa:	4770      	bx	lr

080066ac <__retarget_lock_release_recursive>:
 80066ac:	4770      	bx	lr
	...

080066b0 <_free_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4605      	mov	r5, r0
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d041      	beq.n	800673c <_free_r+0x8c>
 80066b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066bc:	1f0c      	subs	r4, r1, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	18e4      	addlt	r4, r4, r3
 80066c4:	f000 f8e0 	bl	8006888 <__malloc_lock>
 80066c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006740 <_free_r+0x90>)
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	b933      	cbnz	r3, 80066dc <_free_r+0x2c>
 80066ce:	6063      	str	r3, [r4, #4]
 80066d0:	6014      	str	r4, [r2, #0]
 80066d2:	4628      	mov	r0, r5
 80066d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d8:	f000 b8dc 	b.w	8006894 <__malloc_unlock>
 80066dc:	42a3      	cmp	r3, r4
 80066de:	d908      	bls.n	80066f2 <_free_r+0x42>
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	1821      	adds	r1, r4, r0
 80066e4:	428b      	cmp	r3, r1
 80066e6:	bf01      	itttt	eq
 80066e8:	6819      	ldreq	r1, [r3, #0]
 80066ea:	685b      	ldreq	r3, [r3, #4]
 80066ec:	1809      	addeq	r1, r1, r0
 80066ee:	6021      	streq	r1, [r4, #0]
 80066f0:	e7ed      	b.n	80066ce <_free_r+0x1e>
 80066f2:	461a      	mov	r2, r3
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b10b      	cbz	r3, 80066fc <_free_r+0x4c>
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	d9fa      	bls.n	80066f2 <_free_r+0x42>
 80066fc:	6811      	ldr	r1, [r2, #0]
 80066fe:	1850      	adds	r0, r2, r1
 8006700:	42a0      	cmp	r0, r4
 8006702:	d10b      	bne.n	800671c <_free_r+0x6c>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	4401      	add	r1, r0
 8006708:	1850      	adds	r0, r2, r1
 800670a:	4283      	cmp	r3, r0
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	d1e0      	bne.n	80066d2 <_free_r+0x22>
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	6053      	str	r3, [r2, #4]
 8006716:	4408      	add	r0, r1
 8006718:	6010      	str	r0, [r2, #0]
 800671a:	e7da      	b.n	80066d2 <_free_r+0x22>
 800671c:	d902      	bls.n	8006724 <_free_r+0x74>
 800671e:	230c      	movs	r3, #12
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	e7d6      	b.n	80066d2 <_free_r+0x22>
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	1821      	adds	r1, r4, r0
 8006728:	428b      	cmp	r3, r1
 800672a:	bf04      	itt	eq
 800672c:	6819      	ldreq	r1, [r3, #0]
 800672e:	685b      	ldreq	r3, [r3, #4]
 8006730:	6063      	str	r3, [r4, #4]
 8006732:	bf04      	itt	eq
 8006734:	1809      	addeq	r1, r1, r0
 8006736:	6021      	streq	r1, [r4, #0]
 8006738:	6054      	str	r4, [r2, #4]
 800673a:	e7ca      	b.n	80066d2 <_free_r+0x22>
 800673c:	bd38      	pop	{r3, r4, r5, pc}
 800673e:	bf00      	nop
 8006740:	20000914 	.word	0x20000914

08006744 <sbrk_aligned>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	4e0f      	ldr	r6, [pc, #60]	@ (8006784 <sbrk_aligned+0x40>)
 8006748:	460c      	mov	r4, r1
 800674a:	6831      	ldr	r1, [r6, #0]
 800674c:	4605      	mov	r5, r0
 800674e:	b911      	cbnz	r1, 8006756 <sbrk_aligned+0x12>
 8006750:	f000 fcb4 	bl	80070bc <_sbrk_r>
 8006754:	6030      	str	r0, [r6, #0]
 8006756:	4621      	mov	r1, r4
 8006758:	4628      	mov	r0, r5
 800675a:	f000 fcaf 	bl	80070bc <_sbrk_r>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	d103      	bne.n	800676a <sbrk_aligned+0x26>
 8006762:	f04f 34ff 	mov.w	r4, #4294967295
 8006766:	4620      	mov	r0, r4
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	1cc4      	adds	r4, r0, #3
 800676c:	f024 0403 	bic.w	r4, r4, #3
 8006770:	42a0      	cmp	r0, r4
 8006772:	d0f8      	beq.n	8006766 <sbrk_aligned+0x22>
 8006774:	1a21      	subs	r1, r4, r0
 8006776:	4628      	mov	r0, r5
 8006778:	f000 fca0 	bl	80070bc <_sbrk_r>
 800677c:	3001      	adds	r0, #1
 800677e:	d1f2      	bne.n	8006766 <sbrk_aligned+0x22>
 8006780:	e7ef      	b.n	8006762 <sbrk_aligned+0x1e>
 8006782:	bf00      	nop
 8006784:	20000910 	.word	0x20000910

08006788 <_malloc_r>:
 8006788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800678c:	1ccd      	adds	r5, r1, #3
 800678e:	f025 0503 	bic.w	r5, r5, #3
 8006792:	3508      	adds	r5, #8
 8006794:	2d0c      	cmp	r5, #12
 8006796:	bf38      	it	cc
 8006798:	250c      	movcc	r5, #12
 800679a:	2d00      	cmp	r5, #0
 800679c:	4606      	mov	r6, r0
 800679e:	db01      	blt.n	80067a4 <_malloc_r+0x1c>
 80067a0:	42a9      	cmp	r1, r5
 80067a2:	d904      	bls.n	80067ae <_malloc_r+0x26>
 80067a4:	230c      	movs	r3, #12
 80067a6:	6033      	str	r3, [r6, #0]
 80067a8:	2000      	movs	r0, #0
 80067aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006884 <_malloc_r+0xfc>
 80067b2:	f000 f869 	bl	8006888 <__malloc_lock>
 80067b6:	f8d8 3000 	ldr.w	r3, [r8]
 80067ba:	461c      	mov	r4, r3
 80067bc:	bb44      	cbnz	r4, 8006810 <_malloc_r+0x88>
 80067be:	4629      	mov	r1, r5
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7ff ffbf 	bl	8006744 <sbrk_aligned>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	4604      	mov	r4, r0
 80067ca:	d158      	bne.n	800687e <_malloc_r+0xf6>
 80067cc:	f8d8 4000 	ldr.w	r4, [r8]
 80067d0:	4627      	mov	r7, r4
 80067d2:	2f00      	cmp	r7, #0
 80067d4:	d143      	bne.n	800685e <_malloc_r+0xd6>
 80067d6:	2c00      	cmp	r4, #0
 80067d8:	d04b      	beq.n	8006872 <_malloc_r+0xea>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	4639      	mov	r1, r7
 80067de:	4630      	mov	r0, r6
 80067e0:	eb04 0903 	add.w	r9, r4, r3
 80067e4:	f000 fc6a 	bl	80070bc <_sbrk_r>
 80067e8:	4581      	cmp	r9, r0
 80067ea:	d142      	bne.n	8006872 <_malloc_r+0xea>
 80067ec:	6821      	ldr	r1, [r4, #0]
 80067ee:	1a6d      	subs	r5, r5, r1
 80067f0:	4629      	mov	r1, r5
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7ff ffa6 	bl	8006744 <sbrk_aligned>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d03a      	beq.n	8006872 <_malloc_r+0xea>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	442b      	add	r3, r5
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	f8d8 3000 	ldr.w	r3, [r8]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	bb62      	cbnz	r2, 8006864 <_malloc_r+0xdc>
 800680a:	f8c8 7000 	str.w	r7, [r8]
 800680e:	e00f      	b.n	8006830 <_malloc_r+0xa8>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	1b52      	subs	r2, r2, r5
 8006814:	d420      	bmi.n	8006858 <_malloc_r+0xd0>
 8006816:	2a0b      	cmp	r2, #11
 8006818:	d917      	bls.n	800684a <_malloc_r+0xc2>
 800681a:	1961      	adds	r1, r4, r5
 800681c:	42a3      	cmp	r3, r4
 800681e:	6025      	str	r5, [r4, #0]
 8006820:	bf18      	it	ne
 8006822:	6059      	strne	r1, [r3, #4]
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	bf08      	it	eq
 8006828:	f8c8 1000 	streq.w	r1, [r8]
 800682c:	5162      	str	r2, [r4, r5]
 800682e:	604b      	str	r3, [r1, #4]
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f82f 	bl	8006894 <__malloc_unlock>
 8006836:	f104 000b 	add.w	r0, r4, #11
 800683a:	1d23      	adds	r3, r4, #4
 800683c:	f020 0007 	bic.w	r0, r0, #7
 8006840:	1ac2      	subs	r2, r0, r3
 8006842:	bf1c      	itt	ne
 8006844:	1a1b      	subne	r3, r3, r0
 8006846:	50a3      	strne	r3, [r4, r2]
 8006848:	e7af      	b.n	80067aa <_malloc_r+0x22>
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	42a3      	cmp	r3, r4
 800684e:	bf0c      	ite	eq
 8006850:	f8c8 2000 	streq.w	r2, [r8]
 8006854:	605a      	strne	r2, [r3, #4]
 8006856:	e7eb      	b.n	8006830 <_malloc_r+0xa8>
 8006858:	4623      	mov	r3, r4
 800685a:	6864      	ldr	r4, [r4, #4]
 800685c:	e7ae      	b.n	80067bc <_malloc_r+0x34>
 800685e:	463c      	mov	r4, r7
 8006860:	687f      	ldr	r7, [r7, #4]
 8006862:	e7b6      	b.n	80067d2 <_malloc_r+0x4a>
 8006864:	461a      	mov	r2, r3
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	42a3      	cmp	r3, r4
 800686a:	d1fb      	bne.n	8006864 <_malloc_r+0xdc>
 800686c:	2300      	movs	r3, #0
 800686e:	6053      	str	r3, [r2, #4]
 8006870:	e7de      	b.n	8006830 <_malloc_r+0xa8>
 8006872:	230c      	movs	r3, #12
 8006874:	6033      	str	r3, [r6, #0]
 8006876:	4630      	mov	r0, r6
 8006878:	f000 f80c 	bl	8006894 <__malloc_unlock>
 800687c:	e794      	b.n	80067a8 <_malloc_r+0x20>
 800687e:	6005      	str	r5, [r0, #0]
 8006880:	e7d6      	b.n	8006830 <_malloc_r+0xa8>
 8006882:	bf00      	nop
 8006884:	20000914 	.word	0x20000914

08006888 <__malloc_lock>:
 8006888:	4801      	ldr	r0, [pc, #4]	@ (8006890 <__malloc_lock+0x8>)
 800688a:	f7ff bf0e 	b.w	80066aa <__retarget_lock_acquire_recursive>
 800688e:	bf00      	nop
 8006890:	2000090c 	.word	0x2000090c

08006894 <__malloc_unlock>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__malloc_unlock+0x8>)
 8006896:	f7ff bf09 	b.w	80066ac <__retarget_lock_release_recursive>
 800689a:	bf00      	nop
 800689c:	2000090c 	.word	0x2000090c

080068a0 <__sfputc_r>:
 80068a0:	6893      	ldr	r3, [r2, #8]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	b410      	push	{r4}
 80068a8:	6093      	str	r3, [r2, #8]
 80068aa:	da08      	bge.n	80068be <__sfputc_r+0x1e>
 80068ac:	6994      	ldr	r4, [r2, #24]
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	db01      	blt.n	80068b6 <__sfputc_r+0x16>
 80068b2:	290a      	cmp	r1, #10
 80068b4:	d103      	bne.n	80068be <__sfputc_r+0x1e>
 80068b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ba:	f000 bb6b 	b.w	8006f94 <__swbuf_r>
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	1c58      	adds	r0, r3, #1
 80068c2:	6010      	str	r0, [r2, #0]
 80068c4:	7019      	strb	r1, [r3, #0]
 80068c6:	4608      	mov	r0, r1
 80068c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <__sfputs_r>:
 80068ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d0:	4606      	mov	r6, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	4614      	mov	r4, r2
 80068d6:	18d5      	adds	r5, r2, r3
 80068d8:	42ac      	cmp	r4, r5
 80068da:	d101      	bne.n	80068e0 <__sfputs_r+0x12>
 80068dc:	2000      	movs	r0, #0
 80068de:	e007      	b.n	80068f0 <__sfputs_r+0x22>
 80068e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e4:	463a      	mov	r2, r7
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff ffda 	bl	80068a0 <__sfputc_r>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d1f3      	bne.n	80068d8 <__sfputs_r+0xa>
 80068f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068f4 <_vfiprintf_r>:
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	460d      	mov	r5, r1
 80068fa:	b09d      	sub	sp, #116	@ 0x74
 80068fc:	4614      	mov	r4, r2
 80068fe:	4698      	mov	r8, r3
 8006900:	4606      	mov	r6, r0
 8006902:	b118      	cbz	r0, 800690c <_vfiprintf_r+0x18>
 8006904:	6a03      	ldr	r3, [r0, #32]
 8006906:	b90b      	cbnz	r3, 800690c <_vfiprintf_r+0x18>
 8006908:	f7ff fdca 	bl	80064a0 <__sinit>
 800690c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800690e:	07d9      	lsls	r1, r3, #31
 8006910:	d405      	bmi.n	800691e <_vfiprintf_r+0x2a>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	059a      	lsls	r2, r3, #22
 8006916:	d402      	bmi.n	800691e <_vfiprintf_r+0x2a>
 8006918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800691a:	f7ff fec6 	bl	80066aa <__retarget_lock_acquire_recursive>
 800691e:	89ab      	ldrh	r3, [r5, #12]
 8006920:	071b      	lsls	r3, r3, #28
 8006922:	d501      	bpl.n	8006928 <_vfiprintf_r+0x34>
 8006924:	692b      	ldr	r3, [r5, #16]
 8006926:	b99b      	cbnz	r3, 8006950 <_vfiprintf_r+0x5c>
 8006928:	4629      	mov	r1, r5
 800692a:	4630      	mov	r0, r6
 800692c:	f000 fb70 	bl	8007010 <__swsetup_r>
 8006930:	b170      	cbz	r0, 8006950 <_vfiprintf_r+0x5c>
 8006932:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006934:	07dc      	lsls	r4, r3, #31
 8006936:	d504      	bpl.n	8006942 <_vfiprintf_r+0x4e>
 8006938:	f04f 30ff 	mov.w	r0, #4294967295
 800693c:	b01d      	add	sp, #116	@ 0x74
 800693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006942:	89ab      	ldrh	r3, [r5, #12]
 8006944:	0598      	lsls	r0, r3, #22
 8006946:	d4f7      	bmi.n	8006938 <_vfiprintf_r+0x44>
 8006948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800694a:	f7ff feaf 	bl	80066ac <__retarget_lock_release_recursive>
 800694e:	e7f3      	b.n	8006938 <_vfiprintf_r+0x44>
 8006950:	2300      	movs	r3, #0
 8006952:	9309      	str	r3, [sp, #36]	@ 0x24
 8006954:	2320      	movs	r3, #32
 8006956:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800695a:	f8cd 800c 	str.w	r8, [sp, #12]
 800695e:	2330      	movs	r3, #48	@ 0x30
 8006960:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b10 <_vfiprintf_r+0x21c>
 8006964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006968:	f04f 0901 	mov.w	r9, #1
 800696c:	4623      	mov	r3, r4
 800696e:	469a      	mov	sl, r3
 8006970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006974:	b10a      	cbz	r2, 800697a <_vfiprintf_r+0x86>
 8006976:	2a25      	cmp	r2, #37	@ 0x25
 8006978:	d1f9      	bne.n	800696e <_vfiprintf_r+0x7a>
 800697a:	ebba 0b04 	subs.w	fp, sl, r4
 800697e:	d00b      	beq.n	8006998 <_vfiprintf_r+0xa4>
 8006980:	465b      	mov	r3, fp
 8006982:	4622      	mov	r2, r4
 8006984:	4629      	mov	r1, r5
 8006986:	4630      	mov	r0, r6
 8006988:	f7ff ffa1 	bl	80068ce <__sfputs_r>
 800698c:	3001      	adds	r0, #1
 800698e:	f000 80a7 	beq.w	8006ae0 <_vfiprintf_r+0x1ec>
 8006992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006994:	445a      	add	r2, fp
 8006996:	9209      	str	r2, [sp, #36]	@ 0x24
 8006998:	f89a 3000 	ldrb.w	r3, [sl]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 809f 	beq.w	8006ae0 <_vfiprintf_r+0x1ec>
 80069a2:	2300      	movs	r3, #0
 80069a4:	f04f 32ff 	mov.w	r2, #4294967295
 80069a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ac:	f10a 0a01 	add.w	sl, sl, #1
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	9307      	str	r3, [sp, #28]
 80069b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80069ba:	4654      	mov	r4, sl
 80069bc:	2205      	movs	r2, #5
 80069be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c2:	4853      	ldr	r0, [pc, #332]	@ (8006b10 <_vfiprintf_r+0x21c>)
 80069c4:	f7f9 fc2c 	bl	8000220 <memchr>
 80069c8:	9a04      	ldr	r2, [sp, #16]
 80069ca:	b9d8      	cbnz	r0, 8006a04 <_vfiprintf_r+0x110>
 80069cc:	06d1      	lsls	r1, r2, #27
 80069ce:	bf44      	itt	mi
 80069d0:	2320      	movmi	r3, #32
 80069d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069d6:	0713      	lsls	r3, r2, #28
 80069d8:	bf44      	itt	mi
 80069da:	232b      	movmi	r3, #43	@ 0x2b
 80069dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069e0:	f89a 3000 	ldrb.w	r3, [sl]
 80069e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80069e6:	d015      	beq.n	8006a14 <_vfiprintf_r+0x120>
 80069e8:	9a07      	ldr	r2, [sp, #28]
 80069ea:	4654      	mov	r4, sl
 80069ec:	2000      	movs	r0, #0
 80069ee:	f04f 0c0a 	mov.w	ip, #10
 80069f2:	4621      	mov	r1, r4
 80069f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f8:	3b30      	subs	r3, #48	@ 0x30
 80069fa:	2b09      	cmp	r3, #9
 80069fc:	d94b      	bls.n	8006a96 <_vfiprintf_r+0x1a2>
 80069fe:	b1b0      	cbz	r0, 8006a2e <_vfiprintf_r+0x13a>
 8006a00:	9207      	str	r2, [sp, #28]
 8006a02:	e014      	b.n	8006a2e <_vfiprintf_r+0x13a>
 8006a04:	eba0 0308 	sub.w	r3, r0, r8
 8006a08:	fa09 f303 	lsl.w	r3, r9, r3
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	9304      	str	r3, [sp, #16]
 8006a10:	46a2      	mov	sl, r4
 8006a12:	e7d2      	b.n	80069ba <_vfiprintf_r+0xc6>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	1d19      	adds	r1, r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	9103      	str	r1, [sp, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bfbb      	ittet	lt
 8006a20:	425b      	neglt	r3, r3
 8006a22:	f042 0202 	orrlt.w	r2, r2, #2
 8006a26:	9307      	strge	r3, [sp, #28]
 8006a28:	9307      	strlt	r3, [sp, #28]
 8006a2a:	bfb8      	it	lt
 8006a2c:	9204      	strlt	r2, [sp, #16]
 8006a2e:	7823      	ldrb	r3, [r4, #0]
 8006a30:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a32:	d10a      	bne.n	8006a4a <_vfiprintf_r+0x156>
 8006a34:	7863      	ldrb	r3, [r4, #1]
 8006a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a38:	d132      	bne.n	8006aa0 <_vfiprintf_r+0x1ac>
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	1d1a      	adds	r2, r3, #4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	9203      	str	r2, [sp, #12]
 8006a42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a46:	3402      	adds	r4, #2
 8006a48:	9305      	str	r3, [sp, #20]
 8006a4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b20 <_vfiprintf_r+0x22c>
 8006a4e:	7821      	ldrb	r1, [r4, #0]
 8006a50:	2203      	movs	r2, #3
 8006a52:	4650      	mov	r0, sl
 8006a54:	f7f9 fbe4 	bl	8000220 <memchr>
 8006a58:	b138      	cbz	r0, 8006a6a <_vfiprintf_r+0x176>
 8006a5a:	9b04      	ldr	r3, [sp, #16]
 8006a5c:	eba0 000a 	sub.w	r0, r0, sl
 8006a60:	2240      	movs	r2, #64	@ 0x40
 8006a62:	4082      	lsls	r2, r0
 8006a64:	4313      	orrs	r3, r2
 8006a66:	3401      	adds	r4, #1
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6e:	4829      	ldr	r0, [pc, #164]	@ (8006b14 <_vfiprintf_r+0x220>)
 8006a70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a74:	2206      	movs	r2, #6
 8006a76:	f7f9 fbd3 	bl	8000220 <memchr>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d03f      	beq.n	8006afe <_vfiprintf_r+0x20a>
 8006a7e:	4b26      	ldr	r3, [pc, #152]	@ (8006b18 <_vfiprintf_r+0x224>)
 8006a80:	bb1b      	cbnz	r3, 8006aca <_vfiprintf_r+0x1d6>
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	3307      	adds	r3, #7
 8006a86:	f023 0307 	bic.w	r3, r3, #7
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	9303      	str	r3, [sp, #12]
 8006a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a90:	443b      	add	r3, r7
 8006a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a94:	e76a      	b.n	800696c <_vfiprintf_r+0x78>
 8006a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	e7a8      	b.n	80069f2 <_vfiprintf_r+0xfe>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	3401      	adds	r4, #1
 8006aa4:	9305      	str	r3, [sp, #20]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f04f 0c0a 	mov.w	ip, #10
 8006aac:	4620      	mov	r0, r4
 8006aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab2:	3a30      	subs	r2, #48	@ 0x30
 8006ab4:	2a09      	cmp	r2, #9
 8006ab6:	d903      	bls.n	8006ac0 <_vfiprintf_r+0x1cc>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0c6      	beq.n	8006a4a <_vfiprintf_r+0x156>
 8006abc:	9105      	str	r1, [sp, #20]
 8006abe:	e7c4      	b.n	8006a4a <_vfiprintf_r+0x156>
 8006ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e7f0      	b.n	8006aac <_vfiprintf_r+0x1b8>
 8006aca:	ab03      	add	r3, sp, #12
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4b12      	ldr	r3, [pc, #72]	@ (8006b1c <_vfiprintf_r+0x228>)
 8006ad2:	a904      	add	r1, sp, #16
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f3af 8000 	nop.w
 8006ada:	4607      	mov	r7, r0
 8006adc:	1c78      	adds	r0, r7, #1
 8006ade:	d1d6      	bne.n	8006a8e <_vfiprintf_r+0x19a>
 8006ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ae2:	07d9      	lsls	r1, r3, #31
 8006ae4:	d405      	bmi.n	8006af2 <_vfiprintf_r+0x1fe>
 8006ae6:	89ab      	ldrh	r3, [r5, #12]
 8006ae8:	059a      	lsls	r2, r3, #22
 8006aea:	d402      	bmi.n	8006af2 <_vfiprintf_r+0x1fe>
 8006aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aee:	f7ff fddd 	bl	80066ac <__retarget_lock_release_recursive>
 8006af2:	89ab      	ldrh	r3, [r5, #12]
 8006af4:	065b      	lsls	r3, r3, #25
 8006af6:	f53f af1f 	bmi.w	8006938 <_vfiprintf_r+0x44>
 8006afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006afc:	e71e      	b.n	800693c <_vfiprintf_r+0x48>
 8006afe:	ab03      	add	r3, sp, #12
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	462a      	mov	r2, r5
 8006b04:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <_vfiprintf_r+0x228>)
 8006b06:	a904      	add	r1, sp, #16
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 f879 	bl	8006c00 <_printf_i>
 8006b0e:	e7e4      	b.n	8006ada <_vfiprintf_r+0x1e6>
 8006b10:	08007264 	.word	0x08007264
 8006b14:	0800726e 	.word	0x0800726e
 8006b18:	00000000 	.word	0x00000000
 8006b1c:	080068cf 	.word	0x080068cf
 8006b20:	0800726a 	.word	0x0800726a

08006b24 <_printf_common>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	4616      	mov	r6, r2
 8006b2a:	4698      	mov	r8, r3
 8006b2c:	688a      	ldr	r2, [r1, #8]
 8006b2e:	690b      	ldr	r3, [r1, #16]
 8006b30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	bfb8      	it	lt
 8006b38:	4613      	movlt	r3, r2
 8006b3a:	6033      	str	r3, [r6, #0]
 8006b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b40:	4607      	mov	r7, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	b10a      	cbz	r2, 8006b4a <_printf_common+0x26>
 8006b46:	3301      	adds	r3, #1
 8006b48:	6033      	str	r3, [r6, #0]
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	0699      	lsls	r1, r3, #26
 8006b4e:	bf42      	ittt	mi
 8006b50:	6833      	ldrmi	r3, [r6, #0]
 8006b52:	3302      	addmi	r3, #2
 8006b54:	6033      	strmi	r3, [r6, #0]
 8006b56:	6825      	ldr	r5, [r4, #0]
 8006b58:	f015 0506 	ands.w	r5, r5, #6
 8006b5c:	d106      	bne.n	8006b6c <_printf_common+0x48>
 8006b5e:	f104 0a19 	add.w	sl, r4, #25
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	6832      	ldr	r2, [r6, #0]
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dc26      	bgt.n	8006bba <_printf_common+0x96>
 8006b6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	3b00      	subs	r3, #0
 8006b74:	bf18      	it	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	0692      	lsls	r2, r2, #26
 8006b7a:	d42b      	bmi.n	8006bd4 <_printf_common+0xb0>
 8006b7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b80:	4641      	mov	r1, r8
 8006b82:	4638      	mov	r0, r7
 8006b84:	47c8      	blx	r9
 8006b86:	3001      	adds	r0, #1
 8006b88:	d01e      	beq.n	8006bc8 <_printf_common+0xa4>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	f003 0306 	and.w	r3, r3, #6
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	bf02      	ittt	eq
 8006b96:	68e5      	ldreq	r5, [r4, #12]
 8006b98:	6833      	ldreq	r3, [r6, #0]
 8006b9a:	1aed      	subeq	r5, r5, r3
 8006b9c:	68a3      	ldr	r3, [r4, #8]
 8006b9e:	bf0c      	ite	eq
 8006ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ba4:	2500      	movne	r5, #0
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	bfc4      	itt	gt
 8006baa:	1a9b      	subgt	r3, r3, r2
 8006bac:	18ed      	addgt	r5, r5, r3
 8006bae:	2600      	movs	r6, #0
 8006bb0:	341a      	adds	r4, #26
 8006bb2:	42b5      	cmp	r5, r6
 8006bb4:	d11a      	bne.n	8006bec <_printf_common+0xc8>
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	e008      	b.n	8006bcc <_printf_common+0xa8>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	47c8      	blx	r9
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d103      	bne.n	8006bd0 <_printf_common+0xac>
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	e7c6      	b.n	8006b62 <_printf_common+0x3e>
 8006bd4:	18e1      	adds	r1, r4, r3
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	2030      	movs	r0, #48	@ 0x30
 8006bda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bde:	4422      	add	r2, r4
 8006be0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006be4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006be8:	3302      	adds	r3, #2
 8006bea:	e7c7      	b.n	8006b7c <_printf_common+0x58>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4622      	mov	r2, r4
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	47c8      	blx	r9
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d0e6      	beq.n	8006bc8 <_printf_common+0xa4>
 8006bfa:	3601      	adds	r6, #1
 8006bfc:	e7d9      	b.n	8006bb2 <_printf_common+0x8e>
	...

08006c00 <_printf_i>:
 8006c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c04:	7e0f      	ldrb	r7, [r1, #24]
 8006c06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c08:	2f78      	cmp	r7, #120	@ 0x78
 8006c0a:	4691      	mov	r9, r2
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	469a      	mov	sl, r3
 8006c12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c16:	d807      	bhi.n	8006c28 <_printf_i+0x28>
 8006c18:	2f62      	cmp	r7, #98	@ 0x62
 8006c1a:	d80a      	bhi.n	8006c32 <_printf_i+0x32>
 8006c1c:	2f00      	cmp	r7, #0
 8006c1e:	f000 80d1 	beq.w	8006dc4 <_printf_i+0x1c4>
 8006c22:	2f58      	cmp	r7, #88	@ 0x58
 8006c24:	f000 80b8 	beq.w	8006d98 <_printf_i+0x198>
 8006c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c30:	e03a      	b.n	8006ca8 <_printf_i+0xa8>
 8006c32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c36:	2b15      	cmp	r3, #21
 8006c38:	d8f6      	bhi.n	8006c28 <_printf_i+0x28>
 8006c3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c40 <_printf_i+0x40>)
 8006c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c40:	08006c99 	.word	0x08006c99
 8006c44:	08006cad 	.word	0x08006cad
 8006c48:	08006c29 	.word	0x08006c29
 8006c4c:	08006c29 	.word	0x08006c29
 8006c50:	08006c29 	.word	0x08006c29
 8006c54:	08006c29 	.word	0x08006c29
 8006c58:	08006cad 	.word	0x08006cad
 8006c5c:	08006c29 	.word	0x08006c29
 8006c60:	08006c29 	.word	0x08006c29
 8006c64:	08006c29 	.word	0x08006c29
 8006c68:	08006c29 	.word	0x08006c29
 8006c6c:	08006dab 	.word	0x08006dab
 8006c70:	08006cd7 	.word	0x08006cd7
 8006c74:	08006d65 	.word	0x08006d65
 8006c78:	08006c29 	.word	0x08006c29
 8006c7c:	08006c29 	.word	0x08006c29
 8006c80:	08006dcd 	.word	0x08006dcd
 8006c84:	08006c29 	.word	0x08006c29
 8006c88:	08006cd7 	.word	0x08006cd7
 8006c8c:	08006c29 	.word	0x08006c29
 8006c90:	08006c29 	.word	0x08006c29
 8006c94:	08006d6d 	.word	0x08006d6d
 8006c98:	6833      	ldr	r3, [r6, #0]
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6032      	str	r2, [r6, #0]
 8006ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ca4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e09c      	b.n	8006de6 <_printf_i+0x1e6>
 8006cac:	6833      	ldr	r3, [r6, #0]
 8006cae:	6820      	ldr	r0, [r4, #0]
 8006cb0:	1d19      	adds	r1, r3, #4
 8006cb2:	6031      	str	r1, [r6, #0]
 8006cb4:	0606      	lsls	r6, r0, #24
 8006cb6:	d501      	bpl.n	8006cbc <_printf_i+0xbc>
 8006cb8:	681d      	ldr	r5, [r3, #0]
 8006cba:	e003      	b.n	8006cc4 <_printf_i+0xc4>
 8006cbc:	0645      	lsls	r5, r0, #25
 8006cbe:	d5fb      	bpl.n	8006cb8 <_printf_i+0xb8>
 8006cc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cc4:	2d00      	cmp	r5, #0
 8006cc6:	da03      	bge.n	8006cd0 <_printf_i+0xd0>
 8006cc8:	232d      	movs	r3, #45	@ 0x2d
 8006cca:	426d      	negs	r5, r5
 8006ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd0:	4858      	ldr	r0, [pc, #352]	@ (8006e34 <_printf_i+0x234>)
 8006cd2:	230a      	movs	r3, #10
 8006cd4:	e011      	b.n	8006cfa <_printf_i+0xfa>
 8006cd6:	6821      	ldr	r1, [r4, #0]
 8006cd8:	6833      	ldr	r3, [r6, #0]
 8006cda:	0608      	lsls	r0, r1, #24
 8006cdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ce0:	d402      	bmi.n	8006ce8 <_printf_i+0xe8>
 8006ce2:	0649      	lsls	r1, r1, #25
 8006ce4:	bf48      	it	mi
 8006ce6:	b2ad      	uxthmi	r5, r5
 8006ce8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cea:	4852      	ldr	r0, [pc, #328]	@ (8006e34 <_printf_i+0x234>)
 8006cec:	6033      	str	r3, [r6, #0]
 8006cee:	bf14      	ite	ne
 8006cf0:	230a      	movne	r3, #10
 8006cf2:	2308      	moveq	r3, #8
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cfa:	6866      	ldr	r6, [r4, #4]
 8006cfc:	60a6      	str	r6, [r4, #8]
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	db05      	blt.n	8006d0e <_printf_i+0x10e>
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	432e      	orrs	r6, r5
 8006d06:	f021 0104 	bic.w	r1, r1, #4
 8006d0a:	6021      	str	r1, [r4, #0]
 8006d0c:	d04b      	beq.n	8006da6 <_printf_i+0x1a6>
 8006d0e:	4616      	mov	r6, r2
 8006d10:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d14:	fb03 5711 	mls	r7, r3, r1, r5
 8006d18:	5dc7      	ldrb	r7, [r0, r7]
 8006d1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d1e:	462f      	mov	r7, r5
 8006d20:	42bb      	cmp	r3, r7
 8006d22:	460d      	mov	r5, r1
 8006d24:	d9f4      	bls.n	8006d10 <_printf_i+0x110>
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d10b      	bne.n	8006d42 <_printf_i+0x142>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	07df      	lsls	r7, r3, #31
 8006d2e:	d508      	bpl.n	8006d42 <_printf_i+0x142>
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	6861      	ldr	r1, [r4, #4]
 8006d34:	4299      	cmp	r1, r3
 8006d36:	bfde      	ittt	le
 8006d38:	2330      	movle	r3, #48	@ 0x30
 8006d3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d42:	1b92      	subs	r2, r2, r6
 8006d44:	6122      	str	r2, [r4, #16]
 8006d46:	f8cd a000 	str.w	sl, [sp]
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	aa03      	add	r2, sp, #12
 8006d4e:	4621      	mov	r1, r4
 8006d50:	4640      	mov	r0, r8
 8006d52:	f7ff fee7 	bl	8006b24 <_printf_common>
 8006d56:	3001      	adds	r0, #1
 8006d58:	d14a      	bne.n	8006df0 <_printf_i+0x1f0>
 8006d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5e:	b004      	add	sp, #16
 8006d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	f043 0320 	orr.w	r3, r3, #32
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	4832      	ldr	r0, [pc, #200]	@ (8006e38 <_printf_i+0x238>)
 8006d6e:	2778      	movs	r7, #120	@ 0x78
 8006d70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	6831      	ldr	r1, [r6, #0]
 8006d78:	061f      	lsls	r7, r3, #24
 8006d7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d7e:	d402      	bmi.n	8006d86 <_printf_i+0x186>
 8006d80:	065f      	lsls	r7, r3, #25
 8006d82:	bf48      	it	mi
 8006d84:	b2ad      	uxthmi	r5, r5
 8006d86:	6031      	str	r1, [r6, #0]
 8006d88:	07d9      	lsls	r1, r3, #31
 8006d8a:	bf44      	itt	mi
 8006d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d90:	6023      	strmi	r3, [r4, #0]
 8006d92:	b11d      	cbz	r5, 8006d9c <_printf_i+0x19c>
 8006d94:	2310      	movs	r3, #16
 8006d96:	e7ad      	b.n	8006cf4 <_printf_i+0xf4>
 8006d98:	4826      	ldr	r0, [pc, #152]	@ (8006e34 <_printf_i+0x234>)
 8006d9a:	e7e9      	b.n	8006d70 <_printf_i+0x170>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	f023 0320 	bic.w	r3, r3, #32
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	e7f6      	b.n	8006d94 <_printf_i+0x194>
 8006da6:	4616      	mov	r6, r2
 8006da8:	e7bd      	b.n	8006d26 <_printf_i+0x126>
 8006daa:	6833      	ldr	r3, [r6, #0]
 8006dac:	6825      	ldr	r5, [r4, #0]
 8006dae:	6961      	ldr	r1, [r4, #20]
 8006db0:	1d18      	adds	r0, r3, #4
 8006db2:	6030      	str	r0, [r6, #0]
 8006db4:	062e      	lsls	r6, r5, #24
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	d501      	bpl.n	8006dbe <_printf_i+0x1be>
 8006dba:	6019      	str	r1, [r3, #0]
 8006dbc:	e002      	b.n	8006dc4 <_printf_i+0x1c4>
 8006dbe:	0668      	lsls	r0, r5, #25
 8006dc0:	d5fb      	bpl.n	8006dba <_printf_i+0x1ba>
 8006dc2:	8019      	strh	r1, [r3, #0]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6123      	str	r3, [r4, #16]
 8006dc8:	4616      	mov	r6, r2
 8006dca:	e7bc      	b.n	8006d46 <_printf_i+0x146>
 8006dcc:	6833      	ldr	r3, [r6, #0]
 8006dce:	1d1a      	adds	r2, r3, #4
 8006dd0:	6032      	str	r2, [r6, #0]
 8006dd2:	681e      	ldr	r6, [r3, #0]
 8006dd4:	6862      	ldr	r2, [r4, #4]
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7f9 fa21 	bl	8000220 <memchr>
 8006dde:	b108      	cbz	r0, 8006de4 <_printf_i+0x1e4>
 8006de0:	1b80      	subs	r0, r0, r6
 8006de2:	6060      	str	r0, [r4, #4]
 8006de4:	6863      	ldr	r3, [r4, #4]
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	2300      	movs	r3, #0
 8006dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dee:	e7aa      	b.n	8006d46 <_printf_i+0x146>
 8006df0:	6923      	ldr	r3, [r4, #16]
 8006df2:	4632      	mov	r2, r6
 8006df4:	4649      	mov	r1, r9
 8006df6:	4640      	mov	r0, r8
 8006df8:	47d0      	blx	sl
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	d0ad      	beq.n	8006d5a <_printf_i+0x15a>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	079b      	lsls	r3, r3, #30
 8006e02:	d413      	bmi.n	8006e2c <_printf_i+0x22c>
 8006e04:	68e0      	ldr	r0, [r4, #12]
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	4298      	cmp	r0, r3
 8006e0a:	bfb8      	it	lt
 8006e0c:	4618      	movlt	r0, r3
 8006e0e:	e7a6      	b.n	8006d5e <_printf_i+0x15e>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4632      	mov	r2, r6
 8006e14:	4649      	mov	r1, r9
 8006e16:	4640      	mov	r0, r8
 8006e18:	47d0      	blx	sl
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d09d      	beq.n	8006d5a <_printf_i+0x15a>
 8006e1e:	3501      	adds	r5, #1
 8006e20:	68e3      	ldr	r3, [r4, #12]
 8006e22:	9903      	ldr	r1, [sp, #12]
 8006e24:	1a5b      	subs	r3, r3, r1
 8006e26:	42ab      	cmp	r3, r5
 8006e28:	dcf2      	bgt.n	8006e10 <_printf_i+0x210>
 8006e2a:	e7eb      	b.n	8006e04 <_printf_i+0x204>
 8006e2c:	2500      	movs	r5, #0
 8006e2e:	f104 0619 	add.w	r6, r4, #25
 8006e32:	e7f5      	b.n	8006e20 <_printf_i+0x220>
 8006e34:	08007275 	.word	0x08007275
 8006e38:	08007286 	.word	0x08007286

08006e3c <__sflush_r>:
 8006e3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e44:	0716      	lsls	r6, r2, #28
 8006e46:	4605      	mov	r5, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	d454      	bmi.n	8006ef6 <__sflush_r+0xba>
 8006e4c:	684b      	ldr	r3, [r1, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	dc02      	bgt.n	8006e58 <__sflush_r+0x1c>
 8006e52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	dd48      	ble.n	8006eea <__sflush_r+0xae>
 8006e58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e5a:	2e00      	cmp	r6, #0
 8006e5c:	d045      	beq.n	8006eea <__sflush_r+0xae>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e64:	682f      	ldr	r7, [r5, #0]
 8006e66:	6a21      	ldr	r1, [r4, #32]
 8006e68:	602b      	str	r3, [r5, #0]
 8006e6a:	d030      	beq.n	8006ece <__sflush_r+0x92>
 8006e6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	0759      	lsls	r1, r3, #29
 8006e72:	d505      	bpl.n	8006e80 <__sflush_r+0x44>
 8006e74:	6863      	ldr	r3, [r4, #4]
 8006e76:	1ad2      	subs	r2, r2, r3
 8006e78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e7a:	b10b      	cbz	r3, 8006e80 <__sflush_r+0x44>
 8006e7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	2300      	movs	r3, #0
 8006e82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e84:	6a21      	ldr	r1, [r4, #32]
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b0      	blx	r6
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	d106      	bne.n	8006e9e <__sflush_r+0x62>
 8006e90:	6829      	ldr	r1, [r5, #0]
 8006e92:	291d      	cmp	r1, #29
 8006e94:	d82b      	bhi.n	8006eee <__sflush_r+0xb2>
 8006e96:	4a2a      	ldr	r2, [pc, #168]	@ (8006f40 <__sflush_r+0x104>)
 8006e98:	40ca      	lsrs	r2, r1
 8006e9a:	07d6      	lsls	r6, r2, #31
 8006e9c:	d527      	bpl.n	8006eee <__sflush_r+0xb2>
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6062      	str	r2, [r4, #4]
 8006ea2:	04d9      	lsls	r1, r3, #19
 8006ea4:	6922      	ldr	r2, [r4, #16]
 8006ea6:	6022      	str	r2, [r4, #0]
 8006ea8:	d504      	bpl.n	8006eb4 <__sflush_r+0x78>
 8006eaa:	1c42      	adds	r2, r0, #1
 8006eac:	d101      	bne.n	8006eb2 <__sflush_r+0x76>
 8006eae:	682b      	ldr	r3, [r5, #0]
 8006eb0:	b903      	cbnz	r3, 8006eb4 <__sflush_r+0x78>
 8006eb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006eb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eb6:	602f      	str	r7, [r5, #0]
 8006eb8:	b1b9      	cbz	r1, 8006eea <__sflush_r+0xae>
 8006eba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	d002      	beq.n	8006ec8 <__sflush_r+0x8c>
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f7ff fbf4 	bl	80066b0 <_free_r>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ecc:	e00d      	b.n	8006eea <__sflush_r+0xae>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b0      	blx	r6
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	1c50      	adds	r0, r2, #1
 8006ed8:	d1c9      	bne.n	8006e6e <__sflush_r+0x32>
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0c6      	beq.n	8006e6e <__sflush_r+0x32>
 8006ee0:	2b1d      	cmp	r3, #29
 8006ee2:	d001      	beq.n	8006ee8 <__sflush_r+0xac>
 8006ee4:	2b16      	cmp	r3, #22
 8006ee6:	d11e      	bne.n	8006f26 <__sflush_r+0xea>
 8006ee8:	602f      	str	r7, [r5, #0]
 8006eea:	2000      	movs	r0, #0
 8006eec:	e022      	b.n	8006f34 <__sflush_r+0xf8>
 8006eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ef2:	b21b      	sxth	r3, r3
 8006ef4:	e01b      	b.n	8006f2e <__sflush_r+0xf2>
 8006ef6:	690f      	ldr	r7, [r1, #16]
 8006ef8:	2f00      	cmp	r7, #0
 8006efa:	d0f6      	beq.n	8006eea <__sflush_r+0xae>
 8006efc:	0793      	lsls	r3, r2, #30
 8006efe:	680e      	ldr	r6, [r1, #0]
 8006f00:	bf08      	it	eq
 8006f02:	694b      	ldreq	r3, [r1, #20]
 8006f04:	600f      	str	r7, [r1, #0]
 8006f06:	bf18      	it	ne
 8006f08:	2300      	movne	r3, #0
 8006f0a:	eba6 0807 	sub.w	r8, r6, r7
 8006f0e:	608b      	str	r3, [r1, #8]
 8006f10:	f1b8 0f00 	cmp.w	r8, #0
 8006f14:	dde9      	ble.n	8006eea <__sflush_r+0xae>
 8006f16:	6a21      	ldr	r1, [r4, #32]
 8006f18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f1a:	4643      	mov	r3, r8
 8006f1c:	463a      	mov	r2, r7
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b0      	blx	r6
 8006f22:	2800      	cmp	r0, #0
 8006f24:	dc08      	bgt.n	8006f38 <__sflush_r+0xfc>
 8006f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f2e:	81a3      	strh	r3, [r4, #12]
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
 8006f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f38:	4407      	add	r7, r0
 8006f3a:	eba8 0800 	sub.w	r8, r8, r0
 8006f3e:	e7e7      	b.n	8006f10 <__sflush_r+0xd4>
 8006f40:	20400001 	.word	0x20400001

08006f44 <_fflush_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	690b      	ldr	r3, [r1, #16]
 8006f48:	4605      	mov	r5, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	b913      	cbnz	r3, 8006f54 <_fflush_r+0x10>
 8006f4e:	2500      	movs	r5, #0
 8006f50:	4628      	mov	r0, r5
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	b118      	cbz	r0, 8006f5e <_fflush_r+0x1a>
 8006f56:	6a03      	ldr	r3, [r0, #32]
 8006f58:	b90b      	cbnz	r3, 8006f5e <_fflush_r+0x1a>
 8006f5a:	f7ff faa1 	bl	80064a0 <__sinit>
 8006f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f3      	beq.n	8006f4e <_fflush_r+0xa>
 8006f66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f68:	07d0      	lsls	r0, r2, #31
 8006f6a:	d404      	bmi.n	8006f76 <_fflush_r+0x32>
 8006f6c:	0599      	lsls	r1, r3, #22
 8006f6e:	d402      	bmi.n	8006f76 <_fflush_r+0x32>
 8006f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f72:	f7ff fb9a 	bl	80066aa <__retarget_lock_acquire_recursive>
 8006f76:	4628      	mov	r0, r5
 8006f78:	4621      	mov	r1, r4
 8006f7a:	f7ff ff5f 	bl	8006e3c <__sflush_r>
 8006f7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f80:	07da      	lsls	r2, r3, #31
 8006f82:	4605      	mov	r5, r0
 8006f84:	d4e4      	bmi.n	8006f50 <_fflush_r+0xc>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	059b      	lsls	r3, r3, #22
 8006f8a:	d4e1      	bmi.n	8006f50 <_fflush_r+0xc>
 8006f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f8e:	f7ff fb8d 	bl	80066ac <__retarget_lock_release_recursive>
 8006f92:	e7dd      	b.n	8006f50 <_fflush_r+0xc>

08006f94 <__swbuf_r>:
 8006f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f96:	460e      	mov	r6, r1
 8006f98:	4614      	mov	r4, r2
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	b118      	cbz	r0, 8006fa6 <__swbuf_r+0x12>
 8006f9e:	6a03      	ldr	r3, [r0, #32]
 8006fa0:	b90b      	cbnz	r3, 8006fa6 <__swbuf_r+0x12>
 8006fa2:	f7ff fa7d 	bl	80064a0 <__sinit>
 8006fa6:	69a3      	ldr	r3, [r4, #24]
 8006fa8:	60a3      	str	r3, [r4, #8]
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	071a      	lsls	r2, r3, #28
 8006fae:	d501      	bpl.n	8006fb4 <__swbuf_r+0x20>
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	b943      	cbnz	r3, 8006fc6 <__swbuf_r+0x32>
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 f82a 	bl	8007010 <__swsetup_r>
 8006fbc:	b118      	cbz	r0, 8006fc6 <__swbuf_r+0x32>
 8006fbe:	f04f 37ff 	mov.w	r7, #4294967295
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	6922      	ldr	r2, [r4, #16]
 8006fca:	1a98      	subs	r0, r3, r2
 8006fcc:	6963      	ldr	r3, [r4, #20]
 8006fce:	b2f6      	uxtb	r6, r6
 8006fd0:	4283      	cmp	r3, r0
 8006fd2:	4637      	mov	r7, r6
 8006fd4:	dc05      	bgt.n	8006fe2 <__swbuf_r+0x4e>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f7ff ffb3 	bl	8006f44 <_fflush_r>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d1ed      	bne.n	8006fbe <__swbuf_r+0x2a>
 8006fe2:	68a3      	ldr	r3, [r4, #8]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	60a3      	str	r3, [r4, #8]
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	6022      	str	r2, [r4, #0]
 8006fee:	701e      	strb	r6, [r3, #0]
 8006ff0:	6962      	ldr	r2, [r4, #20]
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d004      	beq.n	8007002 <__swbuf_r+0x6e>
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	07db      	lsls	r3, r3, #31
 8006ffc:	d5e1      	bpl.n	8006fc2 <__swbuf_r+0x2e>
 8006ffe:	2e0a      	cmp	r6, #10
 8007000:	d1df      	bne.n	8006fc2 <__swbuf_r+0x2e>
 8007002:	4621      	mov	r1, r4
 8007004:	4628      	mov	r0, r5
 8007006:	f7ff ff9d 	bl	8006f44 <_fflush_r>
 800700a:	2800      	cmp	r0, #0
 800700c:	d0d9      	beq.n	8006fc2 <__swbuf_r+0x2e>
 800700e:	e7d6      	b.n	8006fbe <__swbuf_r+0x2a>

08007010 <__swsetup_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4b29      	ldr	r3, [pc, #164]	@ (80070b8 <__swsetup_r+0xa8>)
 8007014:	4605      	mov	r5, r0
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	460c      	mov	r4, r1
 800701a:	b118      	cbz	r0, 8007024 <__swsetup_r+0x14>
 800701c:	6a03      	ldr	r3, [r0, #32]
 800701e:	b90b      	cbnz	r3, 8007024 <__swsetup_r+0x14>
 8007020:	f7ff fa3e 	bl	80064a0 <__sinit>
 8007024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007028:	0719      	lsls	r1, r3, #28
 800702a:	d422      	bmi.n	8007072 <__swsetup_r+0x62>
 800702c:	06da      	lsls	r2, r3, #27
 800702e:	d407      	bmi.n	8007040 <__swsetup_r+0x30>
 8007030:	2209      	movs	r2, #9
 8007032:	602a      	str	r2, [r5, #0]
 8007034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	f04f 30ff 	mov.w	r0, #4294967295
 800703e:	e033      	b.n	80070a8 <__swsetup_r+0x98>
 8007040:	0758      	lsls	r0, r3, #29
 8007042:	d512      	bpl.n	800706a <__swsetup_r+0x5a>
 8007044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007046:	b141      	cbz	r1, 800705a <__swsetup_r+0x4a>
 8007048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800704c:	4299      	cmp	r1, r3
 800704e:	d002      	beq.n	8007056 <__swsetup_r+0x46>
 8007050:	4628      	mov	r0, r5
 8007052:	f7ff fb2d 	bl	80066b0 <_free_r>
 8007056:	2300      	movs	r3, #0
 8007058:	6363      	str	r3, [r4, #52]	@ 0x34
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007060:	81a3      	strh	r3, [r4, #12]
 8007062:	2300      	movs	r3, #0
 8007064:	6063      	str	r3, [r4, #4]
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	f043 0308 	orr.w	r3, r3, #8
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	b94b      	cbnz	r3, 800708a <__swsetup_r+0x7a>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800707c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007080:	d003      	beq.n	800708a <__swsetup_r+0x7a>
 8007082:	4621      	mov	r1, r4
 8007084:	4628      	mov	r0, r5
 8007086:	f000 f84f 	bl	8007128 <__smakebuf_r>
 800708a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708e:	f013 0201 	ands.w	r2, r3, #1
 8007092:	d00a      	beq.n	80070aa <__swsetup_r+0x9a>
 8007094:	2200      	movs	r2, #0
 8007096:	60a2      	str	r2, [r4, #8]
 8007098:	6962      	ldr	r2, [r4, #20]
 800709a:	4252      	negs	r2, r2
 800709c:	61a2      	str	r2, [r4, #24]
 800709e:	6922      	ldr	r2, [r4, #16]
 80070a0:	b942      	cbnz	r2, 80070b4 <__swsetup_r+0xa4>
 80070a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070a6:	d1c5      	bne.n	8007034 <__swsetup_r+0x24>
 80070a8:	bd38      	pop	{r3, r4, r5, pc}
 80070aa:	0799      	lsls	r1, r3, #30
 80070ac:	bf58      	it	pl
 80070ae:	6962      	ldrpl	r2, [r4, #20]
 80070b0:	60a2      	str	r2, [r4, #8]
 80070b2:	e7f4      	b.n	800709e <__swsetup_r+0x8e>
 80070b4:	2000      	movs	r0, #0
 80070b6:	e7f7      	b.n	80070a8 <__swsetup_r+0x98>
 80070b8:	200000cc 	.word	0x200000cc

080070bc <_sbrk_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d06      	ldr	r5, [pc, #24]	@ (80070d8 <_sbrk_r+0x1c>)
 80070c0:	2300      	movs	r3, #0
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	602b      	str	r3, [r5, #0]
 80070c8:	f7fa fa64 	bl	8001594 <_sbrk>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_sbrk_r+0x1a>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_sbrk_r+0x1a>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000908 	.word	0x20000908

080070dc <__swhatbuf_r>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	460c      	mov	r4, r1
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	2900      	cmp	r1, #0
 80070e6:	b096      	sub	sp, #88	@ 0x58
 80070e8:	4615      	mov	r5, r2
 80070ea:	461e      	mov	r6, r3
 80070ec:	da0d      	bge.n	800710a <__swhatbuf_r+0x2e>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80070f4:	f04f 0100 	mov.w	r1, #0
 80070f8:	bf14      	ite	ne
 80070fa:	2340      	movne	r3, #64	@ 0x40
 80070fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007100:	2000      	movs	r0, #0
 8007102:	6031      	str	r1, [r6, #0]
 8007104:	602b      	str	r3, [r5, #0]
 8007106:	b016      	add	sp, #88	@ 0x58
 8007108:	bd70      	pop	{r4, r5, r6, pc}
 800710a:	466a      	mov	r2, sp
 800710c:	f000 f848 	bl	80071a0 <_fstat_r>
 8007110:	2800      	cmp	r0, #0
 8007112:	dbec      	blt.n	80070ee <__swhatbuf_r+0x12>
 8007114:	9901      	ldr	r1, [sp, #4]
 8007116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800711a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800711e:	4259      	negs	r1, r3
 8007120:	4159      	adcs	r1, r3
 8007122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007126:	e7eb      	b.n	8007100 <__swhatbuf_r+0x24>

08007128 <__smakebuf_r>:
 8007128:	898b      	ldrh	r3, [r1, #12]
 800712a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800712c:	079d      	lsls	r5, r3, #30
 800712e:	4606      	mov	r6, r0
 8007130:	460c      	mov	r4, r1
 8007132:	d507      	bpl.n	8007144 <__smakebuf_r+0x1c>
 8007134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	2301      	movs	r3, #1
 800713e:	6163      	str	r3, [r4, #20]
 8007140:	b003      	add	sp, #12
 8007142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007144:	ab01      	add	r3, sp, #4
 8007146:	466a      	mov	r2, sp
 8007148:	f7ff ffc8 	bl	80070dc <__swhatbuf_r>
 800714c:	9f00      	ldr	r7, [sp, #0]
 800714e:	4605      	mov	r5, r0
 8007150:	4639      	mov	r1, r7
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff fb18 	bl	8006788 <_malloc_r>
 8007158:	b948      	cbnz	r0, 800716e <__smakebuf_r+0x46>
 800715a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715e:	059a      	lsls	r2, r3, #22
 8007160:	d4ee      	bmi.n	8007140 <__smakebuf_r+0x18>
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	f043 0302 	orr.w	r3, r3, #2
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	e7e2      	b.n	8007134 <__smakebuf_r+0xc>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	6020      	str	r0, [r4, #0]
 8007172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	9b01      	ldr	r3, [sp, #4]
 800717a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800717e:	b15b      	cbz	r3, 8007198 <__smakebuf_r+0x70>
 8007180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007184:	4630      	mov	r0, r6
 8007186:	f000 f81d 	bl	80071c4 <_isatty_r>
 800718a:	b128      	cbz	r0, 8007198 <__smakebuf_r+0x70>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	431d      	orrs	r5, r3
 800719c:	81a5      	strh	r5, [r4, #12]
 800719e:	e7cf      	b.n	8007140 <__smakebuf_r+0x18>

080071a0 <_fstat_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d07      	ldr	r5, [pc, #28]	@ (80071c0 <_fstat_r+0x20>)
 80071a4:	2300      	movs	r3, #0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	f7fa f9c9 	bl	8001544 <_fstat>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d102      	bne.n	80071bc <_fstat_r+0x1c>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	b103      	cbz	r3, 80071bc <_fstat_r+0x1c>
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	20000908 	.word	0x20000908

080071c4 <_isatty_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d06      	ldr	r5, [pc, #24]	@ (80071e0 <_isatty_r+0x1c>)
 80071c8:	2300      	movs	r3, #0
 80071ca:	4604      	mov	r4, r0
 80071cc:	4608      	mov	r0, r1
 80071ce:	602b      	str	r3, [r5, #0]
 80071d0:	f7fa f9c8 	bl	8001564 <_isatty>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_isatty_r+0x1a>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_isatty_r+0x1a>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	20000908 	.word	0x20000908

080071e4 <_init>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr

080071f0 <_fini>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr
