
carte-stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d05c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800d23c  0800d23c  0000e23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d674  0800d674  0000f1a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d674  0800d674  0000e674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d67c  0800d67c  0000f1a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d67c  0800d67c  0000e67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d680  0800d680  0000e680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a4  20000000  0800d684  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  200001a4  0800d828  0000f1a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  0800d828  0000fb94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000233fb  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004461  00000000  00000000  000325cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  00036a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000173c  00000000  00000000  00038820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250dd  00000000  00000000  00039f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022425  00000000  00000000  0005f039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1abc  00000000  00000000  0008145e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fa0  00000000  00000000  00172f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0017bf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001a4 	.word	0x200001a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d224 	.word	0x0800d224

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001a8 	.word	0x200001a8
 800021c:	0800d224 	.word	0x0800d224

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c80:	f000 b988 	b.w	8000f94 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	468e      	mov	lr, r1
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	4688      	mov	r8, r1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d14a      	bne.n	8000d42 <__udivmoddi4+0xa6>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d962      	bls.n	8000d78 <__udivmoddi4+0xdc>
 8000cb2:	fab2 f682 	clz	r6, r2
 8000cb6:	b14e      	cbz	r6, 8000ccc <__udivmoddi4+0x30>
 8000cb8:	f1c6 0320 	rsb	r3, r6, #32
 8000cbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000cc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc4:	40b7      	lsls	r7, r6
 8000cc6:	ea43 0808 	orr.w	r8, r3, r8
 8000cca:	40b4      	lsls	r4, r6
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f fc87 	uxth.w	ip, r7
 8000cd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ce2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x62>
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cf0:	f080 80ea 	bcs.w	8000ec8 <__udivmoddi4+0x22c>
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f240 80e7 	bls.w	8000ec8 <__udivmoddi4+0x22c>
 8000cfa:	3902      	subs	r1, #2
 8000cfc:	443b      	add	r3, r7
 8000cfe:	1a9a      	subs	r2, r3, r2
 8000d00:	b2a3      	uxth	r3, r4
 8000d02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d12:	459c      	cmp	ip, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x8e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d1c:	f080 80d6 	bcs.w	8000ecc <__udivmoddi4+0x230>
 8000d20:	459c      	cmp	ip, r3
 8000d22:	f240 80d3 	bls.w	8000ecc <__udivmoddi4+0x230>
 8000d26:	443b      	add	r3, r7
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2e:	eba3 030c 	sub.w	r3, r3, ip
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa2>
 8000d36:	40f3      	lsrs	r3, r6
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xb6>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb0>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa2>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x14c>
 8000d5a:	4573      	cmp	r3, lr
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xc8>
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	f200 8105 	bhi.w	8000f6e <__udivmoddi4+0x2d2>
 8000d64:	1a84      	subs	r4, r0, r2
 8000d66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	4690      	mov	r8, r2
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d0e5      	beq.n	8000d3e <__udivmoddi4+0xa2>
 8000d72:	e9c5 4800 	strd	r4, r8, [r5]
 8000d76:	e7e2      	b.n	8000d3e <__udivmoddi4+0xa2>
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f000 8090 	beq.w	8000e9e <__udivmoddi4+0x202>
 8000d7e:	fab2 f682 	clz	r6, r2
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f040 80a4 	bne.w	8000ed0 <__udivmoddi4+0x234>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	0c03      	lsrs	r3, r0, #16
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	b280      	uxth	r0, r0
 8000d92:	b2bc      	uxth	r4, r7
 8000d94:	2101      	movs	r1, #1
 8000d96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da2:	fb04 f20c 	mul.w	r2, r4, ip
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x11e>
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x11c>
 8000db2:	429a      	cmp	r2, r3
 8000db4:	f200 80e0 	bhi.w	8000f78 <__udivmoddi4+0x2dc>
 8000db8:	46c4      	mov	ip, r8
 8000dba:	1a9b      	subs	r3, r3, r2
 8000dbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc8:	fb02 f404 	mul.w	r4, r2, r4
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x144>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x142>
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	f200 80ca 	bhi.w	8000f72 <__udivmoddi4+0x2d6>
 8000dde:	4602      	mov	r2, r0
 8000de0:	1b1b      	subs	r3, r3, r4
 8000de2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x98>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa0e f401 	lsl.w	r4, lr, r1
 8000df8:	fa20 f306 	lsr.w	r3, r0, r6
 8000dfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e04:	4323      	orrs	r3, r4
 8000e06:	fa00 f801 	lsl.w	r8, r0, r1
 8000e0a:	fa1f fc87 	uxth.w	ip, r7
 8000e0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000e12:	0c1c      	lsrs	r4, r3, #16
 8000e14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x1a0>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e2e:	f080 809c 	bcs.w	8000f6a <__udivmoddi4+0x2ce>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	f240 8099 	bls.w	8000f6a <__udivmoddi4+0x2ce>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	443c      	add	r4, r7
 8000e3c:	eba4 040e 	sub.w	r4, r4, lr
 8000e40:	fa1f fe83 	uxth.w	lr, r3
 8000e44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e48:	fb09 4413 	mls	r4, r9, r3, r4
 8000e4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e54:	45a4      	cmp	ip, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1ce>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e5e:	f080 8082 	bcs.w	8000f66 <__udivmoddi4+0x2ca>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d97f      	bls.n	8000f66 <__udivmoddi4+0x2ca>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6e:	eba4 040c 	sub.w	r4, r4, ip
 8000e72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e76:	4564      	cmp	r4, ip
 8000e78:	4673      	mov	r3, lr
 8000e7a:	46e1      	mov	r9, ip
 8000e7c:	d362      	bcc.n	8000f44 <__udivmoddi4+0x2a8>
 8000e7e:	d05f      	beq.n	8000f40 <__udivmoddi4+0x2a4>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x1fe>
 8000e82:	ebb8 0203 	subs.w	r2, r8, r3
 8000e86:	eb64 0409 	sbc.w	r4, r4, r9
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e92:	431e      	orrs	r6, r3
 8000e94:	40cc      	lsrs	r4, r1
 8000e96:	e9c5 6400 	strd	r6, r4, [r5]
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	e74f      	b.n	8000d3e <__udivmoddi4+0xa2>
 8000e9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ea2:	0c01      	lsrs	r1, r0, #16
 8000ea4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea8:	b280      	uxth	r0, r0
 8000eaa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	463c      	mov	r4, r7
 8000eb4:	46b8      	mov	r8, r7
 8000eb6:	46be      	mov	lr, r7
 8000eb8:	2620      	movs	r6, #32
 8000eba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ebe:	eba2 0208 	sub.w	r2, r2, r8
 8000ec2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec6:	e766      	b.n	8000d96 <__udivmoddi4+0xfa>
 8000ec8:	4601      	mov	r1, r0
 8000eca:	e718      	b.n	8000cfe <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e72c      	b.n	8000d2a <__udivmoddi4+0x8e>
 8000ed0:	f1c6 0220 	rsb	r2, r6, #32
 8000ed4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed8:	40b7      	lsls	r7, r6
 8000eda:	40b1      	lsls	r1, r6
 8000edc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eea:	b2bc      	uxth	r4, r7
 8000eec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ef0:	0c11      	lsrs	r1, r2, #16
 8000ef2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef6:	fb08 f904 	mul.w	r9, r8, r4
 8000efa:	40b0      	lsls	r0, r6
 8000efc:	4589      	cmp	r9, r1
 8000efe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f02:	b280      	uxth	r0, r0
 8000f04:	d93e      	bls.n	8000f84 <__udivmoddi4+0x2e8>
 8000f06:	1879      	adds	r1, r7, r1
 8000f08:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f0c:	d201      	bcs.n	8000f12 <__udivmoddi4+0x276>
 8000f0e:	4589      	cmp	r9, r1
 8000f10:	d81f      	bhi.n	8000f52 <__udivmoddi4+0x2b6>
 8000f12:	eba1 0109 	sub.w	r1, r1, r9
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	b292      	uxth	r2, r2
 8000f24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f28:	4542      	cmp	r2, r8
 8000f2a:	d229      	bcs.n	8000f80 <__udivmoddi4+0x2e4>
 8000f2c:	18ba      	adds	r2, r7, r2
 8000f2e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f32:	d2c4      	bcs.n	8000ebe <__udivmoddi4+0x222>
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d2c2      	bcs.n	8000ebe <__udivmoddi4+0x222>
 8000f38:	f1a9 0102 	sub.w	r1, r9, #2
 8000f3c:	443a      	add	r2, r7
 8000f3e:	e7be      	b.n	8000ebe <__udivmoddi4+0x222>
 8000f40:	45f0      	cmp	r8, lr
 8000f42:	d29d      	bcs.n	8000e80 <__udivmoddi4+0x1e4>
 8000f44:	ebbe 0302 	subs.w	r3, lr, r2
 8000f48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f4c:	3801      	subs	r0, #1
 8000f4e:	46e1      	mov	r9, ip
 8000f50:	e796      	b.n	8000e80 <__udivmoddi4+0x1e4>
 8000f52:	eba7 0909 	sub.w	r9, r7, r9
 8000f56:	4449      	add	r1, r9
 8000f58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f60:	fb09 f804 	mul.w	r8, r9, r4
 8000f64:	e7db      	b.n	8000f1e <__udivmoddi4+0x282>
 8000f66:	4673      	mov	r3, lr
 8000f68:	e77f      	b.n	8000e6a <__udivmoddi4+0x1ce>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	e766      	b.n	8000e3c <__udivmoddi4+0x1a0>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e6fd      	b.n	8000d6e <__udivmoddi4+0xd2>
 8000f72:	443b      	add	r3, r7
 8000f74:	3a02      	subs	r2, #2
 8000f76:	e733      	b.n	8000de0 <__udivmoddi4+0x144>
 8000f78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f7c:	443b      	add	r3, r7
 8000f7e:	e71c      	b.n	8000dba <__udivmoddi4+0x11e>
 8000f80:	4649      	mov	r1, r9
 8000f82:	e79c      	b.n	8000ebe <__udivmoddi4+0x222>
 8000f84:	eba1 0109 	sub.w	r1, r1, r9
 8000f88:	46c4      	mov	ip, r8
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fb09 f804 	mul.w	r8, r9, r4
 8000f92:	e7c4      	b.n	8000f1e <__udivmoddi4+0x282>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <_discardWarning>:
	void (*callback)(console_command_args_t* args, console_t* console);

	console_command_args_t args[];
} console_command_t;

static inline void _discardWarning(const void* var){}
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <cmd_callback_test>:
#include <stdio.h>
#include <math.h>

#include "runtime.h"

COMMAND(test, "commande de test")
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffee 	bl	8000f98 <_discardWarning>
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f7ff ffeb 	bl	8000f98 <_discardWarning>
	on_stepper_move_by(0, 200000, 60000);
 8000fc2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000fc6:	4904      	ldr	r1, [pc, #16]	@ (8000fd8 <cmd_callback_test+0x2c>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f001 fbe3 	bl	8002794 <on_stepper_move_by>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	00030d40 	.word	0x00030d40

08000fdc <cmd_callback_help>:

// ============================= Built in commands ============================= //

// todo : improve help for built in

COMMAND(help, "displays help for all available commands")
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b0bb      	sub	sp, #236	@ 0xec
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffd6 	bl	8000f98 <_discardWarning>
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f7ff ffd3 	bl	8000f98 <_discardWarning>
	HAL_UART_Transmit(console->huart, (uint8_t*) "Available commands :" END_OF_LINE, 20 + sizeof(END_OF_LINE), 1000);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	2216      	movs	r2, #22
 8000ffc:	4924      	ldr	r1, [pc, #144]	@ (8001090 <cmd_callback_help+0xb4>)
 8000ffe:	f008 fd74 	bl	8009aea <HAL_UART_Transmit>
	HAL_UART_Transmit(console->huart, (uint8_t*) "\thelp : provides information on available commands" END_OF_LINE, 50 + sizeof(END_OF_LINE), 1000);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	2234      	movs	r2, #52	@ 0x34
 800100c:	4921      	ldr	r1, [pc, #132]	@ (8001094 <cmd_callback_help+0xb8>)
 800100e:	f008 fd6c 	bl	8009aea <HAL_UART_Transmit>
	#ifdef ENABLE_RESET
		HAL_UART_Transmit(console->huart, (uint8_t*) "\treset : resets de microcontroller" END_OF_LINE, 34 + sizeof(END_OF_LINE), 1000);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	2224      	movs	r2, #36	@ 0x24
 800101c:	491e      	ldr	r1, [pc, #120]	@ (8001098 <cmd_callback_help+0xbc>)
 800101e:	f008 fd64 	bl	8009aea <HAL_UART_Transmit>
	#endif

	char buf[MAX_COMMAND_NAME_LENGTH + MAX_COMMAND_DESC_LENGTH + 10];
	for (uint16_t i = 0; i < commands_nb; i ++){
 8001022:	2300      	movs	r3, #0
 8001024:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
 8001028:	e027      	b.n	800107a <cmd_callback_help+0x9e>
		sprintf(buf, "\t%s : %s%s", commands[i]->name, commands[i]->desc, END_OF_LINE);
 800102a:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 800102e:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <cmd_callback_help+0xc0>)
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 800103a:	4918      	ldr	r1, [pc, #96]	@ (800109c <cmd_callback_help+0xc0>)
 800103c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f107 000c 	add.w	r0, r7, #12
 8001046:	4916      	ldr	r1, [pc, #88]	@ (80010a0 <cmd_callback_help+0xc4>)
 8001048:	9100      	str	r1, [sp, #0]
 800104a:	4916      	ldr	r1, [pc, #88]	@ (80010a4 <cmd_callback_help+0xc8>)
 800104c:	f00a fc0c 	bl	800b868 <siprintf>
		HAL_UART_Transmit(console->huart, (uint8_t*) buf, strlen(buf), 1000);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681c      	ldr	r4, [r3, #0]
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f8e1 	bl	8000220 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f107 010c 	add.w	r1, r7, #12
 8001066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106a:	4620      	mov	r0, r4
 800106c:	f008 fd3d 	bl	8009aea <HAL_UART_Transmit>
	for (uint16_t i = 0; i < commands_nb; i ++){
 8001070:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8001074:	3301      	adds	r3, #1
 8001076:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
 800107a:	2201      	movs	r2, #1
 800107c:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8001080:	4293      	cmp	r3, r2
 8001082:	d3d2      	bcc.n	800102a <cmd_callback_help+0x4e>
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	37e4      	adds	r7, #228	@ 0xe4
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	0800d28c 	.word	0x0800d28c
 8001094:	0800d2a4 	.word	0x0800d2a4
 8001098:	0800d2d8 	.word	0x0800d2d8
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	0800d308 	.word	0x0800d308
 80010a4:	0800d2fc 	.word	0x0800d2fc

080010a8 <cmd_callback_reset>:

COMMAND(reset, "resets the microcontroller")
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff70 	bl	8000f98 <_discardWarning>
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f7ff ff6d 	bl	8000f98 <_discardWarning>
	HAL_NVIC_SystemReset();
 80010be:	f003 fe2e 	bl	8004d1e <HAL_NVIC_SystemReset>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_bckspace>:
const uint16_t built_in_commands_nb = sizeof(built_in_commands) / sizeof(built_in_commands[0]);

// ============================= Cursor control functions ============================= //

//TODO : manque un \b pour son utilisation avec autocomplete (y'a un \b renvoyé quand on le fait avec le terminal)
static void _bckspace(console_t* c, uint16_t amount){
 80010ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	466b      	mov	r3, sp
 80010da:	461e      	mov	r6, r3
	uint8_t clear[amount*2];
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	0059      	lsls	r1, r3, #1
 80010e0:	1e4b      	subs	r3, r1, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	460a      	mov	r2, r1
 80010e6:	2300      	movs	r3, #0
 80010e8:	4690      	mov	r8, r2
 80010ea:	4699      	mov	r9, r3
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001100:	460a      	mov	r2, r1
 8001102:	2300      	movs	r3, #0
 8001104:	4614      	mov	r4, r2
 8001106:	461d      	mov	r5, r3
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	00eb      	lsls	r3, r5, #3
 8001112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001116:	00e2      	lsls	r2, r4, #3
 8001118:	460b      	mov	r3, r1
 800111a:	3307      	adds	r3, #7
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	ebad 0d03 	sub.w	sp, sp, r3
 8001124:	466b      	mov	r3, sp
 8001126:	3300      	adds	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i < amount*2; i += 2){
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e00c      	b.n	800114a <_bckspace+0x80>
		clear[i] = ' ';
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	4413      	add	r3, r2
 8001136:	2220      	movs	r2, #32
 8001138:	701a      	strb	r2, [r3, #0]
		clear[i+1] = '\b';
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	2108      	movs	r1, #8
 8001142:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i = 0; i < amount*2; i += 2){
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3302      	adds	r3, #2
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	461a      	mov	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4293      	cmp	r3, r2
 8001154:	d3ec      	bcc.n	8001130 <_bckspace+0x66>
	}
	HAL_UART_Transmit(c->huart, clear, amount*2, 1000);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	b29a      	uxth	r2, r3
 8001160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	f008 fcc0 	bl	8009aea <HAL_UART_Transmit>
 800116a:	46b5      	mov	sp, r6
}
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001176 <_compare>:

static bool _compare(char* data, const char* ref, uint16_t length){ // compare a string to a reference (basically strcmp but with a length argument)
 8001176:	b480      	push	{r7}
 8001178:	b087      	sub	sp, #28
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	4613      	mov	r3, r2
 8001182:	80fb      	strh	r3, [r7, #6]
	if(length == 0) return 0;
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <_compare+0x18>
 800118a:	2300      	movs	r3, #0
 800118c:	e016      	b.n	80011bc <_compare+0x46>
	for(uint16_t i = 0; i < length; i++){
 800118e:	2300      	movs	r3, #0
 8001190:	82fb      	strh	r3, [r7, #22]
 8001192:	e00e      	b.n	80011b2 <_compare+0x3c>
		if(data[i] - ref[i] != 0) return 0;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	8afb      	ldrh	r3, [r7, #22]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	440b      	add	r3, r1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d001      	beq.n	80011ac <_compare+0x36>
 80011a8:	2300      	movs	r3, #0
 80011aa:	e007      	b.n	80011bc <_compare+0x46>
	for(uint16_t i = 0; i < length; i++){
 80011ac:	8afb      	ldrh	r3, [r7, #22]
 80011ae:	3301      	adds	r3, #1
 80011b0:	82fb      	strh	r3, [r7, #22]
 80011b2:	8afa      	ldrh	r2, [r7, #22]
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3ec      	bcc.n	8001194 <_compare+0x1e>
	}
	return 1;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <autoComplete>:

// ============================= User quality of life ============================= //

static void autoComplete(console_t* c){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
			c->autocomp_length = c->length + autocmp_lght;
			break;
		}
	}
#endif
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <parseArgs>:

// ============================= Main parser ============================= //

static void parseArgs(uint16_t cmd_indx, uint16_t arg_indx, char* string, uint32_t str_lgth){
 80011dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011e0:	b087      	sub	sp, #28
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	4603      	mov	r3, r0
 80011ea:	81fb      	strh	r3, [r7, #14]
 80011ec:	460b      	mov	r3, r1
 80011ee:	81bb      	strh	r3, [r7, #12]
 80011f0:	466b      	mov	r3, sp
 80011f2:	461e      	mov	r6, r3
	if(str_lgth == 0) return;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d066      	beq.n	80012c8 <parseArgs+0xec>
	// prepare a buffer containing only the argument
	char arg[str_lgth +1];
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1c59      	adds	r1, r3, #1
 80011fe:	460b      	mov	r3, r1
 8001200:	3b01      	subs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	2300      	movs	r3, #0
 8001206:	4688      	mov	r8, r1
 8001208:	4699      	mov	r9, r3
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800121a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800121e:	2300      	movs	r3, #0
 8001220:	460c      	mov	r4, r1
 8001222:	461d      	mov	r5, r3
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	00eb      	lsls	r3, r5, #3
 800122e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001232:	00e2      	lsls	r2, r4, #3
 8001234:	1dcb      	adds	r3, r1, #7
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	ebad 0d03 	sub.w	sp, sp, r3
 800123e:	466b      	mov	r3, sp
 8001240:	3300      	adds	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
	memcpy(arg, string, str_lgth);
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6938      	ldr	r0, [r7, #16]
 800124a:	f00a fcb0 	bl	800bbae <memcpy>
	arg[str_lgth] = '\0';
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]

	printf("arg %s\n",arg);
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	481e      	ldr	r0, [pc, #120]	@ (80012d4 <parseArgs+0xf8>)
 800125c:	f00a fa94 	bl	800b788 <iprintf>

	// then, extract
	memcpy(commands[cmd_indx]->args[arg_indx].s, arg, str_lgth+1);
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <parseArgs+0xfc>)
 8001264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001268:	89bb      	ldrh	r3, [r7, #12]
 800126a:	2134      	movs	r1, #52	@ 0x34
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	3310      	adds	r3, #16
 8001272:	4413      	add	r3, r2
 8001274:	f103 000d 	add.w	r0, r3, #13
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	461a      	mov	r2, r3
 800127e:	6939      	ldr	r1, [r7, #16]
 8001280:	f00a fc95 	bl	800bbae <memcpy>
	sscanf(arg, "%d", &(commands[cmd_indx]->args[arg_indx].d));
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <parseArgs+0xfc>)
 8001288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	2134      	movs	r1, #52	@ 0x34
 8001290:	fb01 f303 	mul.w	r3, r1, r3
 8001294:	3308      	adds	r3, #8
 8001296:	4413      	add	r3, r2
 8001298:	330c      	adds	r3, #12
 800129a:	461a      	mov	r2, r3
 800129c:	490f      	ldr	r1, [pc, #60]	@ (80012dc <parseArgs+0x100>)
 800129e:	6938      	ldr	r0, [r7, #16]
 80012a0:	f00a fb04 	bl	800b8ac <siscanf>
	sscanf(arg, "%u", &(commands[cmd_indx]->args[arg_indx].u));
 80012a4:	89fb      	ldrh	r3, [r7, #14]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <parseArgs+0xfc>)
 80012a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ac:	89bb      	ldrh	r3, [r7, #12]
 80012ae:	2134      	movs	r1, #52	@ 0x34
 80012b0:	fb01 f303 	mul.w	r3, r1, r3
 80012b4:	3310      	adds	r3, #16
 80012b6:	4413      	add	r3, r2
 80012b8:	3308      	adds	r3, #8
 80012ba:	461a      	mov	r2, r3
 80012bc:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <parseArgs+0x104>)
 80012be:	6938      	ldr	r0, [r7, #16]
 80012c0:	f00a faf4 	bl	800b8ac <siscanf>
 80012c4:	46b5      	mov	sp, r6
 80012c6:	e000      	b.n	80012ca <parseArgs+0xee>
	if(str_lgth == 0) return;
 80012c8:	46b5      	mov	sp, r6

}
 80012ca:	371c      	adds	r7, #28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012d2:	bf00      	nop
 80012d4:	0800d330 	.word	0x0800d330
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	0800d338 	.word	0x0800d338
 80012e0:	0800d33c 	.word	0x0800d33c

080012e4 <parse>:

static void parse(console_t* c){
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b08e      	sub	sp, #56	@ 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	uint16_t command_lgth = 0; // actual text part of the command
 80012ec:	2300      	movs	r3, #0
 80012ee:	86fb      	strh	r3, [r7, #54]	@ 0x36


	while(c->rx_buf[command_lgth] != '(' && command_lgth < c->length) command_lgth++;
 80012f0:	e002      	b.n	80012f8 <parse+0x14>
 80012f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80012f4:	3301      	adds	r3, #1
 80012f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80012f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	2b28      	cmp	r3, #40	@ 0x28
 8001302:	d005      	beq.n	8001310 <parse+0x2c>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800130a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800130c:	429a      	cmp	r2, r3
 800130e:	d3f0      	bcc.n	80012f2 <parse+0xe>

	// check for built in commands
	for(uint16_t i = 0; i < built_in_commands_nb; i++){
 8001310:	2300      	movs	r3, #0
 8001312:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001314:	e051      	b.n	80013ba <parse+0xd6>
		if(_compare(c->rx_buf, built_in_commands[i]->name, command_lgth) && command_lgth == strlen(built_in_commands[i]->name)) { // figure out which command has been typed
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	1d18      	adds	r0, r3, #4
 800131a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800131c:	4a7a      	ldr	r2, [pc, #488]	@ (8001508 <parse+0x224>)
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff ff25 	bl	8001176 <_compare>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d040      	beq.n	80013b4 <parse+0xd0>
 8001332:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 8001334:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001336:	4a74      	ldr	r2, [pc, #464]	@ (8001508 <parse+0x224>)
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ff6e 	bl	8000220 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	429c      	cmp	r4, r3
 8001348:	d134      	bne.n	80013b4 <parse+0xd0>

			// Confirm to the user that the command has been recognized
			HAL_UART_Transmit(c->huart, (uint8_t*) "> (built in) ", 13, 1000);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	220d      	movs	r2, #13
 8001354:	496d      	ldr	r1, [pc, #436]	@ (800150c <parse+0x228>)
 8001356:	f008 fbc8 	bl	8009aea <HAL_UART_Transmit>
			HAL_UART_Transmit(c->huart, (uint8_t*) built_in_commands[i]->name, strlen(built_in_commands[i]->name), 1000);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681c      	ldr	r4, [r3, #0]
 800135e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001360:	4a69      	ldr	r2, [pc, #420]	@ (8001508 <parse+0x224>)
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	681d      	ldr	r5, [r3, #0]
 8001368:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800136a:	4a67      	ldr	r2, [pc, #412]	@ (8001508 <parse+0x224>)
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7fe ff54 	bl	8000220 <strlen>
 8001378:	4603      	mov	r3, r0
 800137a:	b29a      	uxth	r2, r3
 800137c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001380:	4629      	mov	r1, r5
 8001382:	4620      	mov	r0, r4
 8001384:	f008 fbb1 	bl	8009aea <HAL_UART_Transmit>
			HAL_UART_Transmit(c->huart, (uint8_t*) END_OF_LINE, sizeof(END_OF_LINE), 1000);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001390:	2202      	movs	r2, #2
 8001392:	495f      	ldr	r1, [pc, #380]	@ (8001510 <parse+0x22c>)
 8001394:	f008 fba9 	bl	8009aea <HAL_UART_Transmit>

			// then, execute the corresponding function
			(*(built_in_commands[i]->callback))(built_in_commands[i]->args, c);
 8001398:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800139a:	4a5b      	ldr	r2, [pc, #364]	@ (8001508 <parse+0x224>)
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80013a4:	4958      	ldr	r1, [pc, #352]	@ (8001508 <parse+0x224>)
 80013a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013aa:	320c      	adds	r2, #12
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	4610      	mov	r0, r2
 80013b0:	4798      	blx	r3

			return;
 80013b2:	e0a6      	b.n	8001502 <parse+0x21e>
	for(uint16_t i = 0; i < built_in_commands_nb; i++){
 80013b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013b6:	3301      	adds	r3, #1
 80013b8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80013ba:	2202      	movs	r2, #2
 80013bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013be:	4293      	cmp	r3, r2
 80013c0:	d3a9      	bcc.n	8001316 <parse+0x32>
		}
	}

	for(uint16_t i = 0; i < commands_nb; i++){
 80013c2:	2300      	movs	r3, #0
 80013c4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80013c6:	e084      	b.n	80014d2 <parse+0x1ee>
		if(_compare(c->rx_buf, commands[i]->name, command_lgth) && command_lgth == strlen(commands[i]->name)) { // figure out which command has been typed
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	1d18      	adds	r0, r3, #4
 80013cc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013ce:	4a51      	ldr	r2, [pc, #324]	@ (8001514 <parse+0x230>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fecc 	bl	8001176 <_compare>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d073      	beq.n	80014cc <parse+0x1e8>
 80013e4:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 80013e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001514 <parse+0x230>)
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe ff15 	bl	8000220 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	429c      	cmp	r4, r3
 80013fa:	d167      	bne.n	80014cc <parse+0x1e8>
			// and get all the parameters

			uint16_t arg_cursor = command_lgth +1; // skip the '('
 80013fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013fe:	3301      	adds	r3, #1
 8001400:	863b      	strh	r3, [r7, #48]	@ 0x30
			uint16_t old_arg_cursor = command_lgth +1;
 8001402:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001404:	3301      	adds	r3, #1
 8001406:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint16_t arg_count = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	85bb      	strh	r3, [r7, #44]	@ 0x2c

			while(arg_cursor < c->length){ // go trough the whole string
 800140c:	e023      	b.n	8001456 <parse+0x172>
				if(c->rx_buf[arg_cursor] == ',' || c->rx_buf[arg_cursor] == ')'){
 800140e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	791b      	ldrb	r3, [r3, #4]
 8001416:	2b2c      	cmp	r3, #44	@ 0x2c
 8001418:	d005      	beq.n	8001426 <parse+0x142>
 800141a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	791b      	ldrb	r3, [r3, #4]
 8001422:	2b29      	cmp	r3, #41	@ 0x29
 8001424:	d114      	bne.n	8001450 <parse+0x16c>
					arg_cursor++; // skip the control char
 8001426:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001428:	3301      	adds	r3, #1
 800142a:	863b      	strh	r3, [r7, #48]	@ 0x30

					parseArgs(i, arg_count, &(c->rx_buf[old_arg_cursor]), arg_cursor - old_arg_cursor -1);
 800142c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	1d1c      	adds	r4, r3, #4
 8001434:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001436:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	3b01      	subs	r3, #1
 800143c:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800143e:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8001440:	4622      	mov	r2, r4
 8001442:	f7ff fecb 	bl	80011dc <parseArgs>

					arg_count ++;
 8001446:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001448:	3301      	adds	r3, #1
 800144a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					old_arg_cursor = arg_cursor;
 800144c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800144e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
				}

				arg_cursor++; // get to next control char
 8001450:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001452:	3301      	adds	r3, #1
 8001454:	863b      	strh	r3, [r7, #48]	@ 0x30
			while(arg_cursor < c->length){ // go trough the whole string
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800145c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800145e:	429a      	cmp	r2, r3
 8001460:	d3d5      	bcc.n	800140e <parse+0x12a>
			}

			// Confirm to the user that the command has been recognized
			HAL_UART_Transmit(c->huart, (uint8_t*) "> ", 2, 1000);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146a:	2202      	movs	r2, #2
 800146c:	492a      	ldr	r1, [pc, #168]	@ (8001518 <parse+0x234>)
 800146e:	f008 fb3c 	bl	8009aea <HAL_UART_Transmit>
			HAL_UART_Transmit(c->huart, (uint8_t*) commands[i]->name, strlen(commands[i]->name), 1000);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681c      	ldr	r4, [r3, #0]
 8001476:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001478:	4a26      	ldr	r2, [pc, #152]	@ (8001514 <parse+0x230>)
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	681d      	ldr	r5, [r3, #0]
 8001480:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001482:	4a24      	ldr	r2, [pc, #144]	@ (8001514 <parse+0x230>)
 8001484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fec8 	bl	8000220 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001498:	4629      	mov	r1, r5
 800149a:	4620      	mov	r0, r4
 800149c:	f008 fb25 	bl	8009aea <HAL_UART_Transmit>
			HAL_UART_Transmit(c->huart, (uint8_t*) END_OF_LINE, sizeof(END_OF_LINE), 1000);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a8:	2202      	movs	r2, #2
 80014aa:	4919      	ldr	r1, [pc, #100]	@ (8001510 <parse+0x22c>)
 80014ac:	f008 fb1d 	bl	8009aea <HAL_UART_Transmit>

			// then, execute the corresponding function
			(*(commands[i]->callback))(commands[i]->args, c);
 80014b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80014b2:	4a18      	ldr	r2, [pc, #96]	@ (8001514 <parse+0x230>)
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80014bc:	4915      	ldr	r1, [pc, #84]	@ (8001514 <parse+0x230>)
 80014be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014c2:	320c      	adds	r2, #12
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4610      	mov	r0, r2
 80014c8:	4798      	blx	r3

			return;
 80014ca:	e01a      	b.n	8001502 <parse+0x21e>
	for(uint16_t i = 0; i < commands_nb; i++){
 80014cc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80014ce:	3301      	adds	r3, #1
 80014d0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80014d2:	2201      	movs	r2, #1
 80014d4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80014d6:	4293      	cmp	r3, r2
 80014d8:	f4ff af76 	bcc.w	80013c8 <parse+0xe4>
		}
	}

	char error_mess[] = {"> Error : Unknown command !" END_OF_LINE};
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <parse+0x238>)
 80014de:	f107 040c 	add.w	r4, r7, #12
 80014e2:	461d      	mov	r5, r3
 80014e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014ec:	c407      	stmia	r4!, {r0, r1, r2}
 80014ee:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(c->huart, (uint8_t*) error_mess, sizeof(error_mess), 1000);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	f107 010c 	add.w	r1, r7, #12
 80014f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fc:	221d      	movs	r2, #29
 80014fe:	f008 faf4 	bl	8009aea <HAL_UART_Transmit>
}
 8001502:	3738      	adds	r7, #56	@ 0x38
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	20000028 	.word	0x20000028
 800150c:	0800d340 	.word	0x0800d340
 8001510:	0800d308 	.word	0x0800d308
 8001514:	2000000c 	.word	0x2000000c
 8001518:	0800d350 	.word	0x0800d350
 800151c:	0800d354 	.word	0x0800d354

08001520 <consoleDataReady>:

// ============================= High level ============================= //

void consoleDataReady(console_t* c){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(c->huart, (uint8_t*) &(c->rx_buf[c->length]), 1, 1000);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	1d19      	adds	r1, r3, #4
 800153a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153e:	2201      	movs	r2, #1
 8001540:	f008 fad3 	bl	8009aea <HAL_UART_Transmit>

	switch(c->rx_buf[c->length]){ // check for control characters
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	791b      	ldrb	r3, [r3, #4]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d009      	beq.n	800156a <consoleDataReady+0x4a>
 8001556:	2b0d      	cmp	r3, #13
 8001558:	d119      	bne.n	800158e <consoleDataReady+0x6e>
	case '\r' :
		parse(c);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fec2 	bl	80012e4 <parse>
		c->length = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
		break;
 8001568:	e022      	b.n	80015b0 <consoleDataReady+0x90>

	case '\b' :
		_bckspace(c, 1);
 800156a:	2101      	movs	r1, #1
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fdac 	bl	80010ca <_bckspace>
		if(c->length > 0) c->length--;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001578:	2b00      	cmp	r3, #0
 800157a:	d016      	beq.n	80015aa <consoleDataReady+0x8a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
		break;
 800158c:	e00d      	b.n	80015aa <consoleDataReady+0x8a>

	default : // anything else
		if(c->length < RX_BUFFER_SIZE -1) c->length++;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001594:	2bfe      	cmp	r3, #254	@ 0xfe
 8001596:	d80a      	bhi.n	80015ae <consoleDataReady+0x8e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800159e:	3301      	adds	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
		break;
 80015a8:	e001      	b.n	80015ae <consoleDataReady+0x8e>
		break;
 80015aa:	bf00      	nop
 80015ac:	e000      	b.n	80015b0 <consoleDataReady+0x90>
		break;
 80015ae:	bf00      	nop
	}

	autoComplete(c);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fe09 	bl	80011c8 <autoComplete>

	HAL_UART_Receive_IT(c->huart, (uint8_t*) &(c->rx_buf[c->length]), 1);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	3304      	adds	r3, #4
 80015c8:	2201      	movs	r2, #1
 80015ca:	4619      	mov	r1, r3
 80015cc:	f008 fb1c 	bl	8009c08 <HAL_UART_Receive_IT>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <consoleInit>:

void consoleInit(console_t* c){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	c->length = 0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	c->autocomp_length = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106

	HAL_UART_Receive_IT(c->huart, (uint8_t*) &(c->rx_buf[c->length]), 1);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80015fa:	461a      	mov	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	3304      	adds	r3, #4
 8001602:	2201      	movs	r2, #1
 8001604:	4619      	mov	r1, r3
 8001606:	f008 faff 	bl	8009c08 <HAL_UART_Receive_IT>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <loop_init>:

#include "loop.h"


void loop_init(loop_t *loop, number_t avg_delta_time_weight)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	ed87 0a00 	vstr	s0, [r7]
	loop->avg_delta_time = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
	loop->ellapsed_time = 0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
	loop->avg_delta_time_weight = avg_delta_time_weight;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	609a      	str	r2, [r3, #8]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <loop_tick>:


void loop_tick(loop_t* loop, number_t delta_time)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	ed87 0a00 	vstr	s0, [r7]
	loop->ellapsed_time += delta_time;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	edd7 7a00 	vldr	s15, [r7]
 8001656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edc3 7a00 	vstr	s15, [r3]
	if (loop->avg_delta_time == 0)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	edd3 7a01 	vldr	s15, [r3, #4]
 8001666:	eef5 7a40 	vcmp.f32	s15, #0.0
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d103      	bne.n	8001678 <loop_tick+0x38>
	{
		loop->avg_delta_time = delta_time;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	605a      	str	r2, [r3, #4]
	else
	{
		// Compute temporal average for delta time
		loop->avg_delta_time = (1.0 - loop->avg_delta_time_weight) * loop->avg_delta_time + loop->avg_delta_time_weight * delta_time;
	}
}
 8001676:	e038      	b.n	80016ea <loop_tick+0xaa>
		loop->avg_delta_time = (1.0 - loop->avg_delta_time_weight) * loop->avg_delta_time + loop->avg_delta_time_weight * delta_time;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff8b 	bl	8000598 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	f04f 0000 	mov.w	r0, #0
 800168a:	491a      	ldr	r1, [pc, #104]	@ (80016f4 <loop_tick+0xb4>)
 800168c:	f7fe fe24 	bl	80002d8 <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4614      	mov	r4, r2
 8001696:	461d      	mov	r5, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff7b 	bl	8000598 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4620      	mov	r0, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	f7fe ffcd 	bl	8000648 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4614      	mov	r4, r2
 80016b4:	461d      	mov	r5, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80016bc:	edd7 7a00 	vldr	s15, [r7]
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	ee17 0a90 	vmov	r0, s15
 80016c8:	f7fe ff66 	bl	8000598 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4620      	mov	r0, r4
 80016d2:	4629      	mov	r1, r5
 80016d4:	f7fe fe02 	bl	80002dc <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff fa74 	bl	8000bcc <__aeabi_d2f>
 80016e4:	4602      	mov	r2, r0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bdb0      	pop	{r4, r5, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	3ff00000 	.word	0x3ff00000

080016f8 <loop_get_avg_delta_time>:


number_t loop_get_avg_delta_time(const loop_t* loop)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	return loop->avg_delta_time;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	ee07 3a90 	vmov	s15, r3
}
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <_write>:
int __io_putchar(char c) {
	HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, HAL_MAX_DELAY);
	return c;
}

int _write(int file, char *ptr, int len) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	(void) file;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b29a      	uxth	r2, r3
 8001728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	4804      	ldr	r0, [pc, #16]	@ (8001740 <_write+0x28>)
 8001730:	f008 f9db 	bl	8009aea <HAL_UART_Transmit>
	return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200004ac 	.word	0x200004ac

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001748:	f002 f98d 	bl	8003a66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174c:	f000 f828 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001750:	f000 fc16 	bl	8001f80 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001754:	f000 f872 	bl	800183c <MX_ADC2_Init>
  MX_FDCAN2_Init();
 8001758:	f000 f8d6 	bl	8001908 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800175c:	f000 f91a 	bl	8001994 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001760:	f000 f958 	bl	8001a14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001764:	f000 f9ea 	bl	8001b3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001768:	f000 fa42 	bl	8001bf0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800176c:	f000 fb94 	bl	8001e98 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8001770:	f000 fbde 	bl	8001f30 <MX_USB_PCD_Init>
  MX_TIM4_Init();
 8001774:	f000 fa96 	bl	8001ca4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8001778:	f000 fae4 	bl	8001d44 <MX_TIM15_Init>
  MX_TIM20_Init();
 800177c:	f000 fb36 	bl	8001dec <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
  printf("HAL init done\n\r");
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <main+0x54>)
 8001782:	f00a f801 	bl	800b788 <iprintf>
  setup();
 8001786:	f001 f84d 	bl	8002824 <setup>
  printf("Setup done\n\r");
 800178a:	4804      	ldr	r0, [pc, #16]	@ (800179c <main+0x58>)
 800178c:	f009 fffc 	bl	800b788 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001790:	f001 f8b0 	bl	80028f4 <loop>
 8001794:	e7fc      	b.n	8001790 <main+0x4c>
 8001796:	bf00      	nop
 8001798:	0800d374 	.word	0x0800d374
 800179c:	0800d384 	.word	0x0800d384

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	@ 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	2238      	movs	r2, #56	@ 0x38
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00a f982 	bl	800bab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f005 fd0e 	bl	80071e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80017c8:	2322      	movs	r3, #34	@ 0x22
 80017ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d2:	2340      	movs	r3, #64	@ 0x40
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017d6:	2301      	movs	r3, #1
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017de:	2302      	movs	r3, #2
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80017e6:	2315      	movs	r3, #21
 80017e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017f2:	2302      	movs	r3, #2
 80017f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f6:	f107 0318 	add.w	r3, r7, #24
 80017fa:	4618      	mov	r0, r3
 80017fc:	f005 fda6 	bl	800734c <HAL_RCC_OscConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001806:	f000 fc1d 	bl	8002044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	230f      	movs	r3, #15
 800180c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180e:	2303      	movs	r3, #3
 8001810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2104      	movs	r1, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f006 f8a4 	bl	8007970 <HAL_RCC_ClockConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800182e:	f000 fc09 	bl	8002044 <Error_Handler>
  }
}
 8001832:	bf00      	nop
 8001834:	3750      	adds	r7, #80	@ 0x50
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2220      	movs	r2, #32
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00a f935 	bl	800bab8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800184e:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <MX_ADC2_Init+0xc0>)
 8001850:	4a2b      	ldr	r2, [pc, #172]	@ (8001900 <MX_ADC2_Init+0xc4>)
 8001852:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <MX_ADC2_Init+0xc0>)
 8001856:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800185a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800185c:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <MX_ADC2_Init+0xc0>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001862:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <MX_ADC2_Init+0xc0>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001868:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <MX_ADC2_Init+0xc0>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800186e:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <MX_ADC2_Init+0xc0>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001874:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <MX_ADC2_Init+0xc0>)
 8001876:	2204      	movs	r2, #4
 8001878:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <MX_ADC2_Init+0xc0>)
 800187c:	2200      	movs	r2, #0
 800187e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001880:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <MX_ADC2_Init+0xc0>)
 8001882:	2200      	movs	r2, #0
 8001884:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001886:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <MX_ADC2_Init+0xc0>)
 8001888:	2201      	movs	r2, #1
 800188a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800188c:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <MX_ADC2_Init+0xc0>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <MX_ADC2_Init+0xc0>)
 8001896:	2200      	movs	r2, #0
 8001898:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800189a:	4b18      	ldr	r3, [pc, #96]	@ (80018fc <MX_ADC2_Init+0xc0>)
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018a0:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <MX_ADC2_Init+0xc0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <MX_ADC2_Init+0xc0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <MX_ADC2_Init+0xc0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018b6:	4811      	ldr	r0, [pc, #68]	@ (80018fc <MX_ADC2_Init+0xc0>)
 80018b8:	f002 fb3e 	bl	8003f38 <HAL_ADC_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80018c2:	f000 fbbf 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_ADC2_Init+0xc8>)
 80018c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ca:	2306      	movs	r3, #6
 80018cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018d2:	237f      	movs	r3, #127	@ 0x7f
 80018d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018d6:	2304      	movs	r3, #4
 80018d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	@ (80018fc <MX_ADC2_Init+0xc0>)
 80018e4:	f002 fcd6 	bl	8004294 <HAL_ADC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80018ee:	f000 fba9 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001c0 	.word	0x200001c0
 8001900:	50000100 	.word	0x50000100
 8001904:	08600004 	.word	0x08600004

08001908 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <MX_FDCAN2_Init+0x84>)
 800190e:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <MX_FDCAN2_Init+0x88>)
 8001910:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001912:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <MX_FDCAN2_Init+0x84>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800191e:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001926:	2200      	movs	r2, #0
 8001928:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <MX_FDCAN2_Init+0x84>)
 800192c:	2200      	movs	r2, #0
 800192e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001932:	2200      	movs	r2, #0
 8001934:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001938:	2210      	movs	r2, #16
 800193a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <MX_FDCAN2_Init+0x84>)
 800193e:	2201      	movs	r2, #1
 8001940:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8001942:	4b12      	ldr	r3, [pc, #72]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001944:	2201      	movs	r2, #1
 8001946:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8001948:	4b10      	ldr	r3, [pc, #64]	@ (800198c <MX_FDCAN2_Init+0x84>)
 800194a:	2201      	movs	r2, #1
 800194c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800194e:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001950:	2201      	movs	r2, #1
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001954:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001956:	2201      	movs	r2, #1
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800195a:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <MX_FDCAN2_Init+0x84>)
 800195c:	2201      	movs	r2, #1
 800195e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001960:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001962:	2201      	movs	r2, #1
 8001964:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001966:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001968:	2200      	movs	r2, #0
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800196c:	4b07      	ldr	r3, [pc, #28]	@ (800198c <MX_FDCAN2_Init+0x84>)
 800196e:	2200      	movs	r2, #0
 8001970:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_FDCAN2_Init+0x84>)
 8001974:	2200      	movs	r2, #0
 8001976:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001978:	4804      	ldr	r0, [pc, #16]	@ (800198c <MX_FDCAN2_Init+0x84>)
 800197a:	f003 fa55 	bl	8004e28 <HAL_FDCAN_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001984:	f000 fb5e 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000022c 	.word	0x2000022c
 8001990:	40006800 	.word	0x40006800

08001994 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <MX_I2C2_Init+0x74>)
 800199a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <MX_I2C2_Init+0x78>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x50916E9F;
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <MX_I2C2_Init+0x7c>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019ce:	480e      	ldr	r0, [pc, #56]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019d0:	f003 fd80 	bl	80054d4 <HAL_I2C_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019da:	f000 fb33 	bl	8002044 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019de:	2100      	movs	r1, #0
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019e2:	f005 fa6f 	bl	8006ec4 <HAL_I2CEx_ConfigAnalogFilter>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80019ec:	f000 fb2a 	bl	8002044 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80019f0:	2100      	movs	r1, #0
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019f4:	f005 fab1 	bl	8006f5a <HAL_I2CEx_ConfigDigitalFilter>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80019fe:	f000 fb21 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000290 	.word	0x20000290
 8001a0c:	40005800 	.word	0x40005800
 8001a10:	50916e9f 	.word	0x50916e9f

08001a14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b098      	sub	sp, #96	@ 0x60
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2234      	movs	r2, #52	@ 0x34
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00a f839 	bl	800bab8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a46:	4b3b      	ldr	r3, [pc, #236]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a48:	4a3b      	ldr	r2, [pc, #236]	@ (8001b38 <MX_TIM1_Init+0x124>)
 8001a4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a4c:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b38      	ldr	r3, [pc, #224]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a58:	4b36      	ldr	r3, [pc, #216]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b34      	ldr	r3, [pc, #208]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a66:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b31      	ldr	r3, [pc, #196]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a72:	4830      	ldr	r0, [pc, #192]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a74:	f006 fc2b 	bl	80082ce <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a7e:	f000 fae1 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a82:	2320      	movs	r3, #32
 8001a84:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a92:	4619      	mov	r1, r3
 8001a94:	4827      	ldr	r0, [pc, #156]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001a96:	f007 fe4b 	bl	8009730 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001aa0:	f000 fad0 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa4:	2360      	movs	r3, #96	@ 0x60
 8001aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aac:	2300      	movs	r3, #0
 8001aae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ac0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	481a      	ldr	r0, [pc, #104]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001aca:	f006 feb3 	bl	8008834 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ad4:	f000 fab6 	bl	8002044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001b16:	f007 fe99 	bl	800984c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001b20:	f000 fa90 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b24:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <MX_TIM1_Init+0x120>)
 8001b26:	f001 fcff 	bl	8003528 <HAL_TIM_MspPostInit>

}
 8001b2a:	bf00      	nop
 8001b2c:	3760      	adds	r7, #96	@ 0x60
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200002e4 	.word	0x200002e4
 8001b38:	40012c00 	.word	0x40012c00

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b60:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001b62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b68:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001b76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b88:	4818      	ldr	r0, [pc, #96]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001b8a:	f006 fba0 	bl	80082ce <HAL_TIM_PWM_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b94:	f000 fa56 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4811      	ldr	r0, [pc, #68]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001ba8:	f007 fdc2 	bl	8009730 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001bb2:	f000 fa47 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	@ 0x60
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001bce:	f006 fe31 	bl	8008834 <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001bd8:	f000 fa34 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bdc:	4803      	ldr	r0, [pc, #12]	@ (8001bec <MX_TIM2_Init+0xb0>)
 8001bde:	f001 fca3 	bl	8003528 <HAL_TIM_MspPostInit>

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	@ 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000330 	.word	0x20000330

08001bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	@ 0x28
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]
 8001c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c14:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c16:	4a22      	ldr	r2, [pc, #136]	@ (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3a:	4818      	ldr	r0, [pc, #96]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c3c:	f006 fb47 	bl	80082ce <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c46:	f000 f9fd 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4810      	ldr	r0, [pc, #64]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c5a:	f007 fd69 	bl	8009730 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c64:	f000 f9ee 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c68:	2360      	movs	r3, #96	@ 0x60
 8001c6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4807      	ldr	r0, [pc, #28]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c80:	f006 fdd8 	bl	8008834 <HAL_TIM_PWM_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001c8a:	f000 f9db 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c8e:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <MX_TIM3_Init+0xac>)
 8001c90:	f001 fc4a 	bl	8003528 <HAL_TIM_MspPostInit>

}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	@ 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000037c 	.word	0x2000037c
 8001ca0:	40000400 	.word	0x40000400

08001ca4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <MX_TIM4_Init+0x9c>)
 8001cc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001cd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cea:	4814      	ldr	r0, [pc, #80]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001cec:	f006 fa98 	bl	8008220 <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001cf6:	f000 f9a5 	bl	8002044 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001d0a:	f006 fea7 	bl	8008a5c <HAL_TIM_SlaveConfigSynchro>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001d14:	f000 f996 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_TIM4_Init+0x98>)
 8001d26:	f007 fd03 	bl	8009730 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001d30:	f000 f988 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200003c8 	.word	0x200003c8
 8001d40:	40000800 	.word	0x40000800

08001d44 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001d66:	4a20      	ldr	r2, [pc, #128]	@ (8001de8 <MX_TIM15_Init+0xa4>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001d76:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001d78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d84:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d90:	4814      	ldr	r0, [pc, #80]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001d92:	f006 fa45 	bl	8008220 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001d9c:	f000 f952 	bl	8002044 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001da0:	2307      	movs	r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001da4:	2320      	movs	r3, #32
 8001da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	4619      	mov	r1, r3
 8001dae:	480d      	ldr	r0, [pc, #52]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001db0:	f006 fe54 	bl	8008a5c <HAL_TIM_SlaveConfigSynchro>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8001dba:	f000 f943 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <MX_TIM15_Init+0xa0>)
 8001dcc:	f007 fcb0 	bl	8009730 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8001dd6:	f000 f935 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000414 	.word	0x20000414
 8001de8:	40014000 	.word	0x40014000

08001dec <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e0e:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <MX_TIM20_Init+0xa8>)
 8001e10:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001e12:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e24:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001e38:	4815      	ldr	r0, [pc, #84]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e3a:	f006 f9f1 	bl	8008220 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM20_Init+0x5c>
  {
    Error_Handler();
 8001e44:	f000 f8fe 	bl	8002044 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001e48:	2307      	movs	r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4619      	mov	r1, r3
 8001e56:	480e      	ldr	r0, [pc, #56]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e58:	f006 fe00 	bl	8008a5c <HAL_TIM_SlaveConfigSynchro>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM20_Init+0x7a>
  {
    Error_Handler();
 8001e62:	f000 f8ef 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001e72:	463b      	mov	r3, r7
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <MX_TIM20_Init+0xa4>)
 8001e78:	f007 fc5a 	bl	8009730 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM20_Init+0x9a>
  {
    Error_Handler();
 8001e82:	f000 f8df 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000460 	.word	0x20000460
 8001e94:	40015000 	.word	0x40015000

08001e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001e9e:	4a23      	ldr	r2, [pc, #140]	@ (8001f2c <MX_USART2_UART_Init+0x94>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ee0:	4811      	ldr	r0, [pc, #68]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ee2:	f007 fdb2 	bl	8009a4a <HAL_UART_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001eec:	f000 f8aa 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ef4:	f009 fa81 	bl	800b3fa <HAL_UARTEx_SetTxFifoThreshold>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001efe:	f000 f8a1 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f02:	2100      	movs	r1, #0
 8001f04:	4808      	ldr	r0, [pc, #32]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001f06:	f009 fab6 	bl	800b476 <HAL_UARTEx_SetRxFifoThreshold>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f10:	f000 f898 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_USART2_UART_Init+0x90>)
 8001f16:	f009 fa37 	bl	800b388 <HAL_UARTEx_DisableFifoMode>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f20:	f000 f890 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200004ac 	.word	0x200004ac
 8001f2c:	40004400 	.word	0x40004400

08001f30 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001f34:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f36:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <MX_USB_PCD_Init+0x4c>)
 8001f38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001f40:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001f64:	4804      	ldr	r0, [pc, #16]	@ (8001f78 <MX_USB_PCD_Init+0x48>)
 8001f66:	f005 f844 	bl	8006ff2 <HAL_PCD_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001f70:	f000 f868 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000540 	.word	0x20000540
 8001f7c:	40005c00 	.word	0x40005c00

08001f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
 8001f94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b29      	ldr	r3, [pc, #164]	@ (800203c <MX_GPIO_Init+0xbc>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	4a28      	ldr	r2, [pc, #160]	@ (800203c <MX_GPIO_Init+0xbc>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <MX_GPIO_Init+0xbc>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b23      	ldr	r3, [pc, #140]	@ (800203c <MX_GPIO_Init+0xbc>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	4a22      	ldr	r2, [pc, #136]	@ (800203c <MX_GPIO_Init+0xbc>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <MX_GPIO_Init+0xbc>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_DIR_C_Pin|MOTOR_DIR_A_Pin, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f248 0121 	movw	r1, #32801	@ 0x8021
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd0:	f003 fa68 	bl	80054a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR_B_Pin|STATUS_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2190      	movs	r1, #144	@ 0x90
 8001fd8:	4819      	ldr	r0, [pc, #100]	@ (8002040 <MX_GPIO_Init+0xc0>)
 8001fda:	f003 fa63 	bl	80054a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_EN_Pin MOTOR_DIR_C_Pin MOTOR_DIR_A_Pin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_C_Pin|MOTOR_DIR_A_Pin;
 8001fde:	f248 0321 	movw	r3, #32801	@ 0x8021
 8001fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffa:	f003 f8d1 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AU_Pin */
  GPIO_InitStruct.Pin = AU_Pin;
 8001ffe:	2301      	movs	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002002:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AU_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4619      	mov	r1, r3
 8002012:	480b      	ldr	r0, [pc, #44]	@ (8002040 <MX_GPIO_Init+0xc0>)
 8002014:	f003 f8c4 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_B_Pin STATUS_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_B_Pin|STATUS_Pin;
 8002018:	2390      	movs	r3, #144	@ 0x90
 800201a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	4804      	ldr	r0, [pc, #16]	@ (8002040 <MX_GPIO_Init+0xc0>)
 8002030:	f003 f8b6 	bl	80051a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002034:	bf00      	nop
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	48000400 	.word	0x48000400

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002048:	b672      	cpsid	i
}
 800204a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <Error_Handler+0x8>

08002050 <misc_abs>:
{
	return sqrtf(x);
}

static inline number_t misc_abs(number_t x)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	ed87 0a01 	vstr	s0, [r7, #4]
	return x >= 0 ? x : -x;
 800205a:	edd7 7a01 	vldr	s15, [r7, #4]
 800205e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	db02      	blt.n	800206e <misc_abs+0x1e>
 8002068:	edd7 7a01 	vldr	s15, [r7, #4]
 800206c:	e003      	b.n	8002076 <misc_abs+0x26>
 800206e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002072:	eef1 7a67 	vneg.f32	s15, s15
}
 8002076:	eeb0 0a67 	vmov.f32	s0, s15
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <misc_max>:

static inline number_t misc_max(number_t a, number_t b) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	ed87 0a01 	vstr	s0, [r7, #4]
 800208e:	edc7 0a00 	vstr	s1, [r7]
	return a > b ? a : b;
 8002092:	ed97 7a01 	vldr	s14, [r7, #4]
 8002096:	edd7 7a00 	vldr	s15, [r7]
 800209a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	dd01      	ble.n	80020a8 <misc_max+0x24>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	e000      	b.n	80020aa <misc_max+0x26>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	ee07 3a90 	vmov	s15, r3
}
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <misc_min>:

static inline number_t misc_min(number_t a, number_t b) {
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020c6:	edc7 0a00 	vstr	s1, [r7]
	return a < b ? a : b;
 80020ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80020ce:	edd7 7a00 	vldr	s15, [r7]
 80020d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d501      	bpl.n	80020e0 <misc_min+0x24>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	e000      	b.n	80020e2 <misc_min+0x26>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	ee07 3a90 	vmov	s15, r3
}
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <misc_sign>:

static inline number_t misc_sign(number_t x) {
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	ed87 0a01 	vstr	s0, [r7, #4]
	return x >= 0 ? 1 : -1;
 80020fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	db02      	blt.n	8002112 <misc_sign+0x1e>
 800210c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002110:	e000      	b.n	8002114 <misc_sign+0x20>
 8002112:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <misc_sign+0x34>)
 8002114:	ee07 3a90 	vmov	s15, r3
}
 8002118:	eeb0 0a67 	vmov.f32	s0, s15
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	bf800000 	.word	0xbf800000

0800212c <misc_clamp>:

static inline number_t misc_clamp(number_t v, number_t min_v, number_t max_v)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	ed87 0a03 	vstr	s0, [r7, #12]
 8002136:	edc7 0a02 	vstr	s1, [r7, #8]
 800213a:	ed87 1a01 	vstr	s2, [r7, #4]
    return misc_min(misc_max(v, min_v), max_v);
 800213e:	edd7 0a02 	vldr	s1, [r7, #8]
 8002142:	ed97 0a03 	vldr	s0, [r7, #12]
 8002146:	f7ff ff9d 	bl	8002084 <misc_max>
 800214a:	eef0 7a40 	vmov.f32	s15, s0
 800214e:	edd7 0a01 	vldr	s1, [r7, #4]
 8002152:	eeb0 0a67 	vmov.f32	s0, s15
 8002156:	f7ff ffb1 	bl	80020bc <misc_min>
 800215a:	eef0 7a40 	vmov.f32	s15, s0
}
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <rampe_init>:
#include <stdbool.h>
#include <string.h>
#include <math.h>

void rampe_init(rampe_t *rampe, const rampe_config_t *config, loop_t *loop)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
	memset(rampe, 0, sizeof(rampe_t));
 8002174:	2240      	movs	r2, #64	@ 0x40
 8002176:	2100      	movs	r1, #0
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f009 fc9d 	bl	800bab8 <memset>

	rampe->loop = loop;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	63da      	str	r2, [r3, #60]	@ 0x3c

	rampe->brake_decel = config->brake_decel;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	619a      	str	r2, [r3, #24]

	rampe->min_accel = -config->max_decel;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002192:	eef1 7a67 	vneg.f32	s15, s15
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	edc3 7a03 	vstr	s15, [r3, #12]
	rampe->max_accel = config->max_accel;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	609a      	str	r2, [r3, #8]

	rampe->min_decel = -config->max_accel;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80021aa:	eef1 7a67 	vneg.f32	s15, s15
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	edc3 7a05 	vstr	s15, [r3, #20]
	rampe->max_decel = config->max_decel;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	611a      	str	r2, [r3, #16]

	rampe->min_speed = -config->max_speed;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	eef1 7a67 	vneg.f32	s15, s15
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	edc3 7a01 	vstr	s15, [r3, #4]
	rampe->max_speed = config->max_speed;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

	rampe->target_reached_tolerance = config->target_reached_tolerance;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	635a      	str	r2, [r3, #52]	@ 0x34
	rampe->speed_reached_tolerance = config->speed_reached_tolerance;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <rampe_set_target_pos>:

void rampe_set_target_pos(rampe_t *rampe, number_t pos)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	ed87 0a00 	vstr	s0, [r7]
	rampe->target_pos = pos;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <rampe_get_target_pos>:

number_t rampe_get_target_pos(const rampe_t *rampe)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
	return rampe->target_pos;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002216:	ee07 3a90 	vmov	s15, r3
}
 800221a:	eeb0 0a67 	vmov.f32	s0, s15
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <rampe_set_current_pos>:

void rampe_set_current_pos(rampe_t *rampe, number_t pos)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	ed87 0a00 	vstr	s0, [r7]
	rampe->current_pos = pos;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	621a      	str	r2, [r3, #32]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <rampe_set_real_speed>:
{
	rampe->target_speed = speed;
}

void rampe_set_real_speed(rampe_t *rampe, number_t speed)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	ed87 0a00 	vstr	s0, [r7]
	rampe->current_speed = speed;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <rampe_update_goal>:

void rampe_update_goal(rampe_t *rampe)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	rampe->current_direction = misc_sign(rampe->target_pos - rampe->current_pos);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	edd3 7a08 	vldr	s15, [r3, #32]
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227c:	eeb0 0a67 	vmov.f32	s0, s15
 8002280:	f7ff ff38 	bl	80020f4 <misc_sign>
 8002284:	eef0 7a40 	vmov.f32	s15, s0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	edc3 7a07 	vstr	s15, [r3, #28]
	rampe->current_phase = RAMPE_ACCELERATING;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <rampe_is_target_reached>:

static bool rampe_is_target_reached(rampe_t *rampe)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	const number_t delta_target = rampe->target_pos - rampe->current_pos;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80022b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b6:	edc7 7a03 	vstr	s15, [r7, #12]
	if (misc_abs(delta_target) < rampe->target_reached_tolerance || delta_target * rampe->current_direction <= 0) {
 80022ba:	ed97 0a03 	vldr	s0, [r7, #12]
 80022be:	f7ff fec7 	bl	8002050 <misc_abs>
 80022c2:	eeb0 7a40 	vmov.f32	s14, s0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80022cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	d40b      	bmi.n	80022ee <rampe_is_target_reached+0x50>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80022dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ec:	d801      	bhi.n	80022f2 <rampe_is_target_reached+0x54>
		return true;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <rampe_is_target_reached+0x56>
	}
	return false;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	0000      	movs	r0, r0
	...

08002300 <rampe_tick>:

void rampe_tick(rampe_t *rampe, number_t delta_time)
{
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	ed2d 8b02 	vpush	{d8}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	ed87 0a00 	vstr	s0, [r7]

	const number_t delta_target = rampe->target_pos - rampe->current_pos;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	edd3 7a08 	vldr	s15, [r3, #32]
 800231c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002320:	edc7 7a05 	vstr	s15, [r7, #20]

	number_t current_accel = 0;
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]

	if (rampe->current_phase == RAMPE_ACCELERATING || rampe->current_phase == RAMPE_CONSTANT) {
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002330:	2b01      	cmp	r3, #1
 8002332:	d005      	beq.n	8002340 <rampe_tick+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800233a:	2b03      	cmp	r3, #3
 800233c:	f040 809c 	bne.w	8002478 <rampe_tick+0x178>
		d(t) = current_speed * t + min_a * t^2 / 2
		with
		t = current_speed / -min_a
		*/

		const number_t t = rampe->current_speed / (rampe->current_direction * rampe->brake_decel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	ed93 7a07 	vldr	s14, [r3, #28]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235a:	edc7 7a04 	vstr	s15, [r7, #16]
		const number_t distance_to_brake = (t + misc_sign(t) * loop_get_avg_delta_time(rampe->loop)) * rampe->current_speed - rampe->current_direction * rampe->brake_decel * (t*t) * 0.5;
 800235e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002362:	f7ff fec7 	bl	80020f4 <misc_sign>
 8002366:	eeb0 8a40 	vmov.f32	s16, s0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f9c2 	bl	80016f8 <loop_get_avg_delta_time>
 8002374:	eef0 7a40 	vmov.f32	s15, s0
 8002378:	ee28 7a27 	vmul.f32	s14, s16, s15
 800237c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800238a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238e:	ee17 0a90 	vmov	r0, s15
 8002392:	f7fe f901 	bl	8000598 <__aeabi_f2d>
 8002396:	4604      	mov	r4, r0
 8002398:	460d      	mov	r5, r1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	ed93 7a07 	vldr	s14, [r3, #28]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80023a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	ee17 0a90 	vmov	r0, s15
 80023ba:	f7fe f8ed 	bl	8000598 <__aeabi_f2d>
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	4b95      	ldr	r3, [pc, #596]	@ (8002618 <rampe_tick+0x318>)
 80023c4:	f7fe f940 	bl	8000648 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7fd ff82 	bl	80002d8 <__aeabi_dsub>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe fbf6 	bl	8000bcc <__aeabi_d2f>
 80023e0:	4603      	mov	r3, r0
 80023e2:	60fb      	str	r3, [r7, #12]

		current_accel = (rampe->current_direction > 0) ? rampe->max_accel : rampe->min_accel;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80023ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	dd02      	ble.n	80023fa <rampe_tick+0xfa>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	e001      	b.n	80023fe <rampe_tick+0xfe>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	61fb      	str	r3, [r7, #28]

		if (rampe_is_target_reached(rampe) || (rampe->current_direction > 0 && rampe->current_pos + distance_to_brake >= rampe->target_pos) || (rampe->current_direction < 0 && rampe->current_pos + distance_to_brake <= rampe->target_pos)) {
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ff4c 	bl	800229e <rampe_is_target_reached>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d12d      	bne.n	8002468 <rampe_tick+0x168>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002412:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	dd0e      	ble.n	800243a <rampe_tick+0x13a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002422:	edd7 7a03 	vldr	s15, [r7, #12]
 8002426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	da16      	bge.n	8002468 <rampe_tick+0x168>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d516      	bpl.n	8002478 <rampe_tick+0x178>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002450:	edd7 7a03 	vldr	s15, [r7, #12]
 8002454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800245e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	d807      	bhi.n	8002478 <rampe_tick+0x178>
			rampe->current_phase = RAMPE_DECELERATING;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			//rampe->brake_start_delta_target = delta_target;
			rampe->target_speed = rampe->current_speed;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}

	if (rampe->current_phase == RAMPE_DECELERATING) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800247e:	2b02      	cmp	r3, #2
 8002480:	d168      	bne.n	8002554 <rampe_tick+0x254>
		d(-v_0 / a) = -v_0 * (v_0 / a) + a * (v_0 / a)^2 / 2 = d
		d = delta_target = -v_0 * (v_0 / a) + a * (v_0 / a)^2 / 2
		a = -(v_0^2 / (2 * d))
		*/

		number_t best_accel = 0;
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
		if (misc_abs(delta_target) <= 0.001) {
 8002488:	ed97 0a05 	vldr	s0, [r7, #20]
 800248c:	f7ff fde0 	bl	8002050 <misc_abs>
 8002490:	ee10 3a10 	vmov	r3, s0
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f87f 	bl	8000598 <__aeabi_f2d>
 800249a:	a35d      	add	r3, pc, #372	@ (adr r3, 8002610 <rampe_tick+0x310>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe fb4e 	bl	8000b40 <__aeabi_dcmple>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <rampe_tick+0x1ba>
			best_accel = -rampe->brake_decel;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80024b0:	eef1 7a67 	vneg.f32	s15, s15
 80024b4:	edc7 7a06 	vstr	s15, [r7, #24]
 80024b8:	e02b      	b.n	8002512 <rampe_tick+0x212>
		} else {
			best_accel = -(rampe->current_speed * rampe->current_speed) / (2.0 * misc_abs(delta_target));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80024c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ca:	eef1 7a67 	vneg.f32	s15, s15
 80024ce:	ee17 3a90 	vmov	r3, s15
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f860 	bl	8000598 <__aeabi_f2d>
 80024d8:	4604      	mov	r4, r0
 80024da:	460d      	mov	r5, r1
 80024dc:	ed97 0a05 	vldr	s0, [r7, #20]
 80024e0:	f7ff fdb6 	bl	8002050 <misc_abs>
 80024e4:	ee10 3a10 	vmov	r3, s0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f855 	bl	8000598 <__aeabi_f2d>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	f7fd fef3 	bl	80002dc <__adddf3>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4620      	mov	r0, r4
 80024fc:	4629      	mov	r1, r5
 80024fe:	f7fe f9cd 	bl	800089c <__aeabi_ddiv>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f7fe fb5f 	bl	8000bcc <__aeabi_d2f>
 800250e:	4603      	mov	r3, r0
 8002510:	61bb      	str	r3, [r7, #24]
		}

		current_accel = misc_clamp(best_accel * rampe->current_direction, rampe->min_decel, rampe->max_decel);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	ed93 7a07 	vldr	s14, [r3, #28]
 8002518:	edd7 7a06 	vldr	s15, [r7, #24]
 800251c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	ed93 7a05 	vldr	s14, [r3, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	edd3 6a04 	vldr	s13, [r3, #16]
 800252c:	eeb0 1a66 	vmov.f32	s2, s13
 8002530:	eef0 0a47 	vmov.f32	s1, s14
 8002534:	eeb0 0a67 	vmov.f32	s0, s15
 8002538:	f7ff fdf8 	bl	800212c <misc_clamp>
 800253c:	ed87 0a07 	vstr	s0, [r7, #28]
		if (rampe_is_target_reached(rampe)) {
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff feac 	bl	800229e <rampe_is_target_reached>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <rampe_tick+0x254>
			rampe->current_phase = RAMPE_STOPPED;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			//self.stop_phase_vline.update(self.loop.get_ellapsed_time())
		}
	}

	if (rampe->current_phase == RAMPE_STOPPED) {
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <rampe_tick+0x26c>
		current_accel = 0;
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
		rampe->target_speed = 0;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	rampe->target_speed += current_accel * delta_time;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002572:	edd7 6a07 	vldr	s13, [r7, #28]
 8002576:	edd7 7a00 	vldr	s15, [r7]
 800257a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if (rampe->current_direction > 0) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	edd3 7a07 	vldr	s15, [r3, #28]
 800258e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002596:	dd0e      	ble.n	80025b6 <rampe_tick+0x2b6>
		rampe->target_speed = misc_max(0, rampe->target_speed);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800259e:	eef0 0a67 	vmov.f32	s1, s15
 80025a2:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800261c <rampe_tick+0x31c>
 80025a6:	f7ff fd6d 	bl	8002084 <misc_max>
 80025aa:	eef0 7a40 	vmov.f32	s15, s0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80025b4:	e00d      	b.n	80025d2 <rampe_tick+0x2d2>
	} else {
		rampe->target_speed = misc_min(0, rampe->target_speed);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80025bc:	eef0 0a67 	vmov.f32	s1, s15
 80025c0:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800261c <rampe_tick+0x31c>
 80025c4:	f7ff fd7a 	bl	80020bc <misc_min>
 80025c8:	eef0 7a40 	vmov.f32	s15, s0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	}

	rampe->target_speed = misc_clamp(rampe->target_speed, rampe->min_speed, rampe->max_speed);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	ed93 7a01 	vldr	s14, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	edd3 6a00 	vldr	s13, [r3]
 80025e4:	eeb0 1a66 	vmov.f32	s2, s13
 80025e8:	eef0 0a47 	vmov.f32	s1, s14
 80025ec:	eeb0 0a67 	vmov.f32	s0, s15
 80025f0:	f7ff fd9c 	bl	800212c <misc_clamp>
 80025f4:	eef0 7a40 	vmov.f32	s15, s0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 80025fe:	bf00      	nop
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	ecbd 8b02 	vpop	{d8}
 8002608:	bdb0      	pop	{r4, r5, r7, pc}
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	d2f1a9fc 	.word	0xd2f1a9fc
 8002614:	3f50624d 	.word	0x3f50624d
 8002618:	3fe00000 	.word	0x3fe00000
 800261c:	00000000 	.word	0x00000000

08002620 <rampe_get_current_speed>:

number_t rampe_get_current_speed(rampe_t *rampe)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	return rampe->target_speed;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	ee07 3a90 	vmov	s15, r3
}
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <enable_steppers>:
};


// ======================== Hardware abstraction ========================

static inline void enable_steppers() {
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	2101      	movs	r1, #1
 800264a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800264e:	f002 ff29 	bl	80054a4 <HAL_GPIO_WritePin>

	for (int i = 0; i < NB_STEPPERS; i++) {
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	e00b      	b.n	8002670 <enable_steppers+0x30>
		steppers[i].state = STEPPER_STATE_ENABLE;
 8002658:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <enable_steppers+0x40>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	21a4      	movs	r1, #164	@ 0xa4
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	335c      	adds	r3, #92	@ 0x5c
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_STEPPERS; i++) {
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3301      	adds	r3, #1
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	ddf0      	ble.n	8002658 <enable_steppers+0x18>
	}
}
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	2000081c 	.word	0x2000081c

08002684 <disable_steppers>:

static inline void disable_steppers() {
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_RESET);
 800268a:	2200      	movs	r2, #0
 800268c:	2101      	movs	r1, #1
 800268e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002692:	f002 ff07 	bl	80054a4 <HAL_GPIO_WritePin>

	for (int i = 0; i < NB_STEPPERS; i++) {
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	e00b      	b.n	80026b4 <disable_steppers+0x30>
		steppers[i].state = STEPPER_STATE_DISABLED;
 800269c:	4a09      	ldr	r2, [pc, #36]	@ (80026c4 <disable_steppers+0x40>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	21a4      	movs	r1, #164	@ 0xa4
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	335c      	adds	r3, #92	@ 0x5c
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_STEPPERS; i++) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3301      	adds	r3, #1
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	ddf0      	ble.n	800269c <disable_steppers+0x18>
	}
}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	2000081c 	.word	0x2000081c

080026c8 <on_stepper_home>:


// ======================== Callbacks ======================== //

void on_stepper_home(uint8_t stepper_id) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
	if (stepper_id >= NB_STEPPERS) {
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d815      	bhi.n	8002704 <on_stepper_home+0x3c>
		// TODO: Error
		return;
	}

	stepper_t *stepper = &steppers[stepper_id].stepper;
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	22a4      	movs	r2, #164	@ 0xa4
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <on_stepper_home+0x44>)
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

	stepperSetFrequency(stepper, STEPPER_HOMING_SPEED * NB_MICRO_STEPS);
 80026e6:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fb7d 	bl	8002dea <stepperSetFrequency>

	steppers[stepper_id].state = STEPPER_STATE_HOMING;
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	4a06      	ldr	r2, [pc, #24]	@ (800270c <on_stepper_home+0x44>)
 80026f4:	21a4      	movs	r1, #164	@ 0xa4
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	335c      	adds	r3, #92	@ 0x5c
 80026fe:	2202      	movs	r2, #2
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e000      	b.n	8002706 <on_stepper_home+0x3e>
		return;
 8002704:	bf00      	nop
}
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000081c 	.word	0x2000081c

08002710 <on_stepper_go_to>:


void on_stepper_go_to(uint8_t stepper_id, int32_t position, int32_t speed) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	73fb      	strb	r3, [r7, #15]
	if (stepper_id >= NB_STEPPERS) {
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d830      	bhi.n	8002786 <on_stepper_go_to+0x76>
		// TODO: Error
		return;
	}

	rampe_t *rampe = &steppers[stepper_id].rampe;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	22a4      	movs	r2, #164	@ 0xa4
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	3360      	adds	r3, #96	@ 0x60
 800272e:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <on_stepper_go_to+0x80>)
 8002730:	4413      	add	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

	rampe->max_speed = speed * NB_MICRO_STEPS;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	015b      	lsls	r3, r3, #5
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	edc3 7a00 	vstr	s15, [r3]
	rampe->min_speed = -rampe->max_speed;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	eef1 7a67 	vneg.f32	s15, s15
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	edc3 7a01 	vstr	s15, [r3, #4]

	rampe_set_target_pos(rampe, position * NB_MICRO_STEPS);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff fd40 	bl	80021ec <rampe_set_target_pos>
	rampe_update_goal(rampe);
 800276c:	6978      	ldr	r0, [r7, #20]
 800276e:	f7ff fd79 	bl	8002264 <rampe_update_goal>

	steppers[stepper_id].state = STEPPER_STATE_ENABLE;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	4a06      	ldr	r2, [pc, #24]	@ (8002790 <on_stepper_go_to+0x80>)
 8002776:	21a4      	movs	r1, #164	@ 0xa4
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	335c      	adds	r3, #92	@ 0x5c
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e000      	b.n	8002788 <on_stepper_go_to+0x78>
		return;
 8002786:	bf00      	nop
}
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000081c 	.word	0x2000081c

08002794 <on_stepper_move_by>:


void on_stepper_move_by(uint8_t stepper_id, int32_t delta_position, int32_t speed) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	73fb      	strb	r3, [r7, #15]
	if (stepper_id >= NB_STEPPERS) {
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d837      	bhi.n	8002818 <on_stepper_move_by+0x84>
		// TODO: Error
		return;
	}

	rampe_t *rampe = &steppers[stepper_id].rampe;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	22a4      	movs	r2, #164	@ 0xa4
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	3360      	adds	r3, #96	@ 0x60
 80027b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <on_stepper_move_by+0x8c>)
 80027b4:	4413      	add	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

	rampe->max_speed = speed * NB_MICRO_STEPS;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	015b      	lsls	r3, r3, #5
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	edc3 7a00 	vstr	s15, [r3]
	rampe->min_speed = -rampe->max_speed;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	eef1 7a67 	vneg.f32	s15, s15
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	edc3 7a01 	vstr	s15, [r3, #4]

	rampe_set_target_pos(rampe, rampe_get_target_pos(rampe) + delta_position * NB_MICRO_STEPS);
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff fd15 	bl	800220a <rampe_get_target_pos>
 80027e0:	eeb0 7a40 	vmov.f32	s14, s0
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	015b      	lsls	r3, r3, #5
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f4:	eeb0 0a67 	vmov.f32	s0, s15
 80027f8:	6978      	ldr	r0, [r7, #20]
 80027fa:	f7ff fcf7 	bl	80021ec <rampe_set_target_pos>
	rampe_update_goal(rampe);
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff fd30 	bl	8002264 <rampe_update_goal>

	steppers[stepper_id].state = STEPPER_STATE_ENABLE;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	4a06      	ldr	r2, [pc, #24]	@ (8002820 <on_stepper_move_by+0x8c>)
 8002808:	21a4      	movs	r1, #164	@ 0xa4
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	335c      	adds	r3, #92	@ 0x5c
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e000      	b.n	800281a <on_stepper_move_by+0x86>
		return;
 8002818:	bf00      	nop
}
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2000081c 	.word	0x2000081c

08002824 <setup>:
}


// ======================== Runtime ======================== //

void setup() {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
	cons.huart = active_config->console_huart;
	consoleInit(&cons);
	printf("[OTHR] Now able to receive commands\n");
	*/

	printf("Begin initialization\r\n");
 800282a:	4827      	ldr	r0, [pc, #156]	@ (80028c8 <setup+0xa4>)
 800282c:	f009 f814 	bl	800b858 <puts>

	consoleInit(&cons);
 8002830:	4826      	ldr	r0, [pc, #152]	@ (80028cc <setup+0xa8>)
 8002832:	f7fe fed1 	bl	80015d8 <consoleInit>

	printf("Now able to receive commands\r\n");
 8002836:	4826      	ldr	r0, [pc, #152]	@ (80028d0 <setup+0xac>)
 8002838:	f009 f80e 	bl	800b858 <puts>

	loop_init(&loop_manager, 0.1);
 800283c:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80028d4 <setup+0xb0>
 8002840:	4825      	ldr	r0, [pc, #148]	@ (80028d8 <setup+0xb4>)
 8002842:	f7fe fee6 	bl	8001612 <loop_init>

	// Initialize steppers

	printf("Initializing steppers\r\n");
 8002846:	4825      	ldr	r0, [pc, #148]	@ (80028dc <setup+0xb8>)
 8002848:	f009 f806 	bl	800b858 <puts>

	disable_steppers();
 800284c:	f7ff ff1a 	bl	8002684 <disable_steppers>

	for (int i = 0; i < NB_STEPPERS; i++) {
 8002850:	2300      	movs	r3, #0
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	e028      	b.n	80028a8 <setup+0x84>
		steppers[i].current_goal = 0;
 8002856:	4a22      	ldr	r2, [pc, #136]	@ (80028e0 <setup+0xbc>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	21a4      	movs	r1, #164	@ 0xa4
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	33a0      	adds	r3, #160	@ 0xa0
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
		rampe_init(&steppers[i].rampe, &default_rampe_config, &loop_manager);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	22a4      	movs	r2, #164	@ 0xa4
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	3360      	adds	r3, #96	@ 0x60
 8002874:	4a1a      	ldr	r2, [pc, #104]	@ (80028e0 <setup+0xbc>)
 8002876:	4413      	add	r3, r2
 8002878:	4a17      	ldr	r2, [pc, #92]	@ (80028d8 <setup+0xb4>)
 800287a:	491a      	ldr	r1, [pc, #104]	@ (80028e4 <setup+0xc0>)
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fc73 	bl	8002168 <rampe_init>
		stepperInit(&steppers[i].stepper, &steppers_config[i]);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	22a4      	movs	r2, #164	@ 0xa4
 8002886:	fb02 f303 	mul.w	r3, r2, r3
 800288a:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <setup+0xbc>)
 800288c:	1898      	adds	r0, r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4a13      	ldr	r2, [pc, #76]	@ (80028e8 <setup+0xc4>)
 800289a:	4413      	add	r3, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f000 fac5 	bl	8002e2c <stepperInit>
	for (int i = 0; i < NB_STEPPERS; i++) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3301      	adds	r3, #1
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	ddd3      	ble.n	8002856 <setup+0x32>
	}

	enable_steppers();
 80028ae:	f7ff fec7 	bl	8002640 <enable_steppers>

	HAL_I2C_EnableListen_IT(I2C_HANDLE);
 80028b2:	480e      	ldr	r0, [pc, #56]	@ (80028ec <setup+0xc8>)
 80028b4:	f003 f80e 	bl	80058d4 <HAL_I2C_EnableListen_IT>

	printf("Initialization done\r\n");
 80028b8:	480d      	ldr	r0, [pc, #52]	@ (80028f0 <setup+0xcc>)
 80028ba:	f008 ffcd 	bl	800b858 <puts>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	0800d394 	.word	0x0800d394
 80028cc:	20000030 	.word	0x20000030
 80028d0:	0800d3ac 	.word	0x0800d3ac
 80028d4:	3dcccccd 	.word	0x3dcccccd
 80028d8:	20000a08 	.word	0x20000a08
 80028dc:	0800d3cc 	.word	0x0800d3cc
 80028e0:	2000081c 	.word	0x2000081c
 80028e4:	0800d4cc 	.word	0x0800d4cc
 80028e8:	0800d418 	.word	0x0800d418
 80028ec:	20000290 	.word	0x20000290
 80028f0:	0800d3e4 	.word	0x0800d3e4

080028f4 <loop>:


static uint32_t last_time = 0;
static bool first_time = true;

void loop() {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
	uint32_t current_time = get_time_us();
 80028fa:	f001 f82b 	bl	8003954 <get_time_us>
 80028fe:	61b8      	str	r0, [r7, #24]

	if (first_time) {
 8002900:	4b4a      	ldr	r3, [pc, #296]	@ (8002a2c <loop+0x138>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <loop+0x20>
		last_time = current_time;
 8002908:	4a49      	ldr	r2, [pc, #292]	@ (8002a30 <loop+0x13c>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
		first_time = false;
 800290e:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <loop+0x138>)
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
	}

	// delta_time in seconds
	const number_t delta_time = (float) (current_time - last_time) / 1000000.0;
 8002914:	4b46      	ldr	r3, [pc, #280]	@ (8002a30 <loop+0x13c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002924:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002a34 <loop+0x140>
 8002928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800292c:	edc7 7a05 	vstr	s15, [r7, #20]
	last_time = current_time;
 8002930:	4a3f      	ldr	r2, [pc, #252]	@ (8002a30 <loop+0x13c>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]

	loop_tick(&loop_manager, delta_time);
 8002936:	ed97 0a05 	vldr	s0, [r7, #20]
 800293a:	483f      	ldr	r0, [pc, #252]	@ (8002a38 <loop+0x144>)
 800293c:	f7fe fe80 	bl	8001640 <loop_tick>

	// Handle all steppers
	for (int i = 0; i < NB_STEPPERS; i++) {
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e067      	b.n	8002a16 <loop+0x122>
		stepper_t *stepper = &steppers[i].stepper;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	22a4      	movs	r2, #164	@ 0xa4
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a3c <loop+0x148>)
 8002950:	4413      	add	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
		rampe_t *rampe = &steppers[i].rampe;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	22a4      	movs	r2, #164	@ 0xa4
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	3360      	adds	r3, #96	@ 0x60
 800295e:	4a37      	ldr	r2, [pc, #220]	@ (8002a3c <loop+0x148>)
 8002960:	4413      	add	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]

		const stepper_state_t state = steppers[i].state;
 8002964:	4a35      	ldr	r2, [pc, #212]	@ (8002a3c <loop+0x148>)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	21a4      	movs	r1, #164	@ 0xa4
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	335c      	adds	r3, #92	@ 0x5c
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	72fb      	strb	r3, [r7, #11]

		if (state == STEPPER_STATE_ENABLE) {
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d149      	bne.n	8002a10 <loop+0x11c>
			// Update rampe and target goal
			rampe_tick(rampe, delta_time);
 800297c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff fcbd 	bl	8002300 <rampe_tick>
			const number_t target_speed = rampe_get_current_speed(rampe);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff fe4a 	bl	8002620 <rampe_get_current_speed>
 800298c:	ed87 0a01 	vstr	s0, [r7, #4]
			steppers[i].current_goal += target_speed * delta_time;
 8002990:	4a2a      	ldr	r2, [pc, #168]	@ (8002a3c <loop+0x148>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	21a4      	movs	r1, #164	@ 0xa4
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	33a0      	adds	r3, #160	@ 0xa0
 800299e:	ed93 7a00 	vldr	s14, [r3]
 80029a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80029a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b2:	4a22      	ldr	r2, [pc, #136]	@ (8002a3c <loop+0x148>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	21a4      	movs	r1, #164	@ 0xa4
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	33a0      	adds	r3, #160	@ 0xa0
 80029c0:	edc3 7a00 	vstr	s15, [r3]
			rampe_set_current_pos(rampe, steppers[i].current_goal);
 80029c4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a3c <loop+0x148>)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	21a4      	movs	r1, #164	@ 0xa4
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	33a0      	adds	r3, #160	@ 0xa0
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	eeb0 0a67 	vmov.f32	s0, s15
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7ff fc24 	bl	8002228 <rampe_set_current_pos>
			rampe_set_real_speed(rampe, target_speed);
 80029e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff fc2e 	bl	8002246 <rampe_set_real_speed>
			} else {
				steppers[i].current_goal -= 10;
			}*/

			// Handle stepper
			stepperUpdateGoal(stepper, (int32_t) steppers[i].current_goal);
 80029ea:	4a14      	ldr	r2, [pc, #80]	@ (8002a3c <loop+0x148>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	21a4      	movs	r1, #164	@ 0xa4
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	33a0      	adds	r3, #160	@ 0xa0
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a00:	ee17 1a90 	vmov	r1, s15
 8002a04:	6938      	ldr	r0, [r7, #16]
 8002a06:	f000 fb93 	bl	8003130 <stepperUpdateGoal>
			stepperHandle(stepper);
 8002a0a:	6938      	ldr	r0, [r7, #16]
 8002a0c:	f000 faa8 	bl	8002f60 <stepperHandle>
	for (int i = 0; i < NB_STEPPERS; i++) {
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	3301      	adds	r3, #1
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	dd94      	ble.n	8002946 <loop+0x52>
			stepperHome(stepper); // Reset position to 0
		}*/
	}

	//delay_us(50);
	HAL_Delay(1); // TODO
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f001 f893 	bl	8003b48 <HAL_Delay>
}
 8002a22:	bf00      	nop
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000138 	.word	0x20000138
 8002a30:	20000a14 	.word	0x20000a14
 8002a34:	49742400 	.word	0x49742400
 8002a38:	20000a08 	.word	0x20000a08
 8002a3c:	2000081c 	.word	0x2000081c

08002a40 <HAL_UART_RxCpltCallback>:


// Timer interrupts

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	/*if(huart == &huart2){
		incoming_callback(huart);
	} else*/ if (huart == cons.huart) {
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_UART_RxCpltCallback+0x20>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d102      	bne.n	8002a58 <HAL_UART_RxCpltCallback+0x18>
		consoleDataReady(&cons);
 8002a52:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <HAL_UART_RxCpltCallback+0x20>)
 8002a54:	f7fe fd64 	bl	8001520 <consoleDataReady>
	}
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000030 	.word	0x20000030

08002a64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NB_STEPPERS; i++) {
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e01a      	b.n	8002aa8 <HAL_TIM_PeriodElapsedCallback+0x44>
		stepper_t *stepper = &steppers[i].stepper;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	22a4      	movs	r2, #164	@ 0xa4
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002a7c:	4413      	add	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
		if (htim == stepper->config.handle) {
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d103      	bne.n	8002a92 <HAL_TIM_PeriodElapsedCallback+0x2e>
			stepperTimerRollBack(stepper);
 8002a8a:	68b8      	ldr	r0, [r7, #8]
 8002a8c:	f000 f985 	bl	8002d9a <stepperTimerRollBack>
 8002a90:	e007      	b.n	8002aa2 <HAL_TIM_PeriodElapsedCallback+0x3e>
		} else if (htim == stepper->config.counter_handle) {
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d102      	bne.n	8002aa2 <HAL_TIM_PeriodElapsedCallback+0x3e>
			stepperCounterTimerRollBack(stepper);
 8002a9c:	68b8      	ldr	r0, [r7, #8]
 8002a9e:	f000 f986 	bl	8002dae <stepperCounterTimerRollBack>
	for (int i = 0; i < NB_STEPPERS; i++) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	dde1      	ble.n	8002a72 <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2000081c 	.word	0x2000081c

08002abc <HAL_I2C_ListenCpltCallback>:
uint8_t uart_current_cmd = 0;
uint8_t uart_receive_buffer[16] = {};
uint8_t uart_transmit_buffer[16] = {};


void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	if (hi2c != I2C_HANDLE) return;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <HAL_I2C_ListenCpltCallback+0x20>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d103      	bne.n	8002ad4 <HAL_I2C_ListenCpltCallback+0x18>
	//if(debug_i2c)printf("list cplt\n");
	HAL_I2C_EnableListen_IT(hi2c);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f002 ff01 	bl	80058d4 <HAL_I2C_EnableListen_IT>
 8002ad2:	e000      	b.n	8002ad6 <HAL_I2C_ListenCpltCallback+0x1a>
	if (hi2c != I2C_HANDLE) return;
 8002ad4:	bf00      	nop
}
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000290 	.word	0x20000290

08002ae0 <HAL_I2C_AddrCallback>:


void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
 8002aec:	4613      	mov	r3, r2
 8002aee:	803b      	strh	r3, [r7, #0]
	if (hi2c != I2C_HANDLE) return;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_I2C_AddrCallback+0x48>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d113      	bne.n	8002b20 <HAL_I2C_AddrCallback+0x40>

	//if(debug_i2c) printf("add match\n");
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {  // if the master wants to transmit the data
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_I2C_AddrCallback+0x32>
		//RxData[0] = 0;  // reset the RxData[0] to clear any residue address from previous call
		uart_current_cmd = 0;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_I2C_AddrCallback+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, uart_receive_buffer, 1, I2C_FIRST_FRAME);
 8002b04:	2300      	movs	r3, #0
 8002b06:	2201      	movs	r2, #1
 8002b08:	4909      	ldr	r1, [pc, #36]	@ (8002b30 <HAL_I2C_AddrCallback+0x50>)
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f002 fe30 	bl	8005770 <HAL_I2C_Slave_Seq_Receive_IT>
 8002b10:	e007      	b.n	8002b22 <HAL_I2C_AddrCallback+0x42>
		//rxcount++;
	} else {
		//txcount = 0;
		//startPosition = RxData[0]; // transmission can only happen if the slave has received an order to send specific data
		//RxData[0] = 0;  // Reset the start register as we have already copied it
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, uart_transmit_buffer, 1, I2C_FIRST_FRAME);
 8002b12:	2300      	movs	r3, #0
 8002b14:	2201      	movs	r2, #1
 8002b16:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <HAL_I2C_AddrCallback+0x54>)
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f002 fd77 	bl	800560c <HAL_I2C_Slave_Seq_Transmit_IT>
 8002b1e:	e000      	b.n	8002b22 <HAL_I2C_AddrCallback+0x42>
	if (hi2c != I2C_HANDLE) return;
 8002b20:	bf00      	nop
		//if(debug_i2c) printf("fsent %d : %d \n",startPosition+txcount, I2C_REGISTERS[startPosition+txcount]);
		//txcount++;
	}
	//if(debug_i2c) printf("start\n");
}
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000290 	.word	0x20000290
 8002b2c:	20000a18 	.word	0x20000a18
 8002b30:	20000a1c 	.word	0x20000a1c
 8002b34:	20000a2c 	.word	0x20000a2c

08002b38 <HAL_I2C_SlaveTxCpltCallback>:


void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	if (hi2c != I2C_HANDLE) return;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d107      	bne.n	8002b58 <HAL_I2C_SlaveTxCpltCallback+0x20>

	//will try to send the last byte, which will fail because the master already received the right number of bytes
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, uart_transmit_buffer, 1, I2C_NEXT_FRAME);
 8002b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4905      	ldr	r1, [pc, #20]	@ (8002b64 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f002 fd5b 	bl	800560c <HAL_I2C_Slave_Seq_Transmit_IT>
 8002b56:	e000      	b.n	8002b5a <HAL_I2C_SlaveTxCpltCallback+0x22>
	if (hi2c != I2C_HANDLE) return;
 8002b58:	bf00      	nop
	//if(debug_i2c) printf("sent %d : %d \n",startPosition+txcount, I2C_REGISTERS[startPosition+txcount]);
	//txcount++; // WARNING : txcount will always be greater than the actual number of bytes received by the master
}
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000290 	.word	0x20000290
 8002b64:	20000a2c 	.word	0x20000a2c

08002b68 <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	if (hi2c != I2C_HANDLE) return;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb0 <HAL_I2C_SlaveRxCpltCallback+0x148>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	f040 8097 	bne.w	8002ca8 <HAL_I2C_SlaveRxCpltCallback+0x140>

	if (uart_current_cmd == 0) {
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb4 <HAL_I2C_SlaveRxCpltCallback+0x14c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d125      	bne.n	8002bce <HAL_I2C_SlaveRxCpltCallback+0x66>
		// First byte is the command code
		uart_current_cmd = uart_receive_buffer[0];
 8002b82:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb4 <HAL_I2C_SlaveRxCpltCallback+0x14c>)
 8002b88:	701a      	strb	r2, [r3, #0]

		size_t uart_nb_bytes_to_receive = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
		switch (uart_current_cmd) {
 8002b8e:	4b49      	ldr	r3, [pc, #292]	@ (8002cb4 <HAL_I2C_SlaveRxCpltCallback+0x14c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d00c      	beq.n	8002bb0 <HAL_I2C_SlaveRxCpltCallback+0x48>
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	dc0d      	bgt.n	8002bb6 <HAL_I2C_SlaveRxCpltCallback+0x4e>
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d002      	beq.n	8002ba4 <HAL_I2C_SlaveRxCpltCallback+0x3c>
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d003      	beq.n	8002baa <HAL_I2C_SlaveRxCpltCallback+0x42>
 8002ba2:	e008      	b.n	8002bb6 <HAL_I2C_SlaveRxCpltCallback+0x4e>
		case 0x1:
			uart_nb_bytes_to_receive = 1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8002ba8:	e005      	b.n	8002bb6 <HAL_I2C_SlaveRxCpltCallback+0x4e>
		case 0x2:
			uart_nb_bytes_to_receive = 9;
 8002baa:	2309      	movs	r3, #9
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8002bae:	e002      	b.n	8002bb6 <HAL_I2C_SlaveRxCpltCallback+0x4e>
		case 0x3:
			uart_nb_bytes_to_receive = 9;
 8002bb0:	2309      	movs	r3, #9
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8002bb4:	bf00      	nop
		}

		if (uart_nb_bytes_to_receive > 0) {
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d076      	beq.n	8002caa <HAL_I2C_SlaveRxCpltCallback+0x142>
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, uart_receive_buffer, uart_nb_bytes_to_receive, I2C_LAST_FRAME);
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bc4:	493c      	ldr	r1, [pc, #240]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f002 fdd2 	bl	8005770 <HAL_I2C_Slave_Seq_Receive_IT>
 8002bcc:	e06d      	b.n	8002caa <HAL_I2C_SlaveRxCpltCallback+0x142>
		}
	} else {
		// Others bytes are the command body
		switch (uart_current_cmd) {
 8002bce:	4b39      	ldr	r3, [pc, #228]	@ (8002cb4 <HAL_I2C_SlaveRxCpltCallback+0x14c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d038      	beq.n	8002c48 <HAL_I2C_SlaveRxCpltCallback+0xe0>
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	dc62      	bgt.n	8002ca0 <HAL_I2C_SlaveRxCpltCallback+0x138>
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d002      	beq.n	8002be4 <HAL_I2C_SlaveRxCpltCallback+0x7c>
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d008      	beq.n	8002bf4 <HAL_I2C_SlaveRxCpltCallback+0x8c>
 8002be2:	e05d      	b.n	8002ca0 <HAL_I2C_SlaveRxCpltCallback+0x138>
			case 0x1: {
				uint8_t stepper_id = uart_receive_buffer[0];
 8002be4:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	72fb      	strb	r3, [r7, #11]
				on_stepper_home(stepper_id);
 8002bea:	7afb      	ldrb	r3, [r7, #11]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fd6b 	bl	80026c8 <on_stepper_home>
				break;
 8002bf2:	e055      	b.n	8002ca0 <HAL_I2C_SlaveRxCpltCallback+0x138>
			}

			case 0x2: {
				uint8_t stepper_id = uart_receive_buffer[0];
 8002bf4:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	75fb      	strb	r3, [r7, #23]
				int32_t position = ((uint16_t) uart_receive_buffer[4]) | ((uint16_t) uart_receive_buffer[3] << 8) | ((uint16_t) uart_receive_buffer[2] << 16) | ((uint16_t) uart_receive_buffer[1] << 24);
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002bfc:	791b      	ldrb	r3, [r3, #4]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c02:	78db      	ldrb	r3, [r3, #3]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	431a      	orrs	r2, r3
 8002c08:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c0a:	789b      	ldrb	r3, [r3, #2]
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	4b29      	ldr	r3, [pc, #164]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
				uint32_t speed = ((uint16_t) uart_receive_buffer[8]) | ((uint16_t) uart_receive_buffer[7] << 8) | ((uint16_t) uart_receive_buffer[6] << 16) | ((uint16_t) uart_receive_buffer[5] << 24);
 8002c1a:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c1c:	7a1b      	ldrb	r3, [r3, #8]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b25      	ldr	r3, [pc, #148]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c22:	79db      	ldrb	r3, [r3, #7]
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	431a      	orrs	r2, r3
 8002c28:	4b23      	ldr	r3, [pc, #140]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c2a:	799b      	ldrb	r3, [r3, #6]
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c32:	795b      	ldrb	r3, [r3, #5]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
				on_stepper_go_to(stepper_id, position, speed);
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	6939      	ldr	r1, [r7, #16]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fd65 	bl	8002710 <on_stepper_go_to>
				break;
 8002c46:	e02b      	b.n	8002ca0 <HAL_I2C_SlaveRxCpltCallback+0x138>
			}

			case 0x3: {
				uint8_t stepper_id = uart_receive_buffer[0];
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				int32_t delta_position = ((uint16_t) uart_receive_buffer[4]) | ((uint16_t) uart_receive_buffer[3] << 8) | ((uint16_t) uart_receive_buffer[2] << 16) | ((uint16_t) uart_receive_buffer[1] << 24);
 8002c50:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c52:	791b      	ldrb	r3, [r3, #4]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c58:	78db      	ldrb	r3, [r3, #3]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c60:	789b      	ldrb	r3, [r3, #2]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	431a      	orrs	r2, r3
 8002c66:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c68:	785b      	ldrb	r3, [r3, #1]
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61fb      	str	r3, [r7, #28]
				uint32_t speed = ((uint16_t) uart_receive_buffer[8]) | ((uint16_t) uart_receive_buffer[7] << 8) | ((uint16_t) uart_receive_buffer[6] << 16) | ((uint16_t) uart_receive_buffer[5] << 24);
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c72:	7a1b      	ldrb	r3, [r3, #8]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c78:	79db      	ldrb	r3, [r3, #7]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c80:	799b      	ldrb	r3, [r3, #6]
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	431a      	orrs	r2, r3
 8002c86:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 8002c88:	795b      	ldrb	r3, [r3, #5]
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
				on_stepper_move_by(stepper_id, delta_position, speed);
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c96:	69f9      	ldr	r1, [r7, #28]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fd7b 	bl	8002794 <on_stepper_move_by>
				break;
 8002c9e:	bf00      	nop
			}
		}

		uart_current_cmd = 0;
 8002ca0:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <HAL_I2C_SlaveRxCpltCallback+0x14c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e000      	b.n	8002caa <HAL_I2C_SlaveRxCpltCallback+0x142>
	if (hi2c != I2C_HANDLE) return;
 8002ca8:	bf00      	nop
	}
}
 8002caa:	3728      	adds	r7, #40	@ 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000290 	.word	0x20000290
 8002cb4:	20000a18 	.word	0x20000a18
 8002cb8:	20000a1c 	.word	0x20000a1c

08002cbc <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	if (hi2c != I2C_HANDLE) return;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf4 <HAL_I2C_ErrorCallback+0x38>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10f      	bne.n	8002cec <HAL_I2C_ErrorCallback+0x30>

	uint32_t error_code = HAL_I2C_GetError(hi2c);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f002 fece 	bl	8005a6e <HAL_I2C_GetError>
 8002cd2:	60f8      	str	r0, [r7, #12]
	//if(debug_i2c) printf("I2C error %ld \n", error_code);

	if(error_code == HAL_I2C_ERROR_AF){
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d004      	beq.n	8002ce4 <HAL_I2C_ErrorCallback+0x28>
			//process_data();
		} else {
			txcount = 0;
		}*/
	} else {
		printf("I2C error %d\r\n", (int) error_code);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4806      	ldr	r0, [pc, #24]	@ (8002cf8 <HAL_I2C_ErrorCallback+0x3c>)
 8002ce0:	f008 fd52 	bl	800b788 <iprintf>
	}

	//if(debug_i2c) printf("rx %d tx %d \n", rxcount, txcount);
	HAL_I2C_EnableListen_IT(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f002 fdf5 	bl	80058d4 <HAL_I2C_EnableListen_IT>
 8002cea:	e000      	b.n	8002cee <HAL_I2C_ErrorCallback+0x32>
	if (hi2c != I2C_HANDLE) return;
 8002cec:	bf00      	nop
}
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000290 	.word	0x20000290
 8002cf8:	0800d3fc 	.word	0x0800d3fc

08002cfc <add_int32_with_overflow>:
// ========================== Utilities ========================== //

#define ABS(x) (x < 0 ? -x : x)

// Return true if overflow
bool add_int32_with_overflow(int32_t lhs, int32_t rhs, int32_t *result) {
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
	#ifdef __GNUC__
		return __builtin_add_overflow(lhs, rhs, result);
 8002d08:	2100      	movs	r1, #0
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	d700      	bvc.n	8002d14 <add_int32_with_overflow+0x18>
 8002d12:	2101      	movs	r1, #1
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
			}
		}
		*result = lhs + rhs;
		return false;
	#endif
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <timerStart>:

// ========================== Hardware abstraction ========================== //

static inline void timerStart(TIM_HandleTypeDef* handle) {
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
	handle->Instance->CR1 |= TIM_CR1_CEN;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <timerStop>:

static inline void timerStop(TIM_HandleTypeDef* handle) {
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
	handle->Instance->CR1 &=~ TIM_CR1_CEN;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <timerEnableInterrupt>:

static void timerEnableInterrupt(TIM_HandleTypeDef* handle) {
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
	handle->Instance->DIER |= TIM_DIER_UIE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	60da      	str	r2, [r3, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <stepperTimerRollBack>:
}
*/

// ========================== Low level ========================== //

inline void stepperTimerRollBack(stepper_t* stepper){
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
	#ifndef USE_HARDWARE_COUNTING
	#ifndef USE_ENCODER_COUNTING
	if(stepper->dir) stepper->step_count++; else stepper->step_count--;
	#endif
	#endif
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <stepperCounterTimerRollBack>:

inline void stepperCounterTimerRollBack(stepper_t* stepper){
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
	#if defined USE_HARDWARE_COUNTING || defined USE_ENCODER_COUNTING
	// TODO : use count direction bit instead
	if(stepper->config.counter_handle->Instance->CNT > 0X7FFF){ // wraparound is downwards
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dc2:	d306      	bcc.n	8002dd2 <stepperCounterTimerRollBack+0x24>
		stepper->step_offset -= 0x10000;//0xFFFF; // there is 65536 values including 0, so we need to increment by that amount, and not 0xFFFF (65535)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc8:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	64da      	str	r2, [r3, #76]	@ 0x4c
	} else {
		stepper->step_offset += 0x10000;//0xFFFF;
	}
	#endif
}
 8002dd0:	e005      	b.n	8002dde <stepperCounterTimerRollBack+0x30>
		stepper->step_offset += 0x10000;//0xFFFF;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <stepperSetFrequency>:

void stepperSetFrequency(stepper_t* stepper, uint32_t frequency) {
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
	if (frequency == 0) {
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <stepperSetFrequency+0x1c>
		timerStop(stepper->config.handle);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ffa7 	bl	8002d52 <timerStop>
	} else {
		timerStart(stepper->config.handle);
		stepper->config.handle->Instance->ARR = ((stepper->divided_clock)/(frequency)) - 1;
	}
}
 8002e04:	e00e      	b.n	8002e24 <stepperSetFrequency+0x3a>
		timerStart(stepper->config.handle);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff8f 	bl	8002d2e <timerStart>
		stepper->config.handle->Instance->ARR = ((stepper->divided_clock)/(frequency)) - 1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3a01      	subs	r2, #1
 8002e22:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <stepperInit>:

// ========================== High level ========================== //

void stepperInit(stepper_t* stepper, const stepper_config_t *config) {
 8002e2c:	b5b0      	push	{r4, r5, r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	// Copy config to stepper structure
	stepper->config = *config;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4614      	mov	r4, r2
 8002e3c:	461d      	mov	r5, r3
 8002e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Initialize state values
	stepper->step_offset = -65535; // timer interupts trigger once at start for some reason
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <stepperInit+0x130>)
 8002e56:	64da      	str	r2, [r3, #76]	@ 0x4c

	stepper->config.handle->Instance->PSC = (stepper->config.clock / (stepper->config.max_freq)) -1;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3a01      	subs	r2, #1
 8002e6c:	629a      	str	r2, [r3, #40]	@ 0x28
	stepper->divided_clock = stepper->config.clock / (stepper->config.handle->Instance->PSC + 1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	649a      	str	r2, [r3, #72]	@ 0x48

	//printf("stepper PSC : %ld, divided clock %ld\n", stepper->handle->Instance->PSC, stepper->divided_clock);

	//stepperSetFrequency(stepper, 10);
	if(stepper->config.channel_inverted)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7a1b      	ldrb	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <stepperInit+0x72>
		HAL_TIMEx_PWMN_Start(stepper->config.handle, stepper->config.channel);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f006 fb90 	bl	80095bc <HAL_TIMEx_PWMN_Start>
 8002e9c:	e007      	b.n	8002eae <stepperInit+0x82>
	else
		HAL_TIM_PWM_Start(stepper->config.handle, stepper->config.channel);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f005 fa67 	bl	800837c <HAL_TIM_PWM_Start>
	//stopTimer(stepper->handle);

	stepperSetFrequency(stepper, 0);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff9a 	bl	8002dea <stepperSetFrequency>

	switch (stepper->config.channel){
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d834      	bhi.n	8002f28 <stepperInit+0xfc>
 8002ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <stepperInit+0x98>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	08002f29 	.word	0x08002f29
 8002ecc:	08002f29 	.word	0x08002f29
 8002ed0:	08002f29 	.word	0x08002f29
 8002ed4:	08002f05 	.word	0x08002f05
 8002ed8:	08002f29 	.word	0x08002f29
 8002edc:	08002f29 	.word	0x08002f29
 8002ee0:	08002f29 	.word	0x08002f29
 8002ee4:	08002f11 	.word	0x08002f11
 8002ee8:	08002f29 	.word	0x08002f29
 8002eec:	08002f29 	.word	0x08002f29
 8002ef0:	08002f29 	.word	0x08002f29
 8002ef4:	08002f1d 	.word	0x08002f1d
		case TIM_CHANNEL_1: stepper->config.handle->Instance->CCR1 = CCR; break;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	220a      	movs	r2, #10
 8002f00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f02:	e011      	b.n	8002f28 <stepperInit+0xfc>
		case TIM_CHANNEL_2:	stepper->config.handle->Instance->CCR2 = CCR; break;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	220a      	movs	r2, #10
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f0e:	e00b      	b.n	8002f28 <stepperInit+0xfc>
		case TIM_CHANNEL_3:	stepper->config.handle->Instance->CCR3 = CCR; break;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	220a      	movs	r2, #10
 8002f18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f1a:	e005      	b.n	8002f28 <stepperInit+0xfc>
		case TIM_CHANNEL_4:	stepper->config.handle->Instance->CCR4 = CCR; break;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	220a      	movs	r2, #10
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f26:	bf00      	nop
	}

	#if defined USE_HARDWARE_COUNTING || defined USE_ENCODER_COUNTING
		timerEnableInterrupt(stepper->config.counter_handle);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff22 	bl	8002d76 <timerEnableInterrupt>
		stepper->config.counter_handle->Instance->ARR = 65535;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
		stepper->config.counter_handle->Instance->PSC = 0;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2200      	movs	r2, #0
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28

		#ifdef USE_HARDWARE_COUNTING
			timerStart(stepper->config.counter_handle);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff feee 	bl	8002d2e <timerStart>
			HAL_TIM_Encoder_Start_IT(stepper->counter_handle, TIM_CHANNEL_ALL);
		#endif
	#else
		timerEnableInterrupt(stepper->config.handle);
	#endif
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	ffff0001 	.word	0xffff0001

08002f60 <stepperHandle>:
		stepper->config.counter_handle->Instance->CNT = 0;
	#endif
	stepper->step_count = 0;
}

void stepperHandle(stepper_t* stepper) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	#if defined USE_HARDWARE_COUNTING || defined USE_ENCODER_COUNTING
		const uint32_t counter_value = (int32_t) stepper->config.counter_handle->Instance->CNT + stepper->step_offset;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	4413      	add	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]

		#ifdef USE_ENCODER_COUNTING
			stepper->step_count = (float)(counter_value) * ((float)(stepper->config.stepper_resolution) / (float)(stepper->config.encoder_resolution));
		#else
			stepper->step_count = counter_value;
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54
		#endif
	#endif

	// Compute number of steps error
	const int32_t step_error = stepper->step_goal - stepper->step_count;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
	stepper->error = step_error;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Compute PID derivative
	const float step_error_derivative = (float) step_error - (float) stepper->last_error;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fac:	edc7 7a04 	vstr	s15, [r7, #16]
	stepper->last_error = step_error;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	641a      	str	r2, [r3, #64]	@ 0x40

	// Compute PID integral
	if (add_int32_with_overflow(stepper->integral, step_error, &stepper->integral)) {
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3344      	adds	r3, #68	@ 0x44
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6979      	ldr	r1, [r7, #20]
 8002fc2:	f7ff fe9b 	bl	8002cfc <add_int32_with_overflow>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <stepperHandle+0x88>
		// Has overflow
		if (step_error > 0) stepper->integral = stepper->config.integral_max;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dd04      	ble.n	8002fdc <stepperHandle+0x7c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002fda:	e01b      	b.n	8003014 <stepperHandle+0xb4>
		else stepper->integral = -stepper->config.integral_max;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	425a      	negs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002fe6:	e015      	b.n	8003014 <stepperHandle+0xb4>
	} else {
		if (stepper->integral >= stepper->config.integral_max) stepper->integral = stepper->config.integral_max;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	db03      	blt.n	8002ffc <stepperHandle+0x9c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	645a      	str	r2, [r3, #68]	@ 0x44
		if (stepper->integral <= -stepper->config.integral_max) stepper->integral = -stepper->config.integral_max;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	425b      	negs	r3, r3
 8003006:	429a      	cmp	r2, r3
 8003008:	dc04      	bgt.n	8003014 <stepperHandle+0xb4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	425a      	negs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	645a      	str	r2, [r3, #68]	@ 0x44
	}

	// Compute target frequency by applying the PID on the error
	const float target_frequency =
			(float) step_error * stepper->config.kp +
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	edd3 7a07 	vldr	s15, [r3, #28]
 8003024:	ee27 7a27 	vmul.f32	s14, s14, s15
			step_error_derivative * stepper->config.kd +
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	edd3 6a08 	vldr	s13, [r3, #32]
 800302e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003032:	ee66 7aa7 	vmul.f32	s15, s13, s15
			(float) step_error * stepper->config.kp +
 8003036:	ee37 7a27 	vadd.f32	s14, s14, s15
			(float) stepper->integral * stepper->config.ki;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800304c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	const float target_frequency =
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	edc7 7a03 	vstr	s15, [r7, #12]

	// Round result
	int32_t target_frequency_rounded;
	if (target_frequency > 0) {
 8003058:	edd7 7a03 	vldr	s15, [r7, #12]
 800305c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003064:	dd10      	ble.n	8003088 <stepperHandle+0x128>
		target_frequency_rounded = (int32_t) (target_frequency + 0.5);
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f7fd fa96 	bl	8000598 <__aeabi_f2d>
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <stepperHandle+0x1c8>)
 8003072:	f7fd f933 	bl	80002dc <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fd7d 	bl	8000b7c <__aeabi_d2iz>
 8003082:	4603      	mov	r3, r0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e00f      	b.n	80030a8 <stepperHandle+0x148>
	} else {
		target_frequency_rounded = (int32_t) (target_frequency - 0.5);
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7fd fa85 	bl	8000598 <__aeabi_f2d>
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <stepperHandle+0x1c8>)
 8003094:	f7fd f920 	bl	80002d8 <__aeabi_dsub>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fd6c 	bl	8000b7c <__aeabi_d2iz>
 80030a4:	4603      	mov	r3, r0
 80030a6:	61fb      	str	r3, [r7, #28]
	}

	stepper->dir = (target_frequency_rounded > 0);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bfcc      	ite	gt
 80030ae:	2301      	movgt	r3, #1
 80030b0:	2300      	movle	r3, #0
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	HAL_GPIO_WritePin(stepper->config.dir_port, stepper->config.dir_pin, (stepper->dir) ^ (stepper->config.dir_inverted));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68d8      	ldr	r0, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8a19      	ldrh	r1, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7c9b      	ldrb	r3, [r3, #18]
 80030cc:	4053      	eors	r3, r2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	f002 f9e7 	bl	80054a4 <HAL_GPIO_WritePin>

	#ifdef USE_HARDWARE_COUNTING
	if(stepper->dir)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <stepperHandle+0x196>
		stepper->config.counter_handle->Instance->CR1 &= ~(TIM_CR1_DIR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0210 	bic.w	r2, r2, #16
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e009      	b.n	800310a <stepperHandle+0x1aa>
	else
		stepper->config.counter_handle->Instance->CR1 |= TIM_CR1_DIR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0210 	orr.w	r2, r2, #16
 8003108:	601a      	str	r2, [r3, #0]
	#endif

	freq = target_frequency_rounded;
 800310a:	4a08      	ldr	r2, [pc, #32]	@ (800312c <stepperHandle+0x1cc>)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	6013      	str	r3, [r2, #0]

	stepperSetFrequency(stepper, ABS(target_frequency_rounded));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	bfb8      	it	lt
 8003116:	425b      	neglt	r3, r3
 8003118:	4619      	mov	r1, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fe65 	bl	8002dea <stepperSetFrequency>

	//printf("tim en %ld err %ld freq %ld arr %ld cnt %ld dir %d off %ld cnt %ld count %ld, goal %ld \n", stepper->handle->Instance->CR1 & TIM_CR1_CEN, error, ABS(frequency), stepper->handle->Instance->ARR, stepper->handle->Instance->CNT, stepper->dir, stepper->step_offset, stepper->counter_handle->Instance->CNT, stepper->step_count, stepper->step_goal);
}
 8003120:	bf00      	nop
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	3fe00000 	.word	0x3fe00000
 800312c:	20000a3c 	.word	0x20000a3c

08003130 <stepperUpdateGoal>:
void stepperUpdateCount(stepper_t* stepper, int32_t count){
	stepper->step_count = count;
}
*/

void stepperUpdateGoal(stepper_t* stepper, int32_t goal){
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
	stepper->step_goal = goal;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003152:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <HAL_MspInit+0x44>)
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	4a0e      	ldr	r2, [pc, #56]	@ (8003190 <HAL_MspInit+0x44>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6613      	str	r3, [r2, #96]	@ 0x60
 800315e:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <HAL_MspInit+0x44>)
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <HAL_MspInit+0x44>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	4a08      	ldr	r2, [pc, #32]	@ (8003190 <HAL_MspInit+0x44>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003174:	6593      	str	r3, [r2, #88]	@ 0x58
 8003176:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <HAL_MspInit+0x44>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003182:	f004 f8d3 	bl	800732c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000

08003194 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b09e      	sub	sp, #120	@ 0x78
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2250      	movs	r2, #80	@ 0x50
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f008 fc7f 	bl	800bab8 <memset>
  if(hadc->Instance==ADC2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1e      	ldr	r2, [pc, #120]	@ (8003238 <HAL_ADC_MspInit+0xa4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d134      	bne.n	800322e <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80031c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80031ca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80031ce:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4618      	mov	r0, r3
 80031d6:	f004 fde7 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031e0:	f7fe ff30 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80031e4:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_ADC_MspInit+0xa8>)
 80031e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e8:	4a14      	ldr	r2, [pc, #80]	@ (800323c <HAL_ADC_MspInit+0xa8>)
 80031ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f0:	4b12      	ldr	r3, [pc, #72]	@ (800323c <HAL_ADC_MspInit+0xa8>)
 80031f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	4b0f      	ldr	r3, [pc, #60]	@ (800323c <HAL_ADC_MspInit+0xa8>)
 80031fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003200:	4a0e      	ldr	r2, [pc, #56]	@ (800323c <HAL_ADC_MspInit+0xa8>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003208:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <HAL_ADC_MspInit+0xa8>)
 800320a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin;
 8003214:	23c2      	movs	r3, #194	@ 0xc2
 8003216:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003218:	2303      	movs	r3, #3
 800321a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003220:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003224:	4619      	mov	r1, r3
 8003226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800322a:	f001 ffb9 	bl	80051a0 <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 800322e:	bf00      	nop
 8003230:	3778      	adds	r7, #120	@ 0x78
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	50000100 	.word	0x50000100
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b09e      	sub	sp, #120	@ 0x78
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2250      	movs	r2, #80	@ 0x50
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f008 fc29 	bl	800bab8 <memset>
  if(hfdcan->Instance==FDCAN2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1f      	ldr	r2, [pc, #124]	@ (80032e8 <HAL_FDCAN_MspInit+0xa8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d137      	bne.n	80032e0 <HAL_FDCAN_MspInit+0xa0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003274:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800327a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	4618      	mov	r0, r3
 8003282:	f004 fd91 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800328c:	f7fe feda 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003290:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <HAL_FDCAN_MspInit+0xac>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <HAL_FDCAN_MspInit+0xac>)
 8003296:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800329a:	6593      	str	r3, [r2, #88]	@ 0x58
 800329c:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <HAL_FDCAN_MspInit+0xac>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a8:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <HAL_FDCAN_MspInit+0xac>)
 80032aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ac:	4a0f      	ldr	r2, [pc, #60]	@ (80032ec <HAL_FDCAN_MspInit+0xac>)
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032b4:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <HAL_FDCAN_MspInit+0xac>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80032c0:	2360      	movs	r3, #96	@ 0x60
 80032c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80032d0:	2309      	movs	r3, #9
 80032d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032d8:	4619      	mov	r1, r3
 80032da:	4805      	ldr	r0, [pc, #20]	@ (80032f0 <HAL_FDCAN_MspInit+0xb0>)
 80032dc:	f001 ff60 	bl	80051a0 <HAL_GPIO_Init>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80032e0:	bf00      	nop
 80032e2:	3778      	adds	r7, #120	@ 0x78
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40006800 	.word	0x40006800
 80032ec:	40021000 	.word	0x40021000
 80032f0:	48000400 	.word	0x48000400

080032f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b09e      	sub	sp, #120	@ 0x78
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2250      	movs	r2, #80	@ 0x50
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f008 fbcf 	bl	800bab8 <memset>
  if(hi2c->Instance==I2C2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <HAL_I2C_MspInit+0xc8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d147      	bne.n	80033b4 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003328:	2300      	movs	r3, #0
 800332a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4618      	mov	r0, r3
 8003332:	f004 fd39 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800333c:	f7fe fe82 	bl	8002044 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003340:	4b1f      	ldr	r3, [pc, #124]	@ (80033c0 <HAL_I2C_MspInit+0xcc>)
 8003342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003344:	4a1e      	ldr	r2, [pc, #120]	@ (80033c0 <HAL_I2C_MspInit+0xcc>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800334c:	4b1c      	ldr	r3, [pc, #112]	@ (80033c0 <HAL_I2C_MspInit+0xcc>)
 800334e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003358:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800335c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800335e:	2312      	movs	r3, #18
 8003360:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800336a:	2304      	movs	r3, #4
 800336c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003372:	4619      	mov	r1, r3
 8003374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003378:	f001 ff12 	bl	80051a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800337c:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <HAL_I2C_MspInit+0xcc>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	4a0f      	ldr	r2, [pc, #60]	@ (80033c0 <HAL_I2C_MspInit+0xcc>)
 8003382:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003386:	6593      	str	r3, [r2, #88]	@ 0x58
 8003388:	4b0d      	ldr	r3, [pc, #52]	@ (80033c0 <HAL_I2C_MspInit+0xcc>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2100      	movs	r1, #0
 8003398:	2021      	movs	r0, #33	@ 0x21
 800339a:	f001 fc98 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800339e:	2021      	movs	r0, #33	@ 0x21
 80033a0:	f001 fcaf 	bl	8004d02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	2022      	movs	r0, #34	@ 0x22
 80033aa:	f001 fc90 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80033ae:	2022      	movs	r0, #34	@ 0x22
 80033b0:	f001 fca7 	bl	8004d02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80033b4:	bf00      	nop
 80033b6:	3778      	adds	r7, #120	@ 0x78
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40005800 	.word	0x40005800
 80033c0:	40021000 	.word	0x40021000

080033c4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003450 <HAL_TIM_PWM_MspInit+0x8c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d114      	bne.n	8003400 <HAL_TIM_PWM_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 80033d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033da:	4a1e      	ldr	r2, [pc, #120]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 80033dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80033e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	2018      	movs	r0, #24
 80033f4:	f001 fc6b 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80033f8:	2018      	movs	r0, #24
 80033fa:	f001 fc82 	bl	8004d02 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033fe:	e022      	b.n	8003446 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003408:	d10c      	bne.n	8003424 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6593      	str	r3, [r2, #88]	@ 0x58
 8003416:	4b0f      	ldr	r3, [pc, #60]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
}
 8003422:	e010      	b.n	8003446 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0b      	ldr	r2, [pc, #44]	@ (8003458 <HAL_TIM_PWM_MspInit+0x94>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10b      	bne.n	8003446 <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800342e:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	4a08      	ldr	r2, [pc, #32]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6593      	str	r3, [r2, #88]	@ 0x58
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_TIM_PWM_MspInit+0x90>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40021000 	.word	0x40021000
 8003458:	40000400 	.word	0x40000400

0800345c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2b      	ldr	r2, [pc, #172]	@ (8003518 <HAL_TIM_Base_MspInit+0xbc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d114      	bne.n	8003498 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800346e:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	4a2a      	ldr	r2, [pc, #168]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6593      	str	r3, [r2, #88]	@ 0x58
 800347a:	4b28      	ldr	r3, [pc, #160]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	201e      	movs	r0, #30
 800348c:	f001 fc1f 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003490:	201e      	movs	r0, #30
 8003492:	f001 fc36 	bl	8004d02 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003496:	e03a      	b.n	800350e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM15)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a20      	ldr	r2, [pc, #128]	@ (8003520 <HAL_TIM_Base_MspInit+0xc4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d114      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80034a2:	4b1e      	ldr	r3, [pc, #120]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 80034a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a6:	4a1d      	ldr	r2, [pc, #116]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80034ae:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 80034b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	2018      	movs	r0, #24
 80034c0:	f001 fc05 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80034c4:	2018      	movs	r0, #24
 80034c6:	f001 fc1c 	bl	8004d02 <HAL_NVIC_EnableIRQ>
}
 80034ca:	e020      	b.n	800350e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM20)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <HAL_TIM_Base_MspInit+0xc8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d11b      	bne.n	800350e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80034d6:	4b11      	ldr	r3, [pc, #68]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 80034d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034da:	4a10      	ldr	r2, [pc, #64]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 80034dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80034e2:	4b0e      	ldr	r3, [pc, #56]	@ (800351c <HAL_TIM_Base_MspInit+0xc0>)
 80034e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM20_BRK_IRQn, 0, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	204d      	movs	r0, #77	@ 0x4d
 80034f4:	f001 fbeb 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM20_BRK_IRQn);
 80034f8:	204d      	movs	r0, #77	@ 0x4d
 80034fa:	f001 fc02 	bl	8004d02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM20_UP_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	204e      	movs	r0, #78	@ 0x4e
 8003504:	f001 fbe3 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM20_UP_IRQn);
 8003508:	204e      	movs	r0, #78	@ 0x4e
 800350a:	f001 fbfa 	bl	8004d02 <HAL_NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40000800 	.word	0x40000800
 800351c:	40021000 	.word	0x40021000
 8003520:	40014000 	.word	0x40014000
 8003524:	40015000 	.word	0x40015000

08003528 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	@ 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a34      	ldr	r2, [pc, #208]	@ (8003618 <HAL_TIM_MspPostInit+0xf0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d11e      	bne.n	8003588 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354a:	4b34      	ldr	r3, [pc, #208]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354e:	4a33      	ldr	r2, [pc, #204]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003556:	4b31      	ldr	r3, [pc, #196]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_STP_A_Pin;
 8003562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003574:	2306      	movs	r3, #6
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_STP_A_GPIO_Port, &GPIO_InitStruct);
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	4619      	mov	r1, r3
 800357e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003582:	f001 fe0d 	bl	80051a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003586:	e043      	b.n	8003610 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003590:	d11c      	bne.n	80035cc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003592:	4b22      	ldr	r3, [pc, #136]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	4a21      	ldr	r2, [pc, #132]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800359e:	4b1f      	ldr	r3, [pc, #124]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_STP_B_Pin;
 80035aa:	2308      	movs	r3, #8
 80035ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035ba:	2301      	movs	r3, #1
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_STP_B_GPIO_Port, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	4816      	ldr	r0, [pc, #88]	@ (8003620 <HAL_TIM_MspPostInit+0xf8>)
 80035c6:	f001 fdeb 	bl	80051a0 <HAL_GPIO_Init>
}
 80035ca:	e021      	b.n	8003610 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a14      	ldr	r2, [pc, #80]	@ (8003624 <HAL_TIM_MspPostInit+0xfc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d11c      	bne.n	8003610 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	4b11      	ldr	r3, [pc, #68]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	4a10      	ldr	r2, [pc, #64]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035e2:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <HAL_TIM_MspPostInit+0xf4>)
 80035e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_STP_C_Pin;
 80035ee:	2310      	movs	r3, #16
 80035f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035fe:	2302      	movs	r3, #2
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_STP_C_GPIO_Port, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800360c:	f001 fdc8 	bl	80051a0 <HAL_GPIO_Init>
}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	@ 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40021000 	.word	0x40021000
 8003620:	48000400 	.word	0x48000400
 8003624:	40000400 	.word	0x40000400

08003628 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b09e      	sub	sp, #120	@ 0x78
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	2250      	movs	r2, #80	@ 0x50
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f008 fa35 	bl	800bab8 <memset>
  if(huart->Instance==USART2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1f      	ldr	r2, [pc, #124]	@ (80036d0 <HAL_UART_MspInit+0xa8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d136      	bne.n	80036c6 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003658:	2302      	movs	r3, #2
 800365a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4618      	mov	r0, r3
 8003666:	f004 fb9f 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003670:	f7fe fce8 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <HAL_UART_MspInit+0xac>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	4a16      	ldr	r2, [pc, #88]	@ (80036d4 <HAL_UART_MspInit+0xac>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003680:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <HAL_UART_MspInit+0xac>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_UART_MspInit+0xac>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003690:	4a10      	ldr	r2, [pc, #64]	@ (80036d4 <HAL_UART_MspInit+0xac>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_UART_MspInit+0xac>)
 800369a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80036a4:	230c      	movs	r3, #12
 80036a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b0:	2300      	movs	r3, #0
 80036b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036b4:	2307      	movs	r3, #7
 80036b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80036bc:	4619      	mov	r1, r3
 80036be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036c2:	f001 fd6d 	bl	80051a0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80036c6:	bf00      	nop
 80036c8:	3778      	adds	r7, #120	@ 0x78
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40004400 	.word	0x40004400
 80036d4:	40021000 	.word	0x40021000

080036d8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b098      	sub	sp, #96	@ 0x60
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	2250      	movs	r2, #80	@ 0x50
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f008 f9e5 	bl	800bab8 <memset>
  if(hpcd->Instance==USB)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a11      	ldr	r2, [pc, #68]	@ (8003738 <HAL_PCD_MspInit+0x60>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d11a      	bne.n	800372e <HAL_PCD_MspInit+0x56>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80036f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80036fe:	2300      	movs	r3, #0
 8003700:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003702:	f107 0310 	add.w	r3, r7, #16
 8003706:	4618      	mov	r0, r3
 8003708:	f004 fb4e 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8003712:	f7fe fc97 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003716:	4b09      	ldr	r3, [pc, #36]	@ (800373c <HAL_PCD_MspInit+0x64>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371a:	4a08      	ldr	r2, [pc, #32]	@ (800373c <HAL_PCD_MspInit+0x64>)
 800371c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003720:	6593      	str	r3, [r2, #88]	@ 0x58
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_PCD_MspInit+0x64>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800372e:	bf00      	nop
 8003730:	3760      	adds	r7, #96	@ 0x60
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40005c00 	.word	0x40005c00
 800373c:	40021000 	.word	0x40021000

08003740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003744:	bf00      	nop
 8003746:	e7fd      	b.n	8003744 <NMI_Handler+0x4>

08003748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800374c:	bf00      	nop
 800374e:	e7fd      	b.n	800374c <HardFault_Handler+0x4>

08003750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003754:	bf00      	nop
 8003756:	e7fd      	b.n	8003754 <MemManage_Handler+0x4>

08003758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <BusFault_Handler+0x4>

08003760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <UsageFault_Handler+0x4>

08003768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003796:	f000 f9b9 	bl	8003b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037a4:	4803      	ldr	r0, [pc, #12]	@ (80037b4 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80037a6:	f004 fef5 	bl	8008594 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80037aa:	4803      	ldr	r0, [pc, #12]	@ (80037b8 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80037ac:	f004 fef2 	bl	8008594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200002e4 	.word	0x200002e4
 80037b8:	20000414 	.word	0x20000414

080037bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037c0:	4802      	ldr	r0, [pc, #8]	@ (80037cc <TIM4_IRQHandler+0x10>)
 80037c2:	f004 fee7 	bl	8008594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200003c8 	.word	0x200003c8

080037d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80037d4:	4802      	ldr	r0, [pc, #8]	@ (80037e0 <I2C2_EV_IRQHandler+0x10>)
 80037d6:	f002 f89d 	bl	8005914 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000290 	.word	0x20000290

080037e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <I2C2_ER_IRQHandler+0x10>)
 80037ea:	f002 f8ad 	bl	8005948 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000290 	.word	0x20000290

080037f8 <TIM20_BRK_IRQHandler>:

/**
  * @brief This function handles TIM20 break interrupt.
  */
void TIM20_BRK_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_BRK_IRQn 0 */

  /* USER CODE END TIM20_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <TIM20_BRK_IRQHandler+0x10>)
 80037fe:	f004 fec9 	bl	8008594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_BRK_IRQn 1 */

  /* USER CODE END TIM20_BRK_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000460 	.word	0x20000460

0800380c <TIM20_UP_IRQHandler>:

/**
  * @brief This function handles TIM20 update interrupt.
  */
void TIM20_UP_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 8003810:	4802      	ldr	r0, [pc, #8]	@ (800381c <TIM20_UP_IRQHandler+0x10>)
 8003812:	f004 febf 	bl	8008594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_UP_IRQn 1 */

  /* USER CODE END TIM20_UP_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000460 	.word	0x20000460

08003820 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e00a      	b.n	8003848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003832:	f3af 8000 	nop.w
 8003836:	4601      	mov	r1, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	60ba      	str	r2, [r7, #8]
 800383e:	b2ca      	uxtb	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	dbf0      	blt.n	8003832 <_read+0x12>
  }

  return len;
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <_close>:
  }
  return len;
}

int _close(int file)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003882:	605a      	str	r2, [r3, #4]
  return 0;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <_isatty>:

int _isatty(int file)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800389a:	2301      	movs	r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038cc:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <_sbrk+0x5c>)
 80038ce:	4b15      	ldr	r3, [pc, #84]	@ (8003924 <_sbrk+0x60>)
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d8:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <_sbrk+0x64>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <_sbrk+0x64>)
 80038e2:	4a12      	ldr	r2, [pc, #72]	@ (800392c <_sbrk+0x68>)
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038e6:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <_sbrk+0x64>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d207      	bcs.n	8003904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f4:	f008 f92e 	bl	800bb54 <__errno>
 80038f8:	4603      	mov	r3, r0
 80038fa:	220c      	movs	r2, #12
 80038fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003902:	e009      	b.n	8003918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003904:	4b08      	ldr	r3, [pc, #32]	@ (8003928 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800390a:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <_sbrk+0x64>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	4a05      	ldr	r2, [pc, #20]	@ (8003928 <_sbrk+0x64>)
 8003914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003916:	68fb      	ldr	r3, [r7, #12]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	2001c000 	.word	0x2001c000
 8003924:	00000400 	.word	0x00000400
 8003928:	20000a40 	.word	0x20000a40
 800392c:	20000b98 	.word	0x20000b98

08003930 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <SystemInit+0x20>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <SystemInit+0x20>)
 800393c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <get_time_us>:
	uint32_t start = SysTick->VAL;
	uint32_t ticks = (us * SYSTICK_PER_US) - SYSTICK_DELAY_CALIB;
	while ((start - SysTick->VAL) < ticks);
}

uint32_t get_time_us() {
 8003954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
	uint64_t ellapsed = (uint64_t) HAL_GetTick() * (uint64_t) 1000 + (uint64_t) ((SysTick->LOAD - SysTick->VAL) / SYSTICK_PER_US);
 800395c:	f000 f8e8 	bl	8003b30 <HAL_GetTick>
 8003960:	4603      	mov	r3, r0
 8003962:	2200      	movs	r2, #0
 8003964:	4698      	mov	r8, r3
 8003966:	4691      	mov	r9, r2
 8003968:	4642      	mov	r2, r8
 800396a:	464b      	mov	r3, r9
 800396c:	f04f 0000 	mov.w	r0, #0
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	0159      	lsls	r1, r3, #5
 8003976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397a:	0150      	lsls	r0, r2, #5
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	ebb2 0408 	subs.w	r4, r2, r8
 8003984:	eb63 0509 	sbc.w	r5, r3, r9
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	00ab      	lsls	r3, r5, #2
 8003992:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003996:	00a2      	lsls	r2, r4, #2
 8003998:	4614      	mov	r4, r2
 800399a:	461d      	mov	r5, r3
 800399c:	eb14 0a08 	adds.w	sl, r4, r8
 80039a0:	eb45 0b09 	adc.w	fp, r5, r9
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039b8:	4692      	mov	sl, r2
 80039ba:	469b      	mov	fp, r3
 80039bc:	4652      	mov	r2, sl
 80039be:	465b      	mov	r3, fp
 80039c0:	4911      	ldr	r1, [pc, #68]	@ (8003a08 <get_time_us+0xb4>)
 80039c2:	6848      	ldr	r0, [r1, #4]
 80039c4:	4910      	ldr	r1, [pc, #64]	@ (8003a08 <get_time_us+0xb4>)
 80039c6:	6889      	ldr	r1, [r1, #8]
 80039c8:	1a40      	subs	r0, r0, r1
 80039ca:	4910      	ldr	r1, [pc, #64]	@ (8003a0c <get_time_us+0xb8>)
 80039cc:	6809      	ldr	r1, [r1, #0]
 80039ce:	4c10      	ldr	r4, [pc, #64]	@ (8003a10 <get_time_us+0xbc>)
 80039d0:	fba4 4101 	umull	r4, r1, r4, r1
 80039d4:	0c89      	lsrs	r1, r1, #18
 80039d6:	fbb0 f1f1 	udiv	r1, r0, r1
 80039da:	2000      	movs	r0, #0
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039e4:	4621      	mov	r1, r4
 80039e6:	1851      	adds	r1, r2, r1
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	4629      	mov	r1, r5
 80039ec:	eb43 0101 	adc.w	r1, r3, r1
 80039f0:	6079      	str	r1, [r7, #4]
 80039f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80039f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return (uint32_t) ellapsed;
 80039fa:	693b      	ldr	r3, [r7, #16]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a06:	bf00      	nop
 8003a08:	e000e010 	.word	0xe000e010
 8003a0c:	2000013c 	.word	0x2000013c
 8003a10:	431bde83 	.word	0x431bde83

08003a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a14:	480d      	ldr	r0, [pc, #52]	@ (8003a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a16:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a18:	f7ff ff8a 	bl	8003930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a1c:	480c      	ldr	r0, [pc, #48]	@ (8003a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a1e:	490d      	ldr	r1, [pc, #52]	@ (8003a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a20:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <LoopForever+0xe>)
  movs r3, #0
 8003a22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a24:	e002      	b.n	8003a2c <LoopCopyDataInit>

08003a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a2a:	3304      	adds	r3, #4

08003a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a30:	d3f9      	bcc.n	8003a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a32:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a34:	4c0a      	ldr	r4, [pc, #40]	@ (8003a60 <LoopForever+0x16>)
  movs r3, #0
 8003a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a38:	e001      	b.n	8003a3e <LoopFillZerobss>

08003a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a3c:	3204      	adds	r2, #4

08003a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a40:	d3fb      	bcc.n	8003a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a42:	f008 f88d 	bl	800bb60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a46:	f7fd fe7d 	bl	8001744 <main>

08003a4a <LoopForever>:

LoopForever:
    b LoopForever
 8003a4a:	e7fe      	b.n	8003a4a <LoopForever>
  ldr   r0, =_estack
 8003a4c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a54:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003a58:	0800d684 	.word	0x0800d684
  ldr r2, =_sbss
 8003a5c:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8003a60:	20000b94 	.word	0x20000b94

08003a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a64:	e7fe      	b.n	8003a64 <ADC1_2_IRQHandler>

08003a66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a70:	2003      	movs	r0, #3
 8003a72:	f001 f921 	bl	8004cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a76:	200f      	movs	r0, #15
 8003a78:	f000 f80e 	bl	8003a98 <HAL_InitTick>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	71fb      	strb	r3, [r7, #7]
 8003a86:	e001      	b.n	8003a8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a88:	f7ff fb60 	bl	800314c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a8c:	79fb      	ldrb	r3, [r7, #7]

}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003aa4:	4b16      	ldr	r3, [pc, #88]	@ (8003b00 <HAL_InitTick+0x68>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d022      	beq.n	8003af2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003aac:	4b15      	ldr	r3, [pc, #84]	@ (8003b04 <HAL_InitTick+0x6c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b13      	ldr	r3, [pc, #76]	@ (8003b00 <HAL_InitTick+0x68>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f001 f930 	bl	8004d26 <HAL_SYSTICK_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10f      	bne.n	8003aec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b0f      	cmp	r3, #15
 8003ad0:	d809      	bhi.n	8003ae6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ada:	f001 f8f8 	bl	8004cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ade:	4a0a      	ldr	r2, [pc, #40]	@ (8003b08 <HAL_InitTick+0x70>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e007      	b.n	8003af6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e004      	b.n	8003af6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e001      	b.n	8003af6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000144 	.word	0x20000144
 8003b04:	2000013c 	.word	0x2000013c
 8003b08:	20000140 	.word	0x20000140

08003b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_IncTick+0x1c>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_IncTick+0x20>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	4a03      	ldr	r2, [pc, #12]	@ (8003b28 <HAL_IncTick+0x1c>)
 8003b1c:	6013      	str	r3, [r2, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20000a44 	.word	0x20000a44
 8003b2c:	20000144 	.word	0x20000144

08003b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return uwTick;
 8003b34:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <HAL_GetTick+0x14>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000a44 	.word	0x20000a44

08003b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7ff ffee 	bl	8003b30 <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b60:	d004      	beq.n	8003b6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b62:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <HAL_Delay+0x40>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b6c:	bf00      	nop
 8003b6e:	f7ff ffdf 	bl	8003b30 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d8f7      	bhi.n	8003b6e <HAL_Delay+0x26>
  {
  }
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000144 	.word	0x20000144

08003b8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3360      	adds	r3, #96	@ 0x60
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <LL_ADC_SetOffset+0x44>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	03fff000 	.word	0x03fff000

08003c3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3360      	adds	r3, #96	@ 0x60
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3360      	adds	r3, #96	@ 0x60
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b087      	sub	sp, #28
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3360      	adds	r3, #96	@ 0x60
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3360      	adds	r3, #96	@ 0x60
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	615a      	str	r2, [r3, #20]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3330      	adds	r3, #48	@ 0x30
 8003d40:	461a      	mov	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	4413      	add	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	211f      	movs	r1, #31
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	401a      	ands	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	0e9b      	lsrs	r3, r3, #26
 8003d68:	f003 011f 	and.w	r1, r3, #31
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	431a      	orrs	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d7c:	bf00      	nop
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3314      	adds	r3, #20
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	0e5b      	lsrs	r3, r3, #25
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	4413      	add	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	0d1b      	lsrs	r3, r3, #20
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2107      	movs	r1, #7
 8003db6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	0d1b      	lsrs	r3, r3, #20
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f003 0318 	and.w	r3, r3, #24
 8003e02:	4908      	ldr	r1, [pc, #32]	@ (8003e24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e04:	40d9      	lsrs	r1, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	400b      	ands	r3, r1
 8003e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	0007ffff 	.word	0x0007ffff

08003e28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003e38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6093      	str	r3, [r2, #8]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eb0:	d101      	bne.n	8003eb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <LL_ADC_IsEnabled+0x18>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <LL_ADC_IsEnabled+0x1a>
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d101      	bne.n	8003f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d101      	bne.n	8003f28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b089      	sub	sp, #36	@ 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e19b      	b.n	800428a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff f917 	bl	8003194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff67 	bl	8003e4c <LL_ADC_IsDeepPowerDownEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff4d 	bl	8003e28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ff82 	bl	8003e9c <LL_ADC_IsInternalRegulatorEnabled>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d115      	bne.n	8003fca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ff66 	bl	8003e74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fa8:	4b97      	ldr	r3, [pc, #604]	@ (8004208 <HAL_ADC_Init+0x2d0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	099b      	lsrs	r3, r3, #6
 8003fae:	4a97      	ldr	r2, [pc, #604]	@ (800420c <HAL_ADC_Init+0x2d4>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	099b      	lsrs	r3, r3, #6
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fbc:	e002      	b.n	8003fc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f9      	bne.n	8003fbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff64 	bl	8003e9c <LL_ADC_IsInternalRegulatorEnabled>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10d      	bne.n	8003ff6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fde:	f043 0210 	orr.w	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff75 	bl	8003eea <LL_ADC_REG_IsConversionOngoing>
 8004000:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 8134 	bne.w	8004278 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 8130 	bne.w	8004278 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004020:	f043 0202 	orr.w	r2, r3, #2
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff ff49 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d137      	bne.n	80040a8 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004040:	d004      	beq.n	800404c <HAL_ADC_Init+0x114>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a72      	ldr	r2, [pc, #456]	@ (8004210 <HAL_ADC_Init+0x2d8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d10f      	bne.n	800406c <HAL_ADC_Init+0x134>
 800404c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004050:	f7ff ff38 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004054:	4604      	mov	r4, r0
 8004056:	486e      	ldr	r0, [pc, #440]	@ (8004210 <HAL_ADC_Init+0x2d8>)
 8004058:	f7ff ff34 	bl	8003ec4 <LL_ADC_IsEnabled>
 800405c:	4603      	mov	r3, r0
 800405e:	4323      	orrs	r3, r4
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e008      	b.n	800407e <HAL_ADC_Init+0x146>
 800406c:	4869      	ldr	r0, [pc, #420]	@ (8004214 <HAL_ADC_Init+0x2dc>)
 800406e:	f7ff ff29 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d012      	beq.n	80040a8 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800408a:	d004      	beq.n	8004096 <HAL_ADC_Init+0x15e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5f      	ldr	r2, [pc, #380]	@ (8004210 <HAL_ADC_Init+0x2d8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_ADC_Init+0x162>
 8004096:	4a60      	ldr	r2, [pc, #384]	@ (8004218 <HAL_ADC_Init+0x2e0>)
 8004098:	e000      	b.n	800409c <HAL_ADC_Init+0x164>
 800409a:	4a60      	ldr	r2, [pc, #384]	@ (800421c <HAL_ADC_Init+0x2e4>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7ff fd72 	bl	8003b8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7f5b      	ldrb	r3, [r3, #29]
 80040ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80040b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80040be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d106      	bne.n	80040e4 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040da:	3b01      	subs	r3, #1
 80040dc:	045b      	lsls	r3, r3, #17
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	4b46      	ldr	r3, [pc, #280]	@ (8004220 <HAL_ADC_Init+0x2e8>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	430b      	orrs	r3, r1
 8004112:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff feee 	bl	8003f10 <LL_ADC_INJ_IsConversionOngoing>
 8004134:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d17b      	bne.n	8004234 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d178      	bne.n	8004234 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004146:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800414e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800415e:	f023 0302 	bic.w	r3, r3, #2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	69b9      	ldr	r1, [r7, #24]
 8004168:	430b      	orrs	r3, r1
 800416a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004182:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800418c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004190:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6911      	ldr	r1, [r2, #16]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	430b      	orrs	r3, r1
 800419e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80041a2:	e013      	b.n	80041cc <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80041b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80041c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041c8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d126      	bne.n	8004224 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80041ec:	4311      	orrs	r1, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041f8:	430a      	orrs	r2, r1
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	611a      	str	r2, [r3, #16]
 8004206:	e015      	b.n	8004234 <HAL_ADC_Init+0x2fc>
 8004208:	2000013c 	.word	0x2000013c
 800420c:	053e2d63 	.word	0x053e2d63
 8004210:	50000100 	.word	0x50000100
 8004214:	50000400 	.word	0x50000400
 8004218:	50000300 	.word	0x50000300
 800421c:	50000700 	.word	0x50000700
 8004220:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d10c      	bne.n	8004256 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	f023 010f 	bic.w	r1, r3, #15
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	1e5a      	subs	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	631a      	str	r2, [r3, #48]	@ 0x30
 8004254:	e007      	b.n	8004266 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 020f 	bic.w	r2, r2, #15
 8004264:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	f043 0201 	orr.w	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004276:	e007      	b.n	8004288 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	f043 0210 	orr.w	r2, r3, #16
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004288:	7ffb      	ldrb	r3, [r7, #31]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	@ 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd90      	pop	{r4, r7, pc}
 8004292:	bf00      	nop

08004294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b0b6      	sub	sp, #216	@ 0xd8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x24>
 80042b2:	2302      	movs	r3, #2
 80042b4:	f000 bc04 	b.w	8004ac0 <HAL_ADC_ConfigChannel+0x82c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fe10 	bl	8003eea <LL_ADC_REG_IsConversionOngoing>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f040 83e8 	bne.w	8004aa2 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7ff fd26 	bl	8003d30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fdfe 	bl	8003eea <LL_ADC_REG_IsConversionOngoing>
 80042ee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fe0a 	bl	8003f10 <LL_ADC_INJ_IsConversionOngoing>
 80042fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004300:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 81d9 	bne.w	80046bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800430a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 81d4 	bne.w	80046bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800431c:	d10f      	bne.n	800433e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	4619      	mov	r1, r3
 800432a:	f7ff fd2d 	bl	8003d88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fce7 	bl	8003d0a <LL_ADC_SetSamplingTimeCommonConfig>
 800433c:	e00e      	b.n	800435c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6819      	ldr	r1, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	461a      	mov	r2, r3
 800434c:	f7ff fd1c 	bl	8003d88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fcd7 	bl	8003d0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	08db      	lsrs	r3, r3, #3
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d022      	beq.n	80043c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6919      	ldr	r1, [r3, #16]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800438e:	f7ff fc31 	bl	8003bf4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6919      	ldr	r1, [r3, #16]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	461a      	mov	r2, r3
 80043a0:	f7ff fc7d 	bl	8003c9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d102      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x126>
 80043b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043b8:	e000      	b.n	80043bc <HAL_ADC_ConfigChannel+0x128>
 80043ba:	2300      	movs	r3, #0
 80043bc:	461a      	mov	r2, r3
 80043be:	f7ff fc89 	bl	8003cd4 <LL_ADC_SetOffsetSaturation>
 80043c2:	e17b      	b.n	80046bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2100      	movs	r1, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fc36 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x15c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fc2b 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	f003 021f 	and.w	r2, r3, #31
 80043ee:	e01e      	b.n	800442e <HAL_ADC_ConfigChannel+0x19a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fc20 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800440e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004412:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800441e:	2320      	movs	r3, #32
 8004420:	e004      	b.n	800442c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x1b2>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0e9b      	lsrs	r3, r3, #26
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	e018      	b.n	8004478 <HAL_ADC_ConfigChannel+0x1e4>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800445a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800445e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800446a:	2320      	movs	r3, #32
 800446c:	e004      	b.n	8004478 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800446e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004478:	429a      	cmp	r2, r3
 800447a:	d106      	bne.n	800448a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fbef 	bl	8003c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fbd3 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x222>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fbc8 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	f003 021f 	and.w	r2, r3, #31
 80044b4:	e01e      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x260>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fbbd 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80044d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80044dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80044e4:	2320      	movs	r3, #32
 80044e6:	e004      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80044e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_ADC_ConfigChannel+0x278>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0e9b      	lsrs	r3, r3, #26
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	e018      	b.n	800453e <HAL_ADC_ConfigChannel+0x2aa>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004520:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004528:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004530:	2320      	movs	r3, #32
 8004532:	e004      	b.n	800453e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004534:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800453e:	429a      	cmp	r2, r3
 8004540:	d106      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	2101      	movs	r1, #1
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fb8c 	bl	8003c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fb70 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 800455c:	4603      	mov	r3, r0
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_ADC_ConfigChannel+0x2e8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fb65 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	0e9b      	lsrs	r3, r3, #26
 8004576:	f003 021f 	and.w	r2, r3, #31
 800457a:	e01e      	b.n	80045ba <HAL_ADC_ConfigChannel+0x326>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2102      	movs	r1, #2
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fb5a 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004588:	4603      	mov	r3, r0
 800458a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800459a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800459e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80045a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80045aa:	2320      	movs	r3, #32
 80045ac:	e004      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80045ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x33e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	0e9b      	lsrs	r3, r3, #26
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	e016      	b.n	8004600 <HAL_ADC_ConfigChannel+0x36c>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80045e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80045ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80045f2:	2320      	movs	r3, #32
 80045f4:	e004      	b.n	8004600 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80045f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004600:	429a      	cmp	r2, r3
 8004602:	d106      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2200      	movs	r2, #0
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fb2b 	bl	8003c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2103      	movs	r1, #3
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fb0f 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <HAL_ADC_ConfigChannel+0x3aa>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2103      	movs	r1, #3
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fb04 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004634:	4603      	mov	r3, r0
 8004636:	0e9b      	lsrs	r3, r3, #26
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	e017      	b.n	800466e <HAL_ADC_ConfigChannel+0x3da>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2103      	movs	r1, #3
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff faf9 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004658:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800465a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004660:	2320      	movs	r3, #32
 8004662:	e003      	b.n	800466c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x3f2>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	0e9b      	lsrs	r3, r3, #26
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	e011      	b.n	80046aa <HAL_ADC_ConfigChannel+0x416>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004696:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800469e:	2320      	movs	r3, #32
 80046a0:	e003      	b.n	80046aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80046a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d106      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	2103      	movs	r1, #3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fad6 	bl	8003c68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fbff 	bl	8003ec4 <LL_ADC_IsEnabled>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 813d 	bne.w	8004948 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7ff fb80 	bl	8003de0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4aa2      	ldr	r2, [pc, #648]	@ (8004970 <HAL_ADC_ConfigChannel+0x6dc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	f040 812e 	bne.w	8004948 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x480>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	3301      	adds	r3, #1
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	2b09      	cmp	r3, #9
 800470a:	bf94      	ite	ls
 800470c:	2301      	movls	r3, #1
 800470e:	2300      	movhi	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e019      	b.n	8004748 <HAL_ADC_ConfigChannel+0x4b4>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004724:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004726:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800472c:	2320      	movs	r3, #32
 800472e:	e003      	b.n	8004738 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004730:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	3301      	adds	r3, #1
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2b09      	cmp	r3, #9
 8004740:	bf94      	ite	ls
 8004742:	2301      	movls	r3, #1
 8004744:	2300      	movhi	r3, #0
 8004746:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004748:	2b00      	cmp	r3, #0
 800474a:	d079      	beq.n	8004840 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x4d4>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	0e9b      	lsrs	r3, r3, #26
 800475e:	3301      	adds	r3, #1
 8004760:	069b      	lsls	r3, r3, #26
 8004762:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004766:	e015      	b.n	8004794 <HAL_ADC_ConfigChannel+0x500>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004778:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800477a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004780:	2320      	movs	r3, #32
 8004782:	e003      	b.n	800478c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3301      	adds	r3, #1
 800478e:	069b      	lsls	r3, r3, #26
 8004790:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x520>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0e9b      	lsrs	r3, r3, #26
 80047a6:	3301      	adds	r3, #1
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	e017      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x550>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80047c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80047c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80047cc:	2320      	movs	r3, #32
 80047ce:	e003      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80047d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d2:	fab3 f383 	clz	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <HAL_ADC_ConfigChannel+0x576>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	0e9b      	lsrs	r3, r3, #26
 80047fa:	3301      	adds	r3, #1
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	4613      	mov	r3, r2
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4413      	add	r3, r2
 8004806:	051b      	lsls	r3, r3, #20
 8004808:	e018      	b.n	800483c <HAL_ADC_ConfigChannel+0x5a8>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800481c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004822:	2320      	movs	r3, #32
 8004824:	e003      	b.n	800482e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004828:	fab3 f383 	clz	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f003 021f 	and.w	r2, r3, #31
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800483c:	430b      	orrs	r3, r1
 800483e:	e07e      	b.n	800493e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_ADC_ConfigChannel+0x5c8>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0e9b      	lsrs	r3, r3, #26
 8004852:	3301      	adds	r3, #1
 8004854:	069b      	lsls	r3, r3, #26
 8004856:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800485a:	e015      	b.n	8004888 <HAL_ADC_ConfigChannel+0x5f4>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004864:	fa93 f3a3 	rbit	r3, r3
 8004868:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004874:	2320      	movs	r3, #32
 8004876:	e003      	b.n	8004880 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	3301      	adds	r3, #1
 8004882:	069b      	lsls	r3, r3, #26
 8004884:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x614>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	3301      	adds	r3, #1
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2101      	movs	r1, #1
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	e017      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x644>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	61fb      	str	r3, [r7, #28]
  return result;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80048c0:	2320      	movs	r3, #32
 80048c2:	e003      	b.n	80048cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	3301      	adds	r3, #1
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	ea42 0103 	orr.w	r1, r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x670>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	0e9b      	lsrs	r3, r3, #26
 80048ee:	3301      	adds	r3, #1
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	3b1e      	subs	r3, #30
 80048fc:	051b      	lsls	r3, r3, #20
 80048fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004902:	e01b      	b.n	800493c <HAL_ADC_ConfigChannel+0x6a8>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	613b      	str	r3, [r7, #16]
  return result;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800491c:	2320      	movs	r3, #32
 800491e:	e003      	b.n	8004928 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	3301      	adds	r3, #1
 800492a:	f003 021f 	and.w	r2, r3, #31
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	3b1e      	subs	r3, #30
 8004936:	051b      	lsls	r3, r3, #20
 8004938:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800493c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004942:	4619      	mov	r1, r3
 8004944:	f7ff fa20 	bl	8003d88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_ADC_ConfigChannel+0x6e0>)
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80af 	beq.w	8004ab4 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800495e:	d004      	beq.n	800496a <HAL_ADC_ConfigChannel+0x6d6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a04      	ldr	r2, [pc, #16]	@ (8004978 <HAL_ADC_ConfigChannel+0x6e4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10a      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x6ec>
 800496a:	4b04      	ldr	r3, [pc, #16]	@ (800497c <HAL_ADC_ConfigChannel+0x6e8>)
 800496c:	e009      	b.n	8004982 <HAL_ADC_ConfigChannel+0x6ee>
 800496e:	bf00      	nop
 8004970:	407f0000 	.word	0x407f0000
 8004974:	80080000 	.word	0x80080000
 8004978:	50000100 	.word	0x50000100
 800497c:	50000300 	.word	0x50000300
 8004980:	4b51      	ldr	r3, [pc, #324]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x834>)
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff f928 	bl	8003bd8 <LL_ADC_GetCommonPathInternalCh>
 8004988:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a4e      	ldr	r2, [pc, #312]	@ (8004acc <HAL_ADC_ConfigChannel+0x838>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_ADC_ConfigChannel+0x70c>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x83c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d134      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d12e      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b4:	d17e      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049be:	d004      	beq.n	80049ca <HAL_ADC_ConfigChannel+0x736>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a43      	ldr	r2, [pc, #268]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x840>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x73a>
 80049ca:	4a43      	ldr	r2, [pc, #268]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x844>)
 80049cc:	e000      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x73c>
 80049ce:	4a3e      	ldr	r2, [pc, #248]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x834>)
 80049d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7ff f8e9 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049e0:	4b3e      	ldr	r3, [pc, #248]	@ (8004adc <HAL_ADC_ConfigChannel+0x848>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	099b      	lsrs	r3, r3, #6
 80049e6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ae0 <HAL_ADC_ConfigChannel+0x84c>)
 80049e8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ec:	099b      	lsrs	r3, r3, #6
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	4613      	mov	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049fa:	e002      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f9      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a08:	e054      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a35      	ldr	r2, [pc, #212]	@ (8004ae4 <HAL_ADC_ConfigChannel+0x850>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d120      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d11a      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a28:	d144      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a32:	d004      	beq.n	8004a3e <HAL_ADC_ConfigChannel+0x7aa>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a26      	ldr	r2, [pc, #152]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x840>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x7ae>
 8004a3e:	4a26      	ldr	r2, [pc, #152]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x844>)
 8004a40:	e000      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x7b0>
 8004a42:	4a21      	ldr	r2, [pc, #132]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x834>)
 8004a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f7ff f8af 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a54:	e02e      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a23      	ldr	r2, [pc, #140]	@ (8004ae8 <HAL_ADC_ConfigChannel+0x854>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d129      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d123      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a18      	ldr	r2, [pc, #96]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x840>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01e      	beq.n	8004ab4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a7e:	d004      	beq.n	8004a8a <HAL_ADC_ConfigChannel+0x7f6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a13      	ldr	r2, [pc, #76]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x840>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x7fa>
 8004a8a:	4a13      	ldr	r2, [pc, #76]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x844>)
 8004a8c:	e000      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x7fc>
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x834>)
 8004a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7ff f889 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
 8004aa0:	e008      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004abc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	37d8      	adds	r7, #216	@ 0xd8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	50000700 	.word	0x50000700
 8004acc:	c3210000 	.word	0xc3210000
 8004ad0:	90c00010 	.word	0x90c00010
 8004ad4:	50000100 	.word	0x50000100
 8004ad8:	50000300 	.word	0x50000300
 8004adc:	2000013c 	.word	0x2000013c
 8004ae0:	053e2d63 	.word	0x053e2d63
 8004ae4:	c7520000 	.word	0xc7520000
 8004ae8:	cb840000 	.word	0xcb840000

08004aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004afc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <__NVIC_SetPriorityGrouping+0x44>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b1e:	4a04      	ldr	r2, [pc, #16]	@ (8004b30 <__NVIC_SetPriorityGrouping+0x44>)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	60d3      	str	r3, [r2, #12]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b38:	4b04      	ldr	r3, [pc, #16]	@ (8004b4c <__NVIC_GetPriorityGrouping+0x18>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	f003 0307 	and.w	r3, r3, #7
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	db0b      	blt.n	8004b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	f003 021f 	and.w	r2, r3, #31
 8004b68:	4907      	ldr	r1, [pc, #28]	@ (8004b88 <__NVIC_EnableIRQ+0x38>)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2001      	movs	r0, #1
 8004b72:	fa00 f202 	lsl.w	r2, r0, r2
 8004b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	db0a      	blt.n	8004bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	490c      	ldr	r1, [pc, #48]	@ (8004bd8 <__NVIC_SetPriority+0x4c>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	0112      	lsls	r2, r2, #4
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb4:	e00a      	b.n	8004bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4908      	ldr	r1, [pc, #32]	@ (8004bdc <__NVIC_SetPriority+0x50>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	0112      	lsls	r2, r2, #4
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	440b      	add	r3, r1
 8004bca:	761a      	strb	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000e100 	.word	0xe000e100
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f1c3 0307 	rsb	r3, r3, #7
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	bf28      	it	cs
 8004bfe:	2304      	movcs	r3, #4
 8004c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d902      	bls.n	8004c10 <NVIC_EncodePriority+0x30>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3b03      	subs	r3, #3
 8004c0e:	e000      	b.n	8004c12 <NVIC_EncodePriority+0x32>
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	401a      	ands	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	43d9      	mvns	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	4313      	orrs	r3, r2
         );
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3724      	adds	r7, #36	@ 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004c4c:	f3bf 8f4f 	dsb	sy
}
 8004c50:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <__NVIC_SystemReset+0x24>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c5a:	4904      	ldr	r1, [pc, #16]	@ (8004c6c <__NVIC_SystemReset+0x24>)
 8004c5c:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <__NVIC_SystemReset+0x28>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c62:	f3bf 8f4f 	dsb	sy
}
 8004c66:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <__NVIC_SystemReset+0x20>
 8004c6c:	e000ed00 	.word	0xe000ed00
 8004c70:	05fa0004 	.word	0x05fa0004

08004c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c84:	d301      	bcc.n	8004c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00f      	b.n	8004caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <SysTick_Config+0x40>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c92:	210f      	movs	r1, #15
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c98:	f7ff ff78 	bl	8004b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <SysTick_Config+0x40>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca2:	4b04      	ldr	r3, [pc, #16]	@ (8004cb4 <SysTick_Config+0x40>)
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	e000e010 	.word	0xe000e010

08004cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff13 	bl	8004aec <__NVIC_SetPriorityGrouping>
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cdc:	f7ff ff2a 	bl	8004b34 <__NVIC_GetPriorityGrouping>
 8004ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff ff7a 	bl	8004be0 <NVIC_EncodePriority>
 8004cec:	4602      	mov	r2, r0
 8004cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff49 	bl	8004b8c <__NVIC_SetPriority>
}
 8004cfa:	bf00      	nop
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	4603      	mov	r3, r0
 8004d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff1d 	bl	8004b50 <__NVIC_EnableIRQ>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004d22:	f7ff ff91 	bl	8004c48 <__NVIC_SystemReset>

08004d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff ffa0 	bl	8004c74 <SysTick_Config>
 8004d34:	4603      	mov	r3, r0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d00d      	beq.n	8004d72 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2204      	movs	r2, #4
 8004d5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
 8004d70:	e047      	b.n	8004e02 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 020e 	bic.w	r2, r2, #14
 8004d80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004da0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f003 021f 	and.w	r2, r3, #31
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dbe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00c      	beq.n	8004de2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004de0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
    }
  }
  return status;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e1a:	b2db      	uxtb	r3, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e147      	b.n	80050ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fe f9f6 	bl	8003240 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0210 	bic.w	r2, r2, #16
 8004e62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e64:	f7fe fe64 	bl	8003b30 <HAL_GetTick>
 8004e68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e6a:	e012      	b.n	8004e92 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e6c:	f7fe fe60 	bl	8003b30 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b0a      	cmp	r3, #10
 8004e78:	d90b      	bls.n	8004e92 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e7e:	f043 0201 	orr.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2203      	movs	r2, #3
 8004e8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e11b      	b.n	80050ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d0e5      	beq.n	8004e6c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eb0:	f7fe fe3e 	bl	8003b30 <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004eb6:	e012      	b.n	8004ede <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004eb8:	f7fe fe3a 	bl	8003b30 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b0a      	cmp	r3, #10
 8004ec4:	d90b      	bls.n	8004ede <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0f5      	b.n	80050ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0e5      	beq.n	8004eb8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0202 	orr.w	r2, r2, #2
 8004efa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a74      	ldr	r2, [pc, #464]	@ (80050d4 <HAL_FDCAN_Init+0x2ac>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d103      	bne.n	8004f0e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004f06:	4a74      	ldr	r2, [pc, #464]	@ (80050d8 <HAL_FDCAN_Init+0x2b0>)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	7c1b      	ldrb	r3, [r3, #16]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d108      	bne.n	8004f28 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f24:	619a      	str	r2, [r3, #24]
 8004f26:	e007      	b.n	8004f38 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f36:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	7c5b      	ldrb	r3, [r3, #17]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d108      	bne.n	8004f52 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f4e:	619a      	str	r2, [r3, #24]
 8004f50:	e007      	b.n	8004f62 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699a      	ldr	r2, [r3, #24]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f60:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7c9b      	ldrb	r3, [r3, #18]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d108      	bne.n	8004f7c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f78:	619a      	str	r2, [r3, #24]
 8004f7a:	e007      	b.n	8004f8c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f8a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004fb0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0210 	bic.w	r2, r2, #16
 8004fc0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d108      	bne.n	8004fdc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0204 	orr.w	r2, r2, #4
 8004fd8:	619a      	str	r2, [r3, #24]
 8004fda:	e02c      	b.n	8005036 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d028      	beq.n	8005036 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d01c      	beq.n	8005026 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ffa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0210 	orr.w	r2, r2, #16
 800500a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d110      	bne.n	8005036 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0220 	orr.w	r2, r2, #32
 8005022:	619a      	str	r2, [r3, #24]
 8005024:	e007      	b.n	8005036 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0220 	orr.w	r2, r2, #32
 8005034:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	3b01      	subs	r3, #1
 800503c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	3b01      	subs	r3, #1
 8005044:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005046:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800504e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	3b01      	subs	r3, #1
 8005058:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800505e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005060:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506a:	d115      	bne.n	8005098 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	3b01      	subs	r3, #1
 8005078:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800507a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005080:	3b01      	subs	r3, #1
 8005082:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005084:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	3b01      	subs	r3, #1
 800508e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005094:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005096:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f814 	bl	80050dc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40006400 	.word	0x40006400
 80050d8:	40006500 	.word	0x40006500

080050dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80050e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005198 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80050e6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2b      	ldr	r2, [pc, #172]	@ (800519c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d103      	bne.n	80050fa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80050f8:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005108:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005110:	041a      	lsls	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005136:	061a      	lsls	r2, r3, #24
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	e005      	b.n	800517c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3304      	adds	r3, #4
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	429a      	cmp	r2, r3
 8005186:	d3f3      	bcc.n	8005170 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	4000a400 	.word	0x4000a400
 800519c:	40006800 	.word	0x40006800

080051a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051ae:	e15a      	b.n	8005466 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	2101      	movs	r1, #1
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	4013      	ands	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 814c 	beq.w	8005460 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d005      	beq.n	80051e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d130      	bne.n	8005242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	2203      	movs	r2, #3
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4013      	ands	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005216:	2201      	movs	r2, #1
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4013      	ands	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	f003 0201 	and.w	r2, r3, #1
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b03      	cmp	r3, #3
 800524c:	d017      	beq.n	800527e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	2203      	movs	r2, #3
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43db      	mvns	r3, r3
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4013      	ands	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d123      	bne.n	80052d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	08da      	lsrs	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3208      	adds	r2, #8
 8005292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	220f      	movs	r2, #15
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43db      	mvns	r3, r3
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4013      	ands	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	08da      	lsrs	r2, r3, #3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3208      	adds	r2, #8
 80052cc:	6939      	ldr	r1, [r7, #16]
 80052ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	2203      	movs	r2, #3
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4013      	ands	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f003 0203 	and.w	r2, r3, #3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 80a6 	beq.w	8005460 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005314:	4b5b      	ldr	r3, [pc, #364]	@ (8005484 <HAL_GPIO_Init+0x2e4>)
 8005316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005318:	4a5a      	ldr	r2, [pc, #360]	@ (8005484 <HAL_GPIO_Init+0x2e4>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005320:	4b58      	ldr	r3, [pc, #352]	@ (8005484 <HAL_GPIO_Init+0x2e4>)
 8005322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800532c:	4a56      	ldr	r2, [pc, #344]	@ (8005488 <HAL_GPIO_Init+0x2e8>)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	089b      	lsrs	r3, r3, #2
 8005332:	3302      	adds	r3, #2
 8005334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	220f      	movs	r2, #15
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005356:	d01f      	beq.n	8005398 <HAL_GPIO_Init+0x1f8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a4c      	ldr	r2, [pc, #304]	@ (800548c <HAL_GPIO_Init+0x2ec>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d019      	beq.n	8005394 <HAL_GPIO_Init+0x1f4>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a4b      	ldr	r2, [pc, #300]	@ (8005490 <HAL_GPIO_Init+0x2f0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <HAL_GPIO_Init+0x1f0>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a4a      	ldr	r2, [pc, #296]	@ (8005494 <HAL_GPIO_Init+0x2f4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00d      	beq.n	800538c <HAL_GPIO_Init+0x1ec>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a49      	ldr	r2, [pc, #292]	@ (8005498 <HAL_GPIO_Init+0x2f8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <HAL_GPIO_Init+0x1e8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a48      	ldr	r2, [pc, #288]	@ (800549c <HAL_GPIO_Init+0x2fc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d101      	bne.n	8005384 <HAL_GPIO_Init+0x1e4>
 8005380:	2305      	movs	r3, #5
 8005382:	e00a      	b.n	800539a <HAL_GPIO_Init+0x1fa>
 8005384:	2306      	movs	r3, #6
 8005386:	e008      	b.n	800539a <HAL_GPIO_Init+0x1fa>
 8005388:	2304      	movs	r3, #4
 800538a:	e006      	b.n	800539a <HAL_GPIO_Init+0x1fa>
 800538c:	2303      	movs	r3, #3
 800538e:	e004      	b.n	800539a <HAL_GPIO_Init+0x1fa>
 8005390:	2302      	movs	r3, #2
 8005392:	e002      	b.n	800539a <HAL_GPIO_Init+0x1fa>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <HAL_GPIO_Init+0x1fa>
 8005398:	2300      	movs	r3, #0
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	f002 0203 	and.w	r2, r2, #3
 80053a0:	0092      	lsls	r2, r2, #2
 80053a2:	4093      	lsls	r3, r2
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053aa:	4937      	ldr	r1, [pc, #220]	@ (8005488 <HAL_GPIO_Init+0x2e8>)
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	089b      	lsrs	r3, r3, #2
 80053b0:	3302      	adds	r3, #2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053b8:	4b39      	ldr	r3, [pc, #228]	@ (80054a0 <HAL_GPIO_Init+0x300>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4013      	ands	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053dc:	4a30      	ldr	r2, [pc, #192]	@ (80054a0 <HAL_GPIO_Init+0x300>)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80053e2:	4b2f      	ldr	r3, [pc, #188]	@ (80054a0 <HAL_GPIO_Init+0x300>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005406:	4a26      	ldr	r2, [pc, #152]	@ (80054a0 <HAL_GPIO_Init+0x300>)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800540c:	4b24      	ldr	r3, [pc, #144]	@ (80054a0 <HAL_GPIO_Init+0x300>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	43db      	mvns	r3, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4013      	ands	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005430:	4a1b      	ldr	r2, [pc, #108]	@ (80054a0 <HAL_GPIO_Init+0x300>)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005436:	4b1a      	ldr	r3, [pc, #104]	@ (80054a0 <HAL_GPIO_Init+0x300>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	43db      	mvns	r3, r3
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4013      	ands	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800545a:	4a11      	ldr	r2, [pc, #68]	@ (80054a0 <HAL_GPIO_Init+0x300>)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3301      	adds	r3, #1
 8005464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	f47f ae9d 	bne.w	80051b0 <HAL_GPIO_Init+0x10>
  }
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40021000 	.word	0x40021000
 8005488:	40010000 	.word	0x40010000
 800548c:	48000400 	.word	0x48000400
 8005490:	48000800 	.word	0x48000800
 8005494:	48000c00 	.word	0x48000c00
 8005498:	48001000 	.word	0x48001000
 800549c:	48001400 	.word	0x48001400
 80054a0:	40010400 	.word	0x40010400

080054a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
 80054b0:	4613      	mov	r3, r2
 80054b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054b4:	787b      	ldrb	r3, [r7, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054ba:	887a      	ldrh	r2, [r7, #2]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054c0:	e002      	b.n	80054c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054c2:	887a      	ldrh	r2, [r7, #2]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e08d      	b.n	8005602 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fd fefa 	bl	80032f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2224      	movs	r2, #36	@ 0x24
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005524:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005534:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d107      	bne.n	800554e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800554a:	609a      	str	r2, [r3, #8]
 800554c:	e006      	b.n	800555c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800555a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d108      	bne.n	8005576 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	e007      	b.n	8005586 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005598:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69d9      	ldr	r1, [r3, #28]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005628:	2b28      	cmp	r3, #40	@ 0x28
 800562a:	f040 8098 	bne.w	800575e <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d105      	bne.n	8005646 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005640:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e08c      	b.n	8005760 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005646:	f248 0101 	movw	r1, #32769	@ 0x8001
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f001 fbdc 	bl	8006e08 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800565a:	2302      	movs	r3, #2
 800565c:	e080      	b.n	8005760 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005670:	d12a      	bne.n	80056c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005672:	2102      	movs	r1, #2
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f001 fbc7 	bl	8006e08 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005688:	d11e      	bne.n	80056c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005698:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d012      	beq.n	80056c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	4a30      	ldr	r2, [pc, #192]	@ (8005768 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80056a8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fb45 	bl	8004d3e <HAL_DMA_Abort_IT>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d006      	beq.n	80056c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056c4:	4610      	mov	r0, r2
 80056c6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2229      	movs	r2, #41	@ 0x29
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056ec:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a17      	ldr	r2, [pc, #92]	@ (800576c <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800570e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b08      	cmp	r3, #8
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d106      	bne.n	8005748 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2208      	movs	r2, #8
 8005746:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005750:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f001 fad3 	bl	8006d00 <I2C_Enable_IRQ>

    return HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	e000      	b.n	8005760 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
  }
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	08006c5f 	.word	0x08006c5f
 800576c:	08005a87 	.word	0x08005a87

08005770 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800578c:	2b28      	cmp	r3, #40	@ 0x28
 800578e:	f040 8098 	bne.w	80058c2 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d105      	bne.n	80057aa <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e08c      	b.n	80058c4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80057aa:	f248 0102 	movw	r1, #32770	@ 0x8002
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f001 fb2a 	bl	8006e08 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80057be:	2302      	movs	r3, #2
 80057c0:	e080      	b.n	80058c4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b29      	cmp	r3, #41	@ 0x29
 80057d4:	d12a      	bne.n	800582c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057d6:	2101      	movs	r1, #1
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f001 fb15 	bl	8006e08 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057ec:	d11e      	bne.n	800582c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057fc:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005802:	2b00      	cmp	r3, #0
 8005804:	d012      	beq.n	800582c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580a:	4a30      	ldr	r2, [pc, #192]	@ (80058cc <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 800580c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fa93 	bl	8004d3e <HAL_DMA_Abort_IT>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	222a      	movs	r2, #42	@ 0x2a
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005850:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a17      	ldr	r2, [pc, #92]	@ (80058d0 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8005872:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b08      	cmp	r3, #8
 8005880:	bf0c      	ite	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	2300      	movne	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2208      	movs	r2, #8
 80058aa:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80058b4:	f248 0102 	movw	r1, #32770	@ 0x8002
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f001 fa21 	bl	8006d00 <I2C_Enable_IRQ>

    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	08006c5f 	.word	0x08006c5f
 80058d0:	08005a87 	.word	0x08005a87

080058d4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d10d      	bne.n	8005904 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2228      	movs	r2, #40	@ 0x28
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <HAL_I2C_EnableListen_IT+0x3c>)
 80058f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80058f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fa00 	bl	8006d00 <I2C_Enable_IRQ>

    return HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	e000      	b.n	8005906 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8005904:	2302      	movs	r3, #2
  }
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	08005a87 	.word	0x08005a87

08005914 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
  }
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	09db      	lsrs	r3, r3, #7
 8005970:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597c:	f043 0201 	orr.w	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800598c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	0a9b      	lsrs	r3, r3, #10
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d010      	beq.n	80059bc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	09db      	lsrs	r3, r3, #7
 800599e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059aa:	f043 0208 	orr.w	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	0a5b      	lsrs	r3, r3, #9
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	09db      	lsrs	r3, r3, #7
 80059cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d8:	f043 0202 	orr.w	r2, r3, #2
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 030b 	and.w	r3, r3, #11
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fff3 	bl	80069e8 <I2C_ITError>
  }
}
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <I2C_Slave_ISR_IT+0x24>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e0ed      	b.n	8005c86 <I2C_Slave_ISR_IT+0x200>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005aca:	6939      	ldr	r1, [r7, #16]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fdcb 	bl	8006668 <I2C_ITSlaveCplt>
 8005ad2:	e0d3      	b.n	8005c7c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d04d      	beq.n	8005b7c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	091b      	lsrs	r3, r3, #4
 8005ae4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d047      	beq.n	8005b7c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d128      	bne.n	8005b48 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b28      	cmp	r3, #40	@ 0x28
 8005b00:	d108      	bne.n	8005b14 <I2C_Slave_ISR_IT+0x8e>
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b08:	d104      	bne.n	8005b14 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005b0a:	6939      	ldr	r1, [r7, #16]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 ff15 	bl	800693c <I2C_ITListenCplt>
 8005b12:	e032      	b.n	8005b7a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b29      	cmp	r3, #41	@ 0x29
 8005b1e:	d10e      	bne.n	8005b3e <I2C_Slave_ISR_IT+0xb8>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b26:	d00a      	beq.n	8005b3e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f001 f870 	bl	8006c16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 fc6e 	bl	8006418 <I2C_ITSlaveSeqCplt>
 8005b3c:	e01d      	b.n	8005b7a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2210      	movs	r2, #16
 8005b44:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005b46:	e096      	b.n	8005c76 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2210      	movs	r2, #16
 8005b4e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b54:	f043 0204 	orr.w	r2, r3, #4
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <I2C_Slave_ISR_IT+0xe6>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b68:	f040 8085 	bne.w	8005c76 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b70:	4619      	mov	r1, r3
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 ff38 	bl	80069e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b78:	e07d      	b.n	8005c76 <I2C_Slave_ISR_IT+0x1f0>
 8005b7a:	e07c      	b.n	8005c76 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d030      	beq.n	8005bea <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d02a      	beq.n	8005bea <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d14f      	bne.n	8005c7a <I2C_Slave_ISR_IT+0x1f4>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005be0:	d04b      	beq.n	8005c7a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fc18 	bl	8006418 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005be8:	e047      	b.n	8005c7a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	08db      	lsrs	r3, r3, #3
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	08db      	lsrs	r3, r3, #3
 8005bfa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fb46 	bl	8006296 <I2C_ITAddrCplt>
 8005c0a:	e037      	b.n	8005c7c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d031      	beq.n	8005c7c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d02b      	beq.n	8005c7c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d018      	beq.n	8005c60 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c32:	781a      	ldrb	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005c5e:	e00d      	b.n	8005c7c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c66:	d002      	beq.n	8005c6e <I2C_Slave_ISR_IT+0x1e8>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fbd2 	bl	8006418 <I2C_ITSlaveSeqCplt>
 8005c74:	e002      	b.n	8005c7c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8005c76:	bf00      	nop
 8005c78:	e000      	b.n	8005c7c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005c7a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b088      	sub	sp, #32
 8005c92:	af02      	add	r7, sp, #8
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <I2C_Master_ISR_DMA+0x1a>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e0e1      	b.n	8005e6c <I2C_Master_ISR_DMA+0x1de>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d017      	beq.n	8005cec <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d011      	beq.n	8005cec <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd4:	f043 0204 	orr.w	r2, r3, #4
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005cdc:	2120      	movs	r1, #32
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f001 f80e 	bl	8006d00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 ff96 	bl	8006c16 <I2C_Flush_TXDR>
 8005cea:	e0ba      	b.n	8005e62 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d072      	beq.n	8005dde <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	099b      	lsrs	r3, r3, #6
 8005cfc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d06c      	beq.n	8005dde <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d12:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d04e      	beq.n	8005dbc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2bff      	cmp	r3, #255	@ 0xff
 8005d34:	d906      	bls.n	8005d44 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	22ff      	movs	r2, #255	@ 0xff
 8005d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005d3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e010      	b.n	8005d66 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d56:	d003      	beq.n	8005d60 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e002      	b.n	8005d66 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005d60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d64:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	8a79      	ldrh	r1, [r7, #18]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 ff91 	bl	8006c9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b22      	cmp	r3, #34	@ 0x22
 8005d96:	d108      	bne.n	8005daa <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005da6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005da8:	e05b      	b.n	8005e62 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005db8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005dba:	e052      	b.n	8005e62 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dca:	d003      	beq.n	8005dd4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fae6 	bl	800639e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005dd2:	e046      	b.n	8005e62 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005dd4:	2140      	movs	r1, #64	@ 0x40
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fe06 	bl	80069e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005ddc:	e041      	b.n	8005e62 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	099b      	lsrs	r3, r3, #6
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d029      	beq.n	8005e3e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d023      	beq.n	8005e3e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d119      	bne.n	8005e34 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e0e:	d027      	beq.n	8005e60 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e18:	d108      	bne.n	8005e2c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e28:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005e2a:	e019      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fab6 	bl	800639e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005e32:	e015      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e34:	2140      	movs	r1, #64	@ 0x40
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fdd6 	bl	80069e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005e3c:	e010      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fb3b 	bl	80064d4 <I2C_ITMasterCplt>
 8005e5e:	e000      	b.n	8005e62 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005e60:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005e80:	4b92      	ldr	r3, [pc, #584]	@ (80060cc <I2C_Mem_ISR_DMA+0x258>)
 8005e82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <I2C_Mem_ISR_DMA+0x1e>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e118      	b.n	80060c4 <I2C_Mem_ISR_DMA+0x250>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d017      	beq.n	8005ed6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d011      	beq.n	8005ed6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	f043 0204 	orr.w	r2, r3, #4
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ec6:	2120      	movs	r1, #32
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 ff19 	bl	8006d00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fea1 	bl	8006c16 <I2C_Flush_TXDR>
 8005ed4:	e0f1      	b.n	80060ba <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00f      	beq.n	8005f02 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ef6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005efe:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f00:	e0db      	b.n	80060ba <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	09db      	lsrs	r3, r3, #7
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d060      	beq.n	8005fd0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	099b      	lsrs	r3, r3, #6
 8005f12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d05a      	beq.n	8005fd0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 ff73 	bl	8006e08 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005f22:	2110      	movs	r1, #16
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 feeb 	bl	8006d00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d048      	beq.n	8005fc6 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2bff      	cmp	r3, #255	@ 0xff
 8005f3c:	d910      	bls.n	8005f60 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	22ff      	movs	r2, #255	@ 0xff
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f48:	b299      	uxth	r1, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	2300      	movs	r3, #0
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fe9f 	bl	8006c9c <I2C_TransferConfig>
 8005f5e:	e011      	b.n	8005f84 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6e:	b299      	uxth	r1, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fe8c 	bl	8006c9c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b22      	cmp	r3, #34	@ 0x22
 8005fa0:	d108      	bne.n	8005fb4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fb2:	e082      	b.n	80060ba <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fc4:	e079      	b.n	80060ba <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fc6:	2140      	movs	r1, #64	@ 0x40
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fd0d 	bl	80069e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005fce:	e074      	b.n	80060ba <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	099b      	lsrs	r3, r3, #6
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d05e      	beq.n	800609a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	099b      	lsrs	r3, r3, #6
 8005fe0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d058      	beq.n	800609a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fe8:	2101      	movs	r1, #1
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 ff0c 	bl	8006e08 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005ff0:	2110      	movs	r1, #16
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fe84 	bl	8006d00 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b22      	cmp	r3, #34	@ 0x22
 8006002:	d101      	bne.n	8006008 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8006004:	4b32      	ldr	r3, [pc, #200]	@ (80060d0 <I2C_Mem_ISR_DMA+0x25c>)
 8006006:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	2bff      	cmp	r3, #255	@ 0xff
 8006010:	d910      	bls.n	8006034 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	22ff      	movs	r2, #255	@ 0xff
 8006016:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601c:	b299      	uxth	r1, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006022:	b2da      	uxtb	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fe35 	bl	8006c9c <I2C_TransferConfig>
 8006032:	e011      	b.n	8006058 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006042:	b299      	uxth	r1, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006048:	b2da      	uxtb	r2, r3
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fe22 	bl	8006c9c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b22      	cmp	r3, #34	@ 0x22
 8006074:	d108      	bne.n	8006088 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006084:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006086:	e018      	b.n	80060ba <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006096:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006098:	e00f      	b.n	80060ba <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fa0d 	bl	80064d4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	80002000 	.word	0x80002000
 80060d0:	80002400 	.word	0x80002400

080060d4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <I2C_Slave_ISR_DMA+0x24>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e0ca      	b.n	800628e <I2C_Slave_ISR_DMA+0x1ba>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 faa4 	bl	8006668 <I2C_ITSlaveCplt>
 8006120:	e0b0      	b.n	8006284 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	091b      	lsrs	r3, r3, #4
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 809a 	beq.w	8006264 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8093 	beq.w	8006264 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	0b9b      	lsrs	r3, r3, #14
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	0bdb      	lsrs	r3, r3, #15
 800614e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006152:	2b00      	cmp	r3, #0
 8006154:	d07f      	beq.n	8006256 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00d      	beq.n	800617a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	0bdb      	lsrs	r3, r3, #15
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8006176:	2301      	movs	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	0b9b      	lsrs	r3, r3, #14
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800619a:	2301      	movs	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d128      	bne.n	80061f6 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b28      	cmp	r3, #40	@ 0x28
 80061ae:	d108      	bne.n	80061c2 <I2C_Slave_ISR_DMA+0xee>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061b6:	d104      	bne.n	80061c2 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fbbe 	bl	800693c <I2C_ITListenCplt>
 80061c0:	e048      	b.n	8006254 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b29      	cmp	r3, #41	@ 0x29
 80061cc:	d10e      	bne.n	80061ec <I2C_Slave_ISR_DMA+0x118>
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061d4:	d00a      	beq.n	80061ec <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2210      	movs	r2, #16
 80061dc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fd19 	bl	8006c16 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f917 	bl	8006418 <I2C_ITSlaveSeqCplt>
 80061ea:	e033      	b.n	8006254 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2210      	movs	r2, #16
 80061f2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80061f4:	e034      	b.n	8006260 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2210      	movs	r2, #16
 80061fc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	f043 0204 	orr.w	r2, r3, #4
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006210:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <I2C_Slave_ISR_DMA+0x14c>
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800621e:	d11f      	bne.n	8006260 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b21      	cmp	r3, #33	@ 0x21
 8006224:	d002      	beq.n	800622c <I2C_Slave_ISR_DMA+0x158>
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	2b29      	cmp	r3, #41	@ 0x29
 800622a:	d103      	bne.n	8006234 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2221      	movs	r2, #33	@ 0x21
 8006230:	631a      	str	r2, [r3, #48]	@ 0x30
 8006232:	e008      	b.n	8006246 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	2b22      	cmp	r3, #34	@ 0x22
 8006238:	d002      	beq.n	8006240 <I2C_Slave_ISR_DMA+0x16c>
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	2b2a      	cmp	r3, #42	@ 0x2a
 800623e:	d102      	bne.n	8006246 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2222      	movs	r2, #34	@ 0x22
 8006244:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624a:	4619      	mov	r1, r3
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fbcb 	bl	80069e8 <I2C_ITError>
      if (treatdmanack == 1U)
 8006252:	e005      	b.n	8006260 <I2C_Slave_ISR_DMA+0x18c>
 8006254:	e004      	b.n	8006260 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2210      	movs	r2, #16
 800625c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800625e:	e011      	b.n	8006284 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8006260:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006262:	e00f      	b.n	8006284 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	08db      	lsrs	r3, r3, #3
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d009      	beq.n	8006284 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	08db      	lsrs	r3, r3, #3
 8006274:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f809 	bl	8006296 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80062ac:	2b28      	cmp	r3, #40	@ 0x28
 80062ae:	d16a      	bne.n	8006386 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	0c1b      	lsrs	r3, r3, #16
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	0c1b      	lsrs	r3, r3, #16
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80062ce:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062dc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80062ea:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d138      	bne.n	8006366 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80062f4:	897b      	ldrh	r3, [r7, #10]
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	89bb      	ldrh	r3, [r7, #12]
 80062fc:	4053      	eors	r3, r2
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f003 0306 	and.w	r3, r3, #6
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11c      	bne.n	8006342 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006308:	897b      	ldrh	r3, [r7, #10]
 800630a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800631a:	2b02      	cmp	r3, #2
 800631c:	d13b      	bne.n	8006396 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2208      	movs	r2, #8
 800632a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006334:	89ba      	ldrh	r2, [r7, #12]
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fc fbd0 	bl	8002ae0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006340:	e029      	b.n	8006396 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006342:	893b      	ldrh	r3, [r7, #8]
 8006344:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006346:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fd5c 	bl	8006e08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006358:	89ba      	ldrh	r2, [r7, #12]
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fc fbbe 	bl	8002ae0 <HAL_I2C_AddrCallback>
}
 8006364:	e017      	b.n	8006396 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fd4c 	bl	8006e08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006378:	89ba      	ldrh	r2, [r7, #12]
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc fbae 	bl	8002ae0 <HAL_I2C_AddrCallback>
}
 8006384:	e007      	b.n	8006396 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2208      	movs	r2, #8
 800638c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b21      	cmp	r3, #33	@ 0x21
 80063b8:	d115      	bne.n	80063e6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2211      	movs	r2, #17
 80063c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063ce:	2101      	movs	r1, #1
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fd19 	bl	8006e08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fb13 	bl	8005a0a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063e4:	e014      	b.n	8006410 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2212      	movs	r2, #18
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063fa:	2102      	movs	r1, #2
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fd03 	bl	8006e08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fb07 	bl	8005a1e <HAL_I2C_MasterRxCpltCallback>
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	0b9b      	lsrs	r3, r3, #14
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e00d      	b.n	800646a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	0bdb      	lsrs	r3, r3, #15
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006468:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b29      	cmp	r3, #41	@ 0x29
 8006474:	d112      	bne.n	800649c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2228      	movs	r2, #40	@ 0x28
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2221      	movs	r2, #33	@ 0x21
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006484:	2101      	movs	r1, #1
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fcbe 	bl	8006e08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fc fb4f 	bl	8002b38 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800649a:	e017      	b.n	80064cc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80064a6:	d111      	bne.n	80064cc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2228      	movs	r2, #40	@ 0x28
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2222      	movs	r2, #34	@ 0x22
 80064b4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80064b6:	2102      	movs	r1, #2
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fca5 	bl	8006e08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fc fb4e 	bl	8002b68 <HAL_I2C_SlaveRxCpltCallback>
}
 80064cc:	bf00      	nop
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2220      	movs	r2, #32
 80064e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b21      	cmp	r3, #33	@ 0x21
 80064f4:	d107      	bne.n	8006506 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064f6:	2101      	movs	r1, #1
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fc85 	bl	8006e08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2211      	movs	r2, #17
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30
 8006504:	e00c      	b.n	8006520 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b22      	cmp	r3, #34	@ 0x22
 8006510:	d106      	bne.n	8006520 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006512:	2102      	movs	r1, #2
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc77 	bl	8006e08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2212      	movs	r2, #18
 800651e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6859      	ldr	r1, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b4d      	ldr	r3, [pc, #308]	@ (8006660 <I2C_ITMasterCplt+0x18c>)
 800652c:	400b      	ands	r3, r1
 800652e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a4a      	ldr	r2, [pc, #296]	@ (8006664 <I2C_ITMasterCplt+0x190>)
 800653a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d009      	beq.n	800655c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2210      	movs	r2, #16
 800654e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006554:	f043 0204 	orr.w	r2, r3, #4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b60      	cmp	r3, #96	@ 0x60
 8006566:	d10b      	bne.n	8006580 <I2C_ITMasterCplt+0xac>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	b2db      	uxtb	r3, r3
 800657c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800657e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb48 	bl	8006c16 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b60      	cmp	r3, #96	@ 0x60
 8006596:	d002      	beq.n	800659e <I2C_ITMasterCplt+0xca>
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fa1f 	bl	80069e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80065aa:	e054      	b.n	8006656 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b21      	cmp	r3, #33	@ 0x21
 80065b6:	d124      	bne.n	8006602 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b40      	cmp	r3, #64	@ 0x40
 80065d0:	d10b      	bne.n	80065ea <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fa25 	bl	8005a32 <HAL_I2C_MemTxCpltCallback>
}
 80065e8:	e035      	b.n	8006656 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fa05 	bl	8005a0a <HAL_I2C_MasterTxCpltCallback>
}
 8006600:	e029      	b.n	8006656 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b22      	cmp	r3, #34	@ 0x22
 800660c:	d123      	bne.n	8006656 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b40      	cmp	r3, #64	@ 0x40
 8006626:	d10b      	bne.n	8006640 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff fa04 	bl	8005a46 <HAL_I2C_MemRxCpltCallback>
}
 800663e:	e00a      	b.n	8006656 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f9e4 	bl	8005a1e <HAL_I2C_MasterRxCpltCallback>
}
 8006656:	bf00      	nop
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	fe00e800 	.word	0xfe00e800
 8006664:	ffff0000 	.word	0xffff0000

08006668 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006682:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2220      	movs	r2, #32
 8006692:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006694:	7afb      	ldrb	r3, [r7, #11]
 8006696:	2b21      	cmp	r3, #33	@ 0x21
 8006698:	d002      	beq.n	80066a0 <I2C_ITSlaveCplt+0x38>
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	2b29      	cmp	r3, #41	@ 0x29
 800669e:	d108      	bne.n	80066b2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80066a0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fbaf 	bl	8006e08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2221      	movs	r2, #33	@ 0x21
 80066ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80066b0:	e019      	b.n	80066e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80066b2:	7afb      	ldrb	r3, [r7, #11]
 80066b4:	2b22      	cmp	r3, #34	@ 0x22
 80066b6:	d002      	beq.n	80066be <I2C_ITSlaveCplt+0x56>
 80066b8:	7afb      	ldrb	r3, [r7, #11]
 80066ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80066bc:	d108      	bne.n	80066d0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80066be:	f248 0102 	movw	r1, #32770	@ 0x8002
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fba0 	bl	8006e08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2222      	movs	r2, #34	@ 0x22
 80066cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80066ce:	e00a      	b.n	80066e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	2b28      	cmp	r3, #40	@ 0x28
 80066d4:	d107      	bne.n	80066e6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80066d6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fb94 	bl	8006e08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066f4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b8c      	ldr	r3, [pc, #560]	@ (8006934 <I2C_ITSlaveCplt+0x2cc>)
 8006702:	400b      	ands	r3, r1
 8006704:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa85 	bl	8006c16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	0b9b      	lsrs	r3, r3, #14
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d013      	beq.n	8006740 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006726:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672c:	2b00      	cmp	r3, #0
 800672e:	d020      	beq.n	8006772 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	b29a      	uxth	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800673e:	e018      	b.n	8006772 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	0bdb      	lsrs	r3, r3, #15
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d012      	beq.n	8006772 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800675a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	089b      	lsrs	r3, r3, #2
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d020      	beq.n	80067c0 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 0304 	bic.w	r3, r3, #4
 8006784:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00c      	beq.n	80067c0 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ce:	f043 0204 	orr.w	r2, r3, #4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	091b      	lsrs	r3, r3, #4
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d04a      	beq.n	8006878 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d044      	beq.n	8006878 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d128      	bne.n	800684a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b28      	cmp	r3, #40	@ 0x28
 8006802:	d108      	bne.n	8006816 <I2C_ITSlaveCplt+0x1ae>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800680a:	d104      	bne.n	8006816 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f894 	bl	800693c <I2C_ITListenCplt>
 8006814:	e030      	b.n	8006878 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b29      	cmp	r3, #41	@ 0x29
 8006820:	d10e      	bne.n	8006840 <I2C_ITSlaveCplt+0x1d8>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006828:	d00a      	beq.n	8006840 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2210      	movs	r2, #16
 8006830:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9ef 	bl	8006c16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff fded 	bl	8006418 <I2C_ITSlaveSeqCplt>
 800683e:	e01b      	b.n	8006878 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2210      	movs	r2, #16
 8006846:	61da      	str	r2, [r3, #28]
 8006848:	e016      	b.n	8006878 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2210      	movs	r2, #16
 8006850:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006856:	f043 0204 	orr.w	r2, r3, #4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <I2C_ITSlaveCplt+0x204>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800686a:	d105      	bne.n	8006878 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f8b8 	bl	80069e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688a:	2b00      	cmp	r3, #0
 800688c:	d010      	beq.n	80068b0 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f8a7 	bl	80069e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b28      	cmp	r3, #40	@ 0x28
 80068a4:	d141      	bne.n	800692a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80068a6:	6979      	ldr	r1, [r7, #20]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f847 	bl	800693c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068ae:	e03c      	b.n	800692a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068b8:	d014      	beq.n	80068e4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff fdac 	bl	8006418 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006938 <I2C_ITSlaveCplt+0x2d0>)
 80068c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fc f8ed 	bl	8002abc <HAL_I2C_ListenCpltCallback>
}
 80068e2:	e022      	b.n	800692a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b22      	cmp	r3, #34	@ 0x22
 80068ee:	d10e      	bne.n	800690e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fc f92e 	bl	8002b68 <HAL_I2C_SlaveRxCpltCallback>
}
 800690c:	e00d      	b.n	800692a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fc f907 	bl	8002b38 <HAL_I2C_SlaveTxCpltCallback>
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	fe00e800 	.word	0xfe00e800
 8006938:	ffff0000 	.word	0xffff0000

0800693c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a26      	ldr	r2, [pc, #152]	@ (80069e4 <I2C_ITListenCplt+0xa8>)
 800694a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	089b      	lsrs	r3, r3, #2
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d022      	beq.n	80069ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	f043 0204 	orr.w	r2, r3, #4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa22 	bl	8006e08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2210      	movs	r2, #16
 80069ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fc f871 	bl	8002abc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	ffff0000 	.word	0xffff0000

080069e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a6d      	ldr	r2, [pc, #436]	@ (8006bbc <I2C_ITError+0x1d4>)
 8006a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b28      	cmp	r3, #40	@ 0x28
 8006a1e:	d005      	beq.n	8006a2c <I2C_ITError+0x44>
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b29      	cmp	r3, #41	@ 0x29
 8006a24:	d002      	beq.n	8006a2c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a2a:	d10b      	bne.n	8006a44 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a2c:	2103      	movs	r1, #3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9ea 	bl	8006e08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2228      	movs	r2, #40	@ 0x28
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a60      	ldr	r2, [pc, #384]	@ (8006bc0 <I2C_ITError+0x1d8>)
 8006a40:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a42:	e030      	b.n	8006aa6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a44:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f9dd 	bl	8006e08 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8e1 	bl	8006c16 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b60      	cmp	r3, #96	@ 0x60
 8006a5e:	d01f      	beq.n	8006aa0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d114      	bne.n	8006aa0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b10      	cmp	r3, #16
 8006a82:	d109      	bne.n	8006a98 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2210      	movs	r2, #16
 8006a8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a90:	f043 0204 	orr.w	r2, r3, #4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aaa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d039      	beq.n	8006b28 <I2C_ITError+0x140>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b11      	cmp	r3, #17
 8006ab8:	d002      	beq.n	8006ac0 <I2C_ITError+0xd8>
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b21      	cmp	r3, #33	@ 0x21
 8006abe:	d133      	bne.n	8006b28 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ace:	d107      	bne.n	8006ae0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ade:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe f991 	bl	8004e0c <HAL_DMA_GetState>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d017      	beq.n	8006b20 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af4:	4a33      	ldr	r2, [pc, #204]	@ (8006bc4 <I2C_ITError+0x1dc>)
 8006af6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fe f91a 	bl	8004d3e <HAL_DMA_Abort_IT>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d04d      	beq.n	8006bac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b1e:	e045      	b.n	8006bac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f851 	bl	8006bc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b26:	e041      	b.n	8006bac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d039      	beq.n	8006ba4 <I2C_ITError+0x1bc>
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b12      	cmp	r3, #18
 8006b34:	d002      	beq.n	8006b3c <I2C_ITError+0x154>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b22      	cmp	r3, #34	@ 0x22
 8006b3a:	d133      	bne.n	8006ba4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b4a:	d107      	bne.n	8006b5c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe f953 	bl	8004e0c <HAL_DMA_GetState>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d017      	beq.n	8006b9c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b70:	4a14      	ldr	r2, [pc, #80]	@ (8006bc4 <I2C_ITError+0x1dc>)
 8006b72:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe f8dc 	bl	8004d3e <HAL_DMA_Abort_IT>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d011      	beq.n	8006bb0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b9a:	e009      	b.n	8006bb0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f813 	bl	8006bc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ba2:	e005      	b.n	8006bb0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f80f 	bl	8006bc8 <I2C_TreatErrorCallback>
  }
}
 8006baa:	e002      	b.n	8006bb2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006bac:	bf00      	nop
 8006bae:	e000      	b.n	8006bb2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bb0:	bf00      	nop
}
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	ffff0000 	.word	0xffff0000
 8006bc0:	08005a87 	.word	0x08005a87
 8006bc4:	08006c5f 	.word	0x08006c5f

08006bc8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b60      	cmp	r3, #96	@ 0x60
 8006bda:	d10e      	bne.n	8006bfa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fe ff31 	bl	8005a5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006bf8:	e009      	b.n	8006c0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fc f857 	bl	8002cbc <HAL_I2C_ErrorCallback>
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d103      	bne.n	8006c34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2200      	movs	r2, #0
 8006c32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d007      	beq.n	8006c52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0201 	orr.w	r2, r2, #1
 8006c50:	619a      	str	r2, [r3, #24]
  }
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	2200      	movs	r2, #0
 8006c7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c88:	2200      	movs	r2, #0
 8006c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f7ff ff9b 	bl	8006bc8 <I2C_TreatErrorCallback>
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	607b      	str	r3, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	817b      	strh	r3, [r7, #10]
 8006caa:	4613      	mov	r3, r2
 8006cac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cae:	897b      	ldrh	r3, [r7, #10]
 8006cb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cb4:	7a7b      	ldrb	r3, [r7, #9]
 8006cb6:	041b      	lsls	r3, r3, #16
 8006cb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	0d5b      	lsrs	r3, r3, #21
 8006cd6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006cda:	4b08      	ldr	r3, [pc, #32]	@ (8006cfc <I2C_TransferConfig+0x60>)
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	ea02 0103 	and.w	r1, r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	03ff63ff 	.word	0x03ff63ff

08006d00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d14:	4a39      	ldr	r2, [pc, #228]	@ (8006dfc <I2C_Enable_IRQ+0xfc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d032      	beq.n	8006d80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006d1e:	4a38      	ldr	r2, [pc, #224]	@ (8006e00 <I2C_Enable_IRQ+0x100>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d02d      	beq.n	8006d80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006d28:	4a36      	ldr	r2, [pc, #216]	@ (8006e04 <I2C_Enable_IRQ+0x104>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d028      	beq.n	8006d80 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	da03      	bge.n	8006d3e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006d3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006d4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d50:	887b      	ldrh	r3, [r7, #2]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006d60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d62:	887b      	ldrh	r3, [r7, #2]
 8006d64:	2b10      	cmp	r3, #16
 8006d66:	d103      	bne.n	8006d70 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006d6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d133      	bne.n	8006dde <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f043 0320 	orr.w	r3, r3, #32
 8006d7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d7e:	e02e      	b.n	8006dde <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	da03      	bge.n	8006d90 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006d8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d90:	887b      	ldrh	r3, [r7, #2]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006da0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006da2:	887b      	ldrh	r3, [r7, #2]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006db2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006db4:	887b      	ldrh	r3, [r7, #2]
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d103      	bne.n	8006dc2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006dc0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006dc2:	887b      	ldrh	r3, [r7, #2]
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d103      	bne.n	8006dd0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006dce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006dd0:	887b      	ldrh	r3, [r7, #2]
 8006dd2:	2b40      	cmp	r3, #64	@ 0x40
 8006dd4:	d103      	bne.n	8006dde <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	08005c8f 	.word	0x08005c8f
 8006e00:	080060d5 	.word	0x080060d5
 8006e04:	08005e75 	.word	0x08005e75

08006e08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006e18:	887b      	ldrh	r3, [r7, #2]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00f      	beq.n	8006e42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006e28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e36:	2b28      	cmp	r3, #40	@ 0x28
 8006e38:	d003      	beq.n	8006e42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006e40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006e42:	887b      	ldrh	r3, [r7, #2]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00f      	beq.n	8006e6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006e52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e60:	2b28      	cmp	r3, #40	@ 0x28
 8006e62:	d003      	beq.n	8006e6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006e6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da03      	bge.n	8006e7c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006e7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d103      	bne.n	8006e8a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006e88:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006e8a:	887b      	ldrh	r3, [r7, #2]
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d103      	bne.n	8006e98 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f043 0320 	orr.w	r3, r3, #32
 8006e96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	2b40      	cmp	r3, #64	@ 0x40
 8006e9c:	d103      	bne.n	8006ea6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6819      	ldr	r1, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	400a      	ands	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d138      	bne.n	8006f4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e032      	b.n	8006f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	@ 0x24
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6819      	ldr	r1, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d139      	bne.n	8006fe4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e033      	b.n	8006fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2224      	movs	r2, #36	@ 0x24
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0201 	bic.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006fac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e000      	b.n	8006fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fe4:	2302      	movs	r3, #2
  }
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e0c0      	b.n	8007186 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7fc fb5d 	bl	80036d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2203      	movs	r2, #3
 8007022:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f004 fab0 	bl	800b590 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007030:	2300      	movs	r3, #0
 8007032:	73fb      	strb	r3, [r7, #15]
 8007034:	e03e      	b.n	80070b4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007036:	7bfa      	ldrb	r2, [r7, #15]
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	440b      	add	r3, r1
 8007044:	3311      	adds	r3, #17
 8007046:	2201      	movs	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800704a:	7bfa      	ldrb	r2, [r7, #15]
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	440b      	add	r3, r1
 8007058:	3310      	adds	r3, #16
 800705a:	7bfa      	ldrb	r2, [r7, #15]
 800705c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800705e:	7bfa      	ldrb	r2, [r7, #15]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	440b      	add	r3, r1
 800706c:	3313      	adds	r3, #19
 800706e:	2200      	movs	r2, #0
 8007070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007072:	7bfa      	ldrb	r2, [r7, #15]
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	440b      	add	r3, r1
 8007080:	3320      	adds	r3, #32
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007086:	7bfa      	ldrb	r2, [r7, #15]
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	440b      	add	r3, r1
 8007094:	3324      	adds	r3, #36	@ 0x24
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	440b      	add	r3, r1
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	3301      	adds	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	791b      	ldrb	r3, [r3, #4]
 80070b8:	7bfa      	ldrb	r2, [r7, #15]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d3bb      	bcc.n	8007036 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
 80070c2:	e044      	b.n	800714e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070c4:	7bfa      	ldrb	r2, [r7, #15]
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	440b      	add	r3, r1
 80070d2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070da:	7bfa      	ldrb	r2, [r7, #15]
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	440b      	add	r3, r1
 80070e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070ec:	7bfa      	ldrb	r2, [r7, #15]
 80070ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070f0:	7bfa      	ldrb	r2, [r7, #15]
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	4613      	mov	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	440b      	add	r3, r1
 80070fe:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007106:	7bfa      	ldrb	r2, [r7, #15]
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	440b      	add	r3, r1
 8007114:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800711c:	7bfa      	ldrb	r2, [r7, #15]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	440b      	add	r3, r1
 800712a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007132:	7bfa      	ldrb	r2, [r7, #15]
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	440b      	add	r3, r1
 8007140:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	3301      	adds	r3, #1
 800714c:	73fb      	strb	r3, [r7, #15]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	791b      	ldrb	r3, [r3, #4]
 8007152:	7bfa      	ldrb	r2, [r7, #15]
 8007154:	429a      	cmp	r2, r3
 8007156:	d3b5      	bcc.n	80070c4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007164:	f004 fa2f 	bl	800b5c6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	7a9b      	ldrb	r3, [r3, #10]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d102      	bne.n	8007184 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f805 	bl	800718e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f043 0302 	orr.w	r3, r3, #2
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d141      	bne.n	8007276 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071f2:	4b4b      	ldr	r3, [pc, #300]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80071fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071fe:	d131      	bne.n	8007264 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007200:	4b47      	ldr	r3, [pc, #284]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007206:	4a46      	ldr	r2, [pc, #280]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800720c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007210:	4b43      	ldr	r3, [pc, #268]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007218:	4a41      	ldr	r2, [pc, #260]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800721a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800721e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007220:	4b40      	ldr	r3, [pc, #256]	@ (8007324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2232      	movs	r2, #50	@ 0x32
 8007226:	fb02 f303 	mul.w	r3, r2, r3
 800722a:	4a3f      	ldr	r2, [pc, #252]	@ (8007328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800722c:	fba2 2303 	umull	r2, r3, r2, r3
 8007230:	0c9b      	lsrs	r3, r3, #18
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007236:	e002      	b.n	800723e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3b01      	subs	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800723e:	4b38      	ldr	r3, [pc, #224]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800724a:	d102      	bne.n	8007252 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1f2      	bne.n	8007238 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007252:	4b33      	ldr	r3, [pc, #204]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800725a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800725e:	d158      	bne.n	8007312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e057      	b.n	8007314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007264:	4b2e      	ldr	r3, [pc, #184]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726a:	4a2d      	ldr	r2, [pc, #180]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800726c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007270:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007274:	e04d      	b.n	8007312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800727c:	d141      	bne.n	8007302 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800727e:	4b28      	ldr	r3, [pc, #160]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800728a:	d131      	bne.n	80072f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800728c:	4b24      	ldr	r3, [pc, #144]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800728e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007292:	4a23      	ldr	r2, [pc, #140]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007298:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800729c:	4b20      	ldr	r3, [pc, #128]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2232      	movs	r2, #50	@ 0x32
 80072b2:	fb02 f303 	mul.w	r3, r2, r3
 80072b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072b8:	fba2 2303 	umull	r2, r3, r2, r3
 80072bc:	0c9b      	lsrs	r3, r3, #18
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072c2:	e002      	b.n	80072ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072ca:	4b15      	ldr	r3, [pc, #84]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072d6:	d102      	bne.n	80072de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f2      	bne.n	80072c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072de:	4b10      	ldr	r3, [pc, #64]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ea:	d112      	bne.n	8007312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e011      	b.n	8007314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007300:	e007      	b.n	8007312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007302:	4b07      	ldr	r3, [pc, #28]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800730a:	4a05      	ldr	r2, [pc, #20]	@ (8007320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800730c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007310:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40007000 	.word	0x40007000
 8007324:	2000013c 	.word	0x2000013c
 8007328:	431bde83 	.word	0x431bde83

0800732c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007330:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4a04      	ldr	r2, [pc, #16]	@ (8007348 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800733a:	6093      	str	r3, [r2, #8]
}
 800733c:	bf00      	nop
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40007000 	.word	0x40007000

0800734c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e2fe      	b.n	800795c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d075      	beq.n	8007456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800736a:	4b97      	ldr	r3, [pc, #604]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 030c 	and.w	r3, r3, #12
 8007372:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007374:	4b94      	ldr	r3, [pc, #592]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b0c      	cmp	r3, #12
 8007382:	d102      	bne.n	800738a <HAL_RCC_OscConfig+0x3e>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2b03      	cmp	r3, #3
 8007388:	d002      	beq.n	8007390 <HAL_RCC_OscConfig+0x44>
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b08      	cmp	r3, #8
 800738e:	d10b      	bne.n	80073a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007390:	4b8d      	ldr	r3, [pc, #564]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d05b      	beq.n	8007454 <HAL_RCC_OscConfig+0x108>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d157      	bne.n	8007454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e2d9      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b0:	d106      	bne.n	80073c0 <HAL_RCC_OscConfig+0x74>
 80073b2:	4b85      	ldr	r3, [pc, #532]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a84      	ldr	r2, [pc, #528]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	e01d      	b.n	80073fc <HAL_RCC_OscConfig+0xb0>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073c8:	d10c      	bne.n	80073e4 <HAL_RCC_OscConfig+0x98>
 80073ca:	4b7f      	ldr	r3, [pc, #508]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a7e      	ldr	r2, [pc, #504]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	4b7c      	ldr	r3, [pc, #496]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a7b      	ldr	r2, [pc, #492]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	e00b      	b.n	80073fc <HAL_RCC_OscConfig+0xb0>
 80073e4:	4b78      	ldr	r3, [pc, #480]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a77      	ldr	r2, [pc, #476]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	4b75      	ldr	r3, [pc, #468]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a74      	ldr	r2, [pc, #464]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80073f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d013      	beq.n	800742c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007404:	f7fc fb94 	bl	8003b30 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800740c:	f7fc fb90 	bl	8003b30 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b64      	cmp	r3, #100	@ 0x64
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e29e      	b.n	800795c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800741e:	4b6a      	ldr	r3, [pc, #424]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0f0      	beq.n	800740c <HAL_RCC_OscConfig+0xc0>
 800742a:	e014      	b.n	8007456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fc fb80 	bl	8003b30 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007434:	f7fc fb7c 	bl	8003b30 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b64      	cmp	r3, #100	@ 0x64
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e28a      	b.n	800795c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007446:	4b60      	ldr	r3, [pc, #384]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1f0      	bne.n	8007434 <HAL_RCC_OscConfig+0xe8>
 8007452:	e000      	b.n	8007456 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d075      	beq.n	800754e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007462:	4b59      	ldr	r3, [pc, #356]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800746c:	4b56      	ldr	r3, [pc, #344]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f003 0303 	and.w	r3, r3, #3
 8007474:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b0c      	cmp	r3, #12
 800747a:	d102      	bne.n	8007482 <HAL_RCC_OscConfig+0x136>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d002      	beq.n	8007488 <HAL_RCC_OscConfig+0x13c>
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b04      	cmp	r3, #4
 8007486:	d11f      	bne.n	80074c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007488:	4b4f      	ldr	r3, [pc, #316]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_OscConfig+0x154>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e25d      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074a0:	4b49      	ldr	r3, [pc, #292]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	061b      	lsls	r3, r3, #24
 80074ae:	4946      	ldr	r1, [pc, #280]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80074b4:	4b45      	ldr	r3, [pc, #276]	@ (80075cc <HAL_RCC_OscConfig+0x280>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fc faed 	bl	8003a98 <HAL_InitTick>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d043      	beq.n	800754c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e249      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d023      	beq.n	8007518 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074d0:	4b3d      	ldr	r3, [pc, #244]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a3c      	ldr	r2, [pc, #240]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80074d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074dc:	f7fc fb28 	bl	8003b30 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074e4:	f7fc fb24 	bl	8003b30 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e232      	b.n	800795c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074f6:	4b34      	ldr	r3, [pc, #208]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007502:	4b31      	ldr	r3, [pc, #196]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	061b      	lsls	r3, r3, #24
 8007510:	492d      	ldr	r1, [pc, #180]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007512:	4313      	orrs	r3, r2
 8007514:	604b      	str	r3, [r1, #4]
 8007516:	e01a      	b.n	800754e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007518:	4b2b      	ldr	r3, [pc, #172]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a2a      	ldr	r2, [pc, #168]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 800751e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007524:	f7fc fb04 	bl	8003b30 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800752c:	f7fc fb00 	bl	8003b30 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e20e      	b.n	800795c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800753e:	4b22      	ldr	r3, [pc, #136]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1f0      	bne.n	800752c <HAL_RCC_OscConfig+0x1e0>
 800754a:	e000      	b.n	800754e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800754c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d041      	beq.n	80075de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01c      	beq.n	800759c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007562:	4b19      	ldr	r3, [pc, #100]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 8007564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007568:	4a17      	ldr	r2, [pc, #92]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 800756a:	f043 0301 	orr.w	r3, r3, #1
 800756e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007572:	f7fc fadd 	bl	8003b30 <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800757a:	f7fc fad9 	bl	8003b30 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e1e7      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800758c:	4b0e      	ldr	r3, [pc, #56]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 800758e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0ef      	beq.n	800757a <HAL_RCC_OscConfig+0x22e>
 800759a:	e020      	b.n	80075de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 800759e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075a2:	4a09      	ldr	r2, [pc, #36]	@ (80075c8 <HAL_RCC_OscConfig+0x27c>)
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ac:	f7fc fac0 	bl	8003b30 <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075b2:	e00d      	b.n	80075d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075b4:	f7fc fabc 	bl	8003b30 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d906      	bls.n	80075d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e1ca      	b.n	800795c <HAL_RCC_OscConfig+0x610>
 80075c6:	bf00      	nop
 80075c8:	40021000 	.word	0x40021000
 80075cc:	20000140 	.word	0x20000140
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80075d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1ea      	bne.n	80075b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 80a6 	beq.w	8007738 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ec:	2300      	movs	r3, #0
 80075ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80075f0:	4b84      	ldr	r3, [pc, #528]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80075f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_OscConfig+0x2b4>
 80075fc:	2301      	movs	r3, #1
 80075fe:	e000      	b.n	8007602 <HAL_RCC_OscConfig+0x2b6>
 8007600:	2300      	movs	r3, #0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00d      	beq.n	8007622 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007606:	4b7f      	ldr	r3, [pc, #508]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760a:	4a7e      	ldr	r2, [pc, #504]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 800760c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007610:	6593      	str	r3, [r2, #88]	@ 0x58
 8007612:	4b7c      	ldr	r3, [pc, #496]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800761e:	2301      	movs	r3, #1
 8007620:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007622:	4b79      	ldr	r3, [pc, #484]	@ (8007808 <HAL_RCC_OscConfig+0x4bc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d118      	bne.n	8007660 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800762e:	4b76      	ldr	r3, [pc, #472]	@ (8007808 <HAL_RCC_OscConfig+0x4bc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a75      	ldr	r2, [pc, #468]	@ (8007808 <HAL_RCC_OscConfig+0x4bc>)
 8007634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800763a:	f7fc fa79 	bl	8003b30 <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007642:	f7fc fa75 	bl	8003b30 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e183      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007654:	4b6c      	ldr	r3, [pc, #432]	@ (8007808 <HAL_RCC_OscConfig+0x4bc>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0f0      	beq.n	8007642 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d108      	bne.n	800767a <HAL_RCC_OscConfig+0x32e>
 8007668:	4b66      	ldr	r3, [pc, #408]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 800766a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800766e:	4a65      	ldr	r2, [pc, #404]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007670:	f043 0301 	orr.w	r3, r3, #1
 8007674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007678:	e024      	b.n	80076c4 <HAL_RCC_OscConfig+0x378>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b05      	cmp	r3, #5
 8007680:	d110      	bne.n	80076a4 <HAL_RCC_OscConfig+0x358>
 8007682:	4b60      	ldr	r3, [pc, #384]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007688:	4a5e      	ldr	r2, [pc, #376]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 800768a:	f043 0304 	orr.w	r3, r3, #4
 800768e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007692:	4b5c      	ldr	r3, [pc, #368]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007698:	4a5a      	ldr	r2, [pc, #360]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 800769a:	f043 0301 	orr.w	r3, r3, #1
 800769e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076a2:	e00f      	b.n	80076c4 <HAL_RCC_OscConfig+0x378>
 80076a4:	4b57      	ldr	r3, [pc, #348]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80076a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076aa:	4a56      	ldr	r2, [pc, #344]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80076ac:	f023 0301 	bic.w	r3, r3, #1
 80076b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076b4:	4b53      	ldr	r3, [pc, #332]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80076b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ba:	4a52      	ldr	r2, [pc, #328]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80076bc:	f023 0304 	bic.w	r3, r3, #4
 80076c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d016      	beq.n	80076fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076cc:	f7fc fa30 	bl	8003b30 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076d2:	e00a      	b.n	80076ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d4:	f7fc fa2c 	bl	8003b30 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e138      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ea:	4b46      	ldr	r3, [pc, #280]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80076ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0ed      	beq.n	80076d4 <HAL_RCC_OscConfig+0x388>
 80076f8:	e015      	b.n	8007726 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fa:	f7fc fa19 	bl	8003b30 <HAL_GetTick>
 80076fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007700:	e00a      	b.n	8007718 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007702:	f7fc fa15 	bl	8003b30 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007710:	4293      	cmp	r3, r2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e121      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007718:	4b3a      	ldr	r3, [pc, #232]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1ed      	bne.n	8007702 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007726:	7ffb      	ldrb	r3, [r7, #31]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d105      	bne.n	8007738 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800772c:	4b35      	ldr	r3, [pc, #212]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 800772e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007730:	4a34      	ldr	r2, [pc, #208]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007736:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b00      	cmp	r3, #0
 8007742:	d03c      	beq.n	80077be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01c      	beq.n	8007786 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800774c:	4b2d      	ldr	r3, [pc, #180]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 800774e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007752:	4a2c      	ldr	r2, [pc, #176]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007754:	f043 0301 	orr.w	r3, r3, #1
 8007758:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775c:	f7fc f9e8 	bl	8003b30 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007764:	f7fc f9e4 	bl	8003b30 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e0f2      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007776:	4b23      	ldr	r3, [pc, #140]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007778:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0ef      	beq.n	8007764 <HAL_RCC_OscConfig+0x418>
 8007784:	e01b      	b.n	80077be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007786:	4b1f      	ldr	r3, [pc, #124]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 8007788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800778c:	4a1d      	ldr	r2, [pc, #116]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 800778e:	f023 0301 	bic.w	r3, r3, #1
 8007792:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007796:	f7fc f9cb 	bl	8003b30 <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800779e:	f7fc f9c7 	bl	8003b30 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e0d5      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077b0:	4b14      	ldr	r3, [pc, #80]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80077b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1ef      	bne.n	800779e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80c9 	beq.w	800795a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 030c 	and.w	r3, r3, #12
 80077d0:	2b0c      	cmp	r3, #12
 80077d2:	f000 8083 	beq.w	80078dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d15e      	bne.n	800789c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077de:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a08      	ldr	r2, [pc, #32]	@ (8007804 <HAL_RCC_OscConfig+0x4b8>)
 80077e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ea:	f7fc f9a1 	bl	8003b30 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077f0:	e00c      	b.n	800780c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077f2:	f7fc f99d 	bl	8003b30 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d905      	bls.n	800780c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e0ab      	b.n	800795c <HAL_RCC_OscConfig+0x610>
 8007804:	40021000 	.word	0x40021000
 8007808:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800780c:	4b55      	ldr	r3, [pc, #340]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1ec      	bne.n	80077f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007818:	4b52      	ldr	r3, [pc, #328]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	4b52      	ldr	r3, [pc, #328]	@ (8007968 <HAL_RCC_OscConfig+0x61c>)
 800781e:	4013      	ands	r3, r2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6a11      	ldr	r1, [r2, #32]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007828:	3a01      	subs	r2, #1
 800782a:	0112      	lsls	r2, r2, #4
 800782c:	4311      	orrs	r1, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007832:	0212      	lsls	r2, r2, #8
 8007834:	4311      	orrs	r1, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800783a:	0852      	lsrs	r2, r2, #1
 800783c:	3a01      	subs	r2, #1
 800783e:	0552      	lsls	r2, r2, #21
 8007840:	4311      	orrs	r1, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007846:	0852      	lsrs	r2, r2, #1
 8007848:	3a01      	subs	r2, #1
 800784a:	0652      	lsls	r2, r2, #25
 800784c:	4311      	orrs	r1, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007852:	06d2      	lsls	r2, r2, #27
 8007854:	430a      	orrs	r2, r1
 8007856:	4943      	ldr	r1, [pc, #268]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 8007858:	4313      	orrs	r3, r2
 800785a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800785c:	4b41      	ldr	r3, [pc, #260]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a40      	ldr	r2, [pc, #256]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 8007862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007866:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007868:	4b3e      	ldr	r3, [pc, #248]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	4a3d      	ldr	r2, [pc, #244]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 800786e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007872:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007874:	f7fc f95c 	bl	8003b30 <HAL_GetTick>
 8007878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800787a:	e008      	b.n	800788e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800787c:	f7fc f958 	bl	8003b30 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	2b02      	cmp	r3, #2
 8007888:	d901      	bls.n	800788e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e066      	b.n	800795c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800788e:	4b35      	ldr	r3, [pc, #212]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0f0      	beq.n	800787c <HAL_RCC_OscConfig+0x530>
 800789a:	e05e      	b.n	800795a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800789c:	4b31      	ldr	r3, [pc, #196]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a30      	ldr	r2, [pc, #192]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 80078a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fc f942 	bl	8003b30 <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b0:	f7fc f93e 	bl	8003b30 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e04c      	b.n	800795c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078c2:	4b28      	ldr	r3, [pc, #160]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80078ce:	4b25      	ldr	r3, [pc, #148]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	4924      	ldr	r1, [pc, #144]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 80078d4:	4b25      	ldr	r3, [pc, #148]	@ (800796c <HAL_RCC_OscConfig+0x620>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	60cb      	str	r3, [r1, #12]
 80078da:	e03e      	b.n	800795a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d101      	bne.n	80078e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e039      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80078e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007964 <HAL_RCC_OscConfig+0x618>)
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f003 0203 	and.w	r2, r3, #3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d12c      	bne.n	8007956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007906:	3b01      	subs	r3, #1
 8007908:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790a:	429a      	cmp	r2, r3
 800790c:	d123      	bne.n	8007956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007918:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800791a:	429a      	cmp	r2, r3
 800791c:	d11b      	bne.n	8007956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800792a:	429a      	cmp	r2, r3
 800792c:	d113      	bne.n	8007956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007938:	085b      	lsrs	r3, r3, #1
 800793a:	3b01      	subs	r3, #1
 800793c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800793e:	429a      	cmp	r2, r3
 8007940:	d109      	bne.n	8007956 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	3b01      	subs	r3, #1
 8007950:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007952:	429a      	cmp	r2, r3
 8007954:	d001      	beq.n	800795a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40021000 	.word	0x40021000
 8007968:	019f800c 	.word	0x019f800c
 800796c:	feeefffc 	.word	0xfeeefffc

08007970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e11e      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007988:	4b91      	ldr	r3, [pc, #580]	@ (8007bd0 <HAL_RCC_ClockConfig+0x260>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d910      	bls.n	80079b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007996:	4b8e      	ldr	r3, [pc, #568]	@ (8007bd0 <HAL_RCC_ClockConfig+0x260>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f023 020f 	bic.w	r2, r3, #15
 800799e:	498c      	ldr	r1, [pc, #560]	@ (8007bd0 <HAL_RCC_ClockConfig+0x260>)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a6:	4b8a      	ldr	r3, [pc, #552]	@ (8007bd0 <HAL_RCC_ClockConfig+0x260>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d001      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e106      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d073      	beq.n	8007aac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d129      	bne.n	8007a20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079cc:	4b81      	ldr	r3, [pc, #516]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e0f4      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80079dc:	f000 f99e 	bl	8007d1c <RCC_GetSysClockFreqFromPLLSource>
 80079e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	4a7c      	ldr	r2, [pc, #496]	@ (8007bd8 <HAL_RCC_ClockConfig+0x268>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d93f      	bls.n	8007a6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80079ea:	4b7a      	ldr	r3, [pc, #488]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d033      	beq.n	8007a6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d12f      	bne.n	8007a6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a0a:	4b72      	ldr	r3, [pc, #456]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a12:	4a70      	ldr	r2, [pc, #448]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a1a:	2380      	movs	r3, #128	@ 0x80
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e024      	b.n	8007a6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d107      	bne.n	8007a38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a28:	4b6a      	ldr	r3, [pc, #424]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e0c6      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a38:	4b66      	ldr	r3, [pc, #408]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0be      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a48:	f000 f8ce 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8007a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	4a61      	ldr	r2, [pc, #388]	@ (8007bd8 <HAL_RCC_ClockConfig+0x268>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d909      	bls.n	8007a6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a56:	4b5f      	ldr	r3, [pc, #380]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a5e:	4a5d      	ldr	r2, [pc, #372]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007a66:	2380      	movs	r3, #128	@ 0x80
 8007a68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f023 0203 	bic.w	r2, r3, #3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	4957      	ldr	r1, [pc, #348]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a7c:	f7fc f858 	bl	8003b30 <HAL_GetTick>
 8007a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a82:	e00a      	b.n	8007a9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a84:	f7fc f854 	bl	8003b30 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d901      	bls.n	8007a9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e095      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 020c 	and.w	r2, r3, #12
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d1eb      	bne.n	8007a84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d023      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ac4:	4b43      	ldr	r3, [pc, #268]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4a42      	ldr	r2, [pc, #264]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007aca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007ace:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0308 	and.w	r3, r3, #8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d007      	beq.n	8007aec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007adc:	4b3d      	ldr	r3, [pc, #244]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007ae6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aec:	4b39      	ldr	r3, [pc, #228]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	4936      	ldr	r1, [pc, #216]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	608b      	str	r3, [r1, #8]
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b80      	cmp	r3, #128	@ 0x80
 8007b04:	d105      	bne.n	8007b12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b06:	4b33      	ldr	r3, [pc, #204]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	4a32      	ldr	r2, [pc, #200]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007b0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b12:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd0 <HAL_RCC_ClockConfig+0x260>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d21d      	bcs.n	8007b5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b20:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd0 <HAL_RCC_ClockConfig+0x260>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f023 020f 	bic.w	r2, r3, #15
 8007b28:	4929      	ldr	r1, [pc, #164]	@ (8007bd0 <HAL_RCC_ClockConfig+0x260>)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b30:	f7fb fffe 	bl	8003b30 <HAL_GetTick>
 8007b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b36:	e00a      	b.n	8007b4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b38:	f7fb fffa 	bl	8003b30 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e03b      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b4e:	4b20      	ldr	r3, [pc, #128]	@ (8007bd0 <HAL_RCC_ClockConfig+0x260>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d1ed      	bne.n	8007b38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d008      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b68:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	4917      	ldr	r1, [pc, #92]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b86:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	490f      	ldr	r1, [pc, #60]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b9a:	f000 f825 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd4 <HAL_RCC_ClockConfig+0x264>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	091b      	lsrs	r3, r3, #4
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	490c      	ldr	r1, [pc, #48]	@ (8007bdc <HAL_RCC_ClockConfig+0x26c>)
 8007bac:	5ccb      	ldrb	r3, [r1, r3]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007be0 <HAL_RCC_ClockConfig+0x270>)
 8007bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007bba:	4b0a      	ldr	r3, [pc, #40]	@ (8007be4 <HAL_RCC_ClockConfig+0x274>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fb ff6a 	bl	8003a98 <HAL_InitTick>
 8007bc4:	4603      	mov	r3, r0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40022000 	.word	0x40022000
 8007bd4:	40021000 	.word	0x40021000
 8007bd8:	04c4b400 	.word	0x04c4b400
 8007bdc:	0800d4e4 	.word	0x0800d4e4
 8007be0:	2000013c 	.word	0x2000013c
 8007be4:	20000140 	.word	0x20000140

08007be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007bee:	4b2c      	ldr	r3, [pc, #176]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 030c 	and.w	r3, r3, #12
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d102      	bne.n	8007c00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	e047      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c00:	4b27      	ldr	r3, [pc, #156]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 030c 	and.w	r3, r3, #12
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d102      	bne.n	8007c12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c0c:	4b26      	ldr	r3, [pc, #152]	@ (8007ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	e03e      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007c12:	4b23      	ldr	r3, [pc, #140]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 030c 	and.w	r3, r3, #12
 8007c1a:	2b0c      	cmp	r3, #12
 8007c1c:	d136      	bne.n	8007c8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c1e:	4b20      	ldr	r3, [pc, #128]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	091b      	lsrs	r3, r3, #4
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	3301      	adds	r3, #1
 8007c34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d10c      	bne.n	8007c56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c44:	4a16      	ldr	r2, [pc, #88]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c46:	68d2      	ldr	r2, [r2, #12]
 8007c48:	0a12      	lsrs	r2, r2, #8
 8007c4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c4e:	fb02 f303 	mul.w	r3, r2, r3
 8007c52:	617b      	str	r3, [r7, #20]
      break;
 8007c54:	e00c      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c56:	4a13      	ldr	r2, [pc, #76]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5e:	4a10      	ldr	r2, [pc, #64]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c60:	68d2      	ldr	r2, [r2, #12]
 8007c62:	0a12      	lsrs	r2, r2, #8
 8007c64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c68:	fb02 f303 	mul.w	r3, r2, r3
 8007c6c:	617b      	str	r3, [r7, #20]
      break;
 8007c6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	0e5b      	lsrs	r3, r3, #25
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	e001      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007c90:	693b      	ldr	r3, [r7, #16]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	00f42400 	.word	0x00f42400
 8007ca8:	007a1200 	.word	0x007a1200

08007cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cb0:	4b03      	ldr	r3, [pc, #12]	@ (8007cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	2000013c 	.word	0x2000013c

08007cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007cc8:	f7ff fff0 	bl	8007cac <HAL_RCC_GetHCLKFreq>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	4b06      	ldr	r3, [pc, #24]	@ (8007ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	4904      	ldr	r1, [pc, #16]	@ (8007cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cda:	5ccb      	ldrb	r3, [r1, r3]
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	0800d4f4 	.word	0x0800d4f4

08007cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007cf4:	f7ff ffda 	bl	8007cac <HAL_RCC_GetHCLKFreq>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4b06      	ldr	r3, [pc, #24]	@ (8007d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	0adb      	lsrs	r3, r3, #11
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	4904      	ldr	r1, [pc, #16]	@ (8007d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d06:	5ccb      	ldrb	r3, [r1, r3]
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40021000 	.word	0x40021000
 8007d18:	0800d4f4 	.word	0x0800d4f4

08007d1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d22:	4b1e      	ldr	r3, [pc, #120]	@ (8007d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	091b      	lsrs	r3, r3, #4
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	3301      	adds	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d10c      	bne.n	8007d5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d40:	4a17      	ldr	r2, [pc, #92]	@ (8007da0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d48:	4a14      	ldr	r2, [pc, #80]	@ (8007d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d4a:	68d2      	ldr	r2, [r2, #12]
 8007d4c:	0a12      	lsrs	r2, r2, #8
 8007d4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d52:	fb02 f303 	mul.w	r3, r2, r3
 8007d56:	617b      	str	r3, [r7, #20]
    break;
 8007d58:	e00c      	b.n	8007d74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d5a:	4a12      	ldr	r2, [pc, #72]	@ (8007da4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d62:	4a0e      	ldr	r2, [pc, #56]	@ (8007d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d64:	68d2      	ldr	r2, [r2, #12]
 8007d66:	0a12      	lsrs	r2, r2, #8
 8007d68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d6c:	fb02 f303 	mul.w	r3, r2, r3
 8007d70:	617b      	str	r3, [r7, #20]
    break;
 8007d72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d74:	4b09      	ldr	r3, [pc, #36]	@ (8007d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	0e5b      	lsrs	r3, r3, #25
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	3301      	adds	r3, #1
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007d8e:	687b      	ldr	r3, [r7, #4]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	40021000 	.word	0x40021000
 8007da0:	007a1200 	.word	0x007a1200
 8007da4:	00f42400 	.word	0x00f42400

08007da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007db0:	2300      	movs	r3, #0
 8007db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007db4:	2300      	movs	r3, #0
 8007db6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 8098 	beq.w	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dca:	4b43      	ldr	r3, [pc, #268]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10d      	bne.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dd6:	4b40      	ldr	r3, [pc, #256]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dda:	4a3f      	ldr	r2, [pc, #252]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007de2:	4b3d      	ldr	r3, [pc, #244]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dea:	60bb      	str	r3, [r7, #8]
 8007dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dee:	2301      	movs	r3, #1
 8007df0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007df2:	4b3a      	ldr	r3, [pc, #232]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a39      	ldr	r2, [pc, #228]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dfe:	f7fb fe97 	bl	8003b30 <HAL_GetTick>
 8007e02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e04:	e009      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e06:	f7fb fe93 	bl	8003b30 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d902      	bls.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	74fb      	strb	r3, [r7, #19]
        break;
 8007e18:	e005      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e1a:	4b30      	ldr	r3, [pc, #192]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0ef      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007e26:	7cfb      	ldrb	r3, [r7, #19]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d159      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01e      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d019      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e48:	4b23      	ldr	r3, [pc, #140]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e54:	4b20      	ldr	r3, [pc, #128]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e64:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e74:	4a18      	ldr	r2, [pc, #96]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d016      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e86:	f7fb fe53 	bl	8003b30 <HAL_GetTick>
 8007e8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e8c:	e00b      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e8e:	f7fb fe4f 	bl	8003b30 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d902      	bls.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	74fb      	strb	r3, [r7, #19]
            break;
 8007ea4:	e006      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0ec      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007eb4:	7cfb      	ldrb	r3, [r7, #19]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eba:	4b07      	ldr	r3, [pc, #28]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec8:	4903      	ldr	r1, [pc, #12]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ed2:	7cfb      	ldrb	r3, [r7, #19]
 8007ed4:	74bb      	strb	r3, [r7, #18]
 8007ed6:	e005      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007ed8:	40021000 	.word	0x40021000
 8007edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee0:	7cfb      	ldrb	r3, [r7, #19]
 8007ee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ee4:	7c7b      	ldrb	r3, [r7, #17]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d105      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007eea:	4ba7      	ldr	r3, [pc, #668]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eee:	4aa6      	ldr	r2, [pc, #664]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ef4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f02:	4ba1      	ldr	r3, [pc, #644]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f08:	f023 0203 	bic.w	r2, r3, #3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	499d      	ldr	r1, [pc, #628]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f24:	4b98      	ldr	r3, [pc, #608]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f2a:	f023 020c 	bic.w	r2, r3, #12
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	4995      	ldr	r1, [pc, #596]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f46:	4b90      	ldr	r3, [pc, #576]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	498c      	ldr	r1, [pc, #560]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0308 	and.w	r3, r3, #8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f68:	4b87      	ldr	r3, [pc, #540]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	4984      	ldr	r1, [pc, #528]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0310 	and.w	r3, r3, #16
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	497b      	ldr	r1, [pc, #492]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fac:	4b76      	ldr	r3, [pc, #472]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	4973      	ldr	r1, [pc, #460]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007fce:	4b6e      	ldr	r3, [pc, #440]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	496a      	ldr	r1, [pc, #424]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ff0:	4b65      	ldr	r3, [pc, #404]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	4962      	ldr	r1, [pc, #392]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008000:	4313      	orrs	r3, r2
 8008002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008012:	4b5d      	ldr	r3, [pc, #372]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008018:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008020:	4959      	ldr	r1, [pc, #356]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008034:	4b54      	ldr	r3, [pc, #336]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800803a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008042:	4951      	ldr	r1, [pc, #324]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008052:	2b00      	cmp	r3, #0
 8008054:	d015      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008056:	4b4c      	ldr	r3, [pc, #304]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800805c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	4948      	ldr	r1, [pc, #288]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008070:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008074:	d105      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008076:	4b44      	ldr	r3, [pc, #272]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	4a43      	ldr	r2, [pc, #268]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800807c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008080:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800808a:	2b00      	cmp	r3, #0
 800808c:	d015      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800808e:	4b3e      	ldr	r3, [pc, #248]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008094:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809c:	493a      	ldr	r1, [pc, #232]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080ac:	d105      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080ae:	4b36      	ldr	r3, [pc, #216]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	4a35      	ldr	r2, [pc, #212]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080b8:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d015      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080c6:	4b30      	ldr	r3, [pc, #192]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d4:	492c      	ldr	r1, [pc, #176]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080e4:	d105      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080e6:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	4a27      	ldr	r2, [pc, #156]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080f0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d015      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080fe:	4b22      	ldr	r3, [pc, #136]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008104:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810c:	491e      	ldr	r1, [pc, #120]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800810e:	4313      	orrs	r3, r2
 8008110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800811c:	d105      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800811e:	4b1a      	ldr	r3, [pc, #104]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	4a19      	ldr	r2, [pc, #100]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008124:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008128:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d015      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008136:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800813c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008144:	4910      	ldr	r1, [pc, #64]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008146:	4313      	orrs	r3, r2
 8008148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008154:	d105      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008156:	4b0c      	ldr	r3, [pc, #48]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	4a0b      	ldr	r2, [pc, #44]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800815c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008160:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d018      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800816e:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008174:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817c:	4902      	ldr	r1, [pc, #8]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	e001      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008188:	40021000 	.word	0x40021000
 800818c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008192:	d105      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008194:	4b21      	ldr	r3, [pc, #132]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	4a20      	ldr	r2, [pc, #128]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800819a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800819e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d015      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80081ac:	4b1b      	ldr	r3, [pc, #108]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80081ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ba:	4918      	ldr	r1, [pc, #96]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ca:	d105      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80081cc:	4b13      	ldr	r3, [pc, #76]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	4a12      	ldr	r2, [pc, #72]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80081d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d015      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80081e4:	4b0d      	ldr	r3, [pc, #52]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80081e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f2:	490a      	ldr	r1, [pc, #40]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008202:	d105      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008204:	4b05      	ldr	r3, [pc, #20]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	4a04      	ldr	r2, [pc, #16]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800820a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800820e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008210:	7cbb      	ldrb	r3, [r7, #18]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	40021000 	.word	0x40021000

08008220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e049      	b.n	80082c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fb f908 	bl	800345c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f000 fc66 	bl	8008b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e049      	b.n	8008374 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7fb f865 	bl	80033c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3304      	adds	r3, #4
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f000 fc0f 	bl	8008b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <HAL_TIM_PWM_Start+0x24>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	bf14      	ite	ne
 8008398:	2301      	movne	r3, #1
 800839a:	2300      	moveq	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	e03c      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d109      	bne.n	80083ba <HAL_TIM_PWM_Start+0x3e>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	bf14      	ite	ne
 80083b2:	2301      	movne	r3, #1
 80083b4:	2300      	moveq	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	e02f      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d109      	bne.n	80083d4 <HAL_TIM_PWM_Start+0x58>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	bf14      	ite	ne
 80083cc:	2301      	movne	r3, #1
 80083ce:	2300      	moveq	r3, #0
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	e022      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b0c      	cmp	r3, #12
 80083d8:	d109      	bne.n	80083ee <HAL_TIM_PWM_Start+0x72>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	bf14      	ite	ne
 80083e6:	2301      	movne	r3, #1
 80083e8:	2300      	moveq	r3, #0
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	e015      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d109      	bne.n	8008408 <HAL_TIM_PWM_Start+0x8c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	bf14      	ite	ne
 8008400:	2301      	movne	r3, #1
 8008402:	2300      	moveq	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	e008      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	bf14      	ite	ne
 8008414:	2301      	movne	r3, #1
 8008416:	2300      	moveq	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e0a1      	b.n	8008566 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start+0xb6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008430:	e023      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b04      	cmp	r3, #4
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Start+0xc6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008440:	e01b      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b08      	cmp	r3, #8
 8008446:	d104      	bne.n	8008452 <HAL_TIM_PWM_Start+0xd6>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008450:	e013      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b0c      	cmp	r3, #12
 8008456:	d104      	bne.n	8008462 <HAL_TIM_PWM_Start+0xe6>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008460:	e00b      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b10      	cmp	r3, #16
 8008466:	d104      	bne.n	8008472 <HAL_TIM_PWM_Start+0xf6>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008470:	e003      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f001 f875 	bl	8009572 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a38      	ldr	r2, [pc, #224]	@ (8008570 <HAL_TIM_PWM_Start+0x1f4>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d018      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x148>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a37      	ldr	r2, [pc, #220]	@ (8008574 <HAL_TIM_PWM_Start+0x1f8>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d013      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x148>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a35      	ldr	r2, [pc, #212]	@ (8008578 <HAL_TIM_PWM_Start+0x1fc>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00e      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x148>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a34      	ldr	r2, [pc, #208]	@ (800857c <HAL_TIM_PWM_Start+0x200>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d009      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x148>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a32      	ldr	r2, [pc, #200]	@ (8008580 <HAL_TIM_PWM_Start+0x204>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d004      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x148>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a31      	ldr	r2, [pc, #196]	@ (8008584 <HAL_TIM_PWM_Start+0x208>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d101      	bne.n	80084c8 <HAL_TIM_PWM_Start+0x14c>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <HAL_TIM_PWM_Start+0x14e>
 80084c8:	2300      	movs	r3, #0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a23      	ldr	r2, [pc, #140]	@ (8008570 <HAL_TIM_PWM_Start+0x1f4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d01d      	beq.n	8008524 <HAL_TIM_PWM_Start+0x1a8>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084f0:	d018      	beq.n	8008524 <HAL_TIM_PWM_Start+0x1a8>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a24      	ldr	r2, [pc, #144]	@ (8008588 <HAL_TIM_PWM_Start+0x20c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <HAL_TIM_PWM_Start+0x1a8>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a22      	ldr	r2, [pc, #136]	@ (800858c <HAL_TIM_PWM_Start+0x210>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00e      	beq.n	8008524 <HAL_TIM_PWM_Start+0x1a8>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1a      	ldr	r2, [pc, #104]	@ (8008574 <HAL_TIM_PWM_Start+0x1f8>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d009      	beq.n	8008524 <HAL_TIM_PWM_Start+0x1a8>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a18      	ldr	r2, [pc, #96]	@ (8008578 <HAL_TIM_PWM_Start+0x1fc>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d004      	beq.n	8008524 <HAL_TIM_PWM_Start+0x1a8>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a19      	ldr	r2, [pc, #100]	@ (8008584 <HAL_TIM_PWM_Start+0x208>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d115      	bne.n	8008550 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	4b19      	ldr	r3, [pc, #100]	@ (8008590 <HAL_TIM_PWM_Start+0x214>)
 800852c:	4013      	ands	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b06      	cmp	r3, #6
 8008534:	d015      	beq.n	8008562 <HAL_TIM_PWM_Start+0x1e6>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800853c:	d011      	beq.n	8008562 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 0201 	orr.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854e:	e008      	b.n	8008562 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0201 	orr.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	e000      	b.n	8008564 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008562:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40012c00 	.word	0x40012c00
 8008574:	40013400 	.word	0x40013400
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400
 8008580:	40014800 	.word	0x40014800
 8008584:	40015000 	.word	0x40015000
 8008588:	40000400 	.word	0x40000400
 800858c:	40000800 	.word	0x40000800
 8008590:	00010007 	.word	0x00010007

08008594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d020      	beq.n	80085f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01b      	beq.n	80085f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f06f 0202 	mvn.w	r2, #2
 80085c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa88 	bl	8008af4 <HAL_TIM_IC_CaptureCallback>
 80085e4:	e005      	b.n	80085f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fa7a 	bl	8008ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fa8b 	bl	8008b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d020      	beq.n	8008644 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01b      	beq.n	8008644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f06f 0204 	mvn.w	r2, #4
 8008614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2202      	movs	r2, #2
 800861a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa62 	bl	8008af4 <HAL_TIM_IC_CaptureCallback>
 8008630:	e005      	b.n	800863e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa54 	bl	8008ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fa65 	bl	8008b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f003 0308 	and.w	r3, r3, #8
 800864a:	2b00      	cmp	r3, #0
 800864c:	d020      	beq.n	8008690 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01b      	beq.n	8008690 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f06f 0208 	mvn.w	r2, #8
 8008660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2204      	movs	r2, #4
 8008666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa3c 	bl	8008af4 <HAL_TIM_IC_CaptureCallback>
 800867c:	e005      	b.n	800868a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa2e 	bl	8008ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fa3f 	bl	8008b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f003 0310 	and.w	r3, r3, #16
 8008696:	2b00      	cmp	r3, #0
 8008698:	d020      	beq.n	80086dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01b      	beq.n	80086dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f06f 0210 	mvn.w	r2, #16
 80086ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2208      	movs	r2, #8
 80086b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa16 	bl	8008af4 <HAL_TIM_IC_CaptureCallback>
 80086c8:	e005      	b.n	80086d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa08 	bl	8008ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fa19 	bl	8008b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d007      	beq.n	8008700 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f06f 0201 	mvn.w	r2, #1
 80086f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7fa f9b2 	bl	8002a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008706:	2b00      	cmp	r3, #0
 8008708:	d104      	bne.n	8008714 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 f92d 	bl	8009988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800874a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 f925 	bl	800999c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00c      	beq.n	8008776 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800876e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f9d3 	bl	8008b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00c      	beq.n	800879a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f06f 0220 	mvn.w	r2, #32
 8008792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 f8ed 	bl	8009974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00c      	beq.n	80087be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d007      	beq.n	80087be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80087b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 f8f9 	bl	80099b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00c      	beq.n	80087e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d007      	beq.n	80087e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80087da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f8f1 	bl	80099c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00c      	beq.n	8008806 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d007      	beq.n	8008806 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80087fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 f8e9 	bl	80099d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00c      	beq.n	800882a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f001 f8e1 	bl	80099ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800884e:	2302      	movs	r3, #2
 8008850:	e0ff      	b.n	8008a52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b14      	cmp	r3, #20
 800885e:	f200 80f0 	bhi.w	8008a42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008862:	a201      	add	r2, pc, #4	@ (adr r2, 8008868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	080088bd 	.word	0x080088bd
 800886c:	08008a43 	.word	0x08008a43
 8008870:	08008a43 	.word	0x08008a43
 8008874:	08008a43 	.word	0x08008a43
 8008878:	080088fd 	.word	0x080088fd
 800887c:	08008a43 	.word	0x08008a43
 8008880:	08008a43 	.word	0x08008a43
 8008884:	08008a43 	.word	0x08008a43
 8008888:	0800893f 	.word	0x0800893f
 800888c:	08008a43 	.word	0x08008a43
 8008890:	08008a43 	.word	0x08008a43
 8008894:	08008a43 	.word	0x08008a43
 8008898:	0800897f 	.word	0x0800897f
 800889c:	08008a43 	.word	0x08008a43
 80088a0:	08008a43 	.word	0x08008a43
 80088a4:	08008a43 	.word	0x08008a43
 80088a8:	080089c1 	.word	0x080089c1
 80088ac:	08008a43 	.word	0x08008a43
 80088b0:	08008a43 	.word	0x08008a43
 80088b4:	08008a43 	.word	0x08008a43
 80088b8:	08008a01 	.word	0x08008a01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 f9de 	bl	8008c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0208 	orr.w	r2, r2, #8
 80088d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0204 	bic.w	r2, r2, #4
 80088e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6999      	ldr	r1, [r3, #24]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	619a      	str	r2, [r3, #24]
      break;
 80088fa:	e0a5      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fa58 	bl	8008db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6999      	ldr	r1, [r3, #24]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	021a      	lsls	r2, r3, #8
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	619a      	str	r2, [r3, #24]
      break;
 800893c:	e084      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 facb 	bl	8008ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0208 	orr.w	r2, r2, #8
 8008958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0204 	bic.w	r2, r2, #4
 8008968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69d9      	ldr	r1, [r3, #28]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	61da      	str	r2, [r3, #28]
      break;
 800897c:	e064      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fb3d 	bl	8009004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69da      	ldr	r2, [r3, #28]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69d9      	ldr	r1, [r3, #28]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	021a      	lsls	r2, r3, #8
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	61da      	str	r2, [r3, #28]
      break;
 80089be:	e043      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fbb0 	bl	800912c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0208 	orr.w	r2, r2, #8
 80089da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0204 	bic.w	r2, r2, #4
 80089ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	691a      	ldr	r2, [r3, #16]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089fe:	e023      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fbfa 	bl	8009200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	021a      	lsls	r2, r3, #8
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008a40:	e002      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75fb      	strb	r3, [r7, #23]
      break;
 8008a46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop

08008a5c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e031      	b.n	8008ad8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fc26 	bl	80092d8 <TIM_SlaveTimer_SetConfig>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d009      	beq.n	8008aa6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e018      	b.n	8008ad8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ab4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008ac4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a48      	ldr	r2, [pc, #288]	@ (8008c64 <TIM_Base_SetConfig+0x134>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d013      	beq.n	8008b70 <TIM_Base_SetConfig+0x40>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4e:	d00f      	beq.n	8008b70 <TIM_Base_SetConfig+0x40>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a45      	ldr	r2, [pc, #276]	@ (8008c68 <TIM_Base_SetConfig+0x138>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00b      	beq.n	8008b70 <TIM_Base_SetConfig+0x40>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a44      	ldr	r2, [pc, #272]	@ (8008c6c <TIM_Base_SetConfig+0x13c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d007      	beq.n	8008b70 <TIM_Base_SetConfig+0x40>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a43      	ldr	r2, [pc, #268]	@ (8008c70 <TIM_Base_SetConfig+0x140>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d003      	beq.n	8008b70 <TIM_Base_SetConfig+0x40>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a42      	ldr	r2, [pc, #264]	@ (8008c74 <TIM_Base_SetConfig+0x144>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d108      	bne.n	8008b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a37      	ldr	r2, [pc, #220]	@ (8008c64 <TIM_Base_SetConfig+0x134>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d01f      	beq.n	8008bca <TIM_Base_SetConfig+0x9a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b90:	d01b      	beq.n	8008bca <TIM_Base_SetConfig+0x9a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a34      	ldr	r2, [pc, #208]	@ (8008c68 <TIM_Base_SetConfig+0x138>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d017      	beq.n	8008bca <TIM_Base_SetConfig+0x9a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a33      	ldr	r2, [pc, #204]	@ (8008c6c <TIM_Base_SetConfig+0x13c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d013      	beq.n	8008bca <TIM_Base_SetConfig+0x9a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a32      	ldr	r2, [pc, #200]	@ (8008c70 <TIM_Base_SetConfig+0x140>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d00f      	beq.n	8008bca <TIM_Base_SetConfig+0x9a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a32      	ldr	r2, [pc, #200]	@ (8008c78 <TIM_Base_SetConfig+0x148>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d00b      	beq.n	8008bca <TIM_Base_SetConfig+0x9a>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a31      	ldr	r2, [pc, #196]	@ (8008c7c <TIM_Base_SetConfig+0x14c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d007      	beq.n	8008bca <TIM_Base_SetConfig+0x9a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	@ (8008c80 <TIM_Base_SetConfig+0x150>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d003      	beq.n	8008bca <TIM_Base_SetConfig+0x9a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c74 <TIM_Base_SetConfig+0x144>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d108      	bne.n	8008bdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a18      	ldr	r2, [pc, #96]	@ (8008c64 <TIM_Base_SetConfig+0x134>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d013      	beq.n	8008c30 <TIM_Base_SetConfig+0x100>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a19      	ldr	r2, [pc, #100]	@ (8008c70 <TIM_Base_SetConfig+0x140>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00f      	beq.n	8008c30 <TIM_Base_SetConfig+0x100>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a19      	ldr	r2, [pc, #100]	@ (8008c78 <TIM_Base_SetConfig+0x148>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00b      	beq.n	8008c30 <TIM_Base_SetConfig+0x100>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a18      	ldr	r2, [pc, #96]	@ (8008c7c <TIM_Base_SetConfig+0x14c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <TIM_Base_SetConfig+0x100>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a17      	ldr	r2, [pc, #92]	@ (8008c80 <TIM_Base_SetConfig+0x150>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_Base_SetConfig+0x100>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a12      	ldr	r2, [pc, #72]	@ (8008c74 <TIM_Base_SetConfig+0x144>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d103      	bne.n	8008c38 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	691a      	ldr	r2, [r3, #16]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d105      	bne.n	8008c56 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f023 0201 	bic.w	r2, r3, #1
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	611a      	str	r2, [r3, #16]
  }
}
 8008c56:	bf00      	nop
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	40012c00 	.word	0x40012c00
 8008c68:	40000400 	.word	0x40000400
 8008c6c:	40000800 	.word	0x40000800
 8008c70:	40013400 	.word	0x40013400
 8008c74:	40015000 	.word	0x40015000
 8008c78:	40014000 	.word	0x40014000
 8008c7c:	40014400 	.word	0x40014400
 8008c80:	40014800 	.word	0x40014800

08008c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	f023 0201 	bic.w	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0303 	bic.w	r3, r3, #3
 8008cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f023 0302 	bic.w	r3, r3, #2
 8008cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a30      	ldr	r2, [pc, #192]	@ (8008da0 <TIM_OC1_SetConfig+0x11c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <TIM_OC1_SetConfig+0x88>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8008da4 <TIM_OC1_SetConfig+0x120>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00f      	beq.n	8008d0c <TIM_OC1_SetConfig+0x88>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a2e      	ldr	r2, [pc, #184]	@ (8008da8 <TIM_OC1_SetConfig+0x124>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00b      	beq.n	8008d0c <TIM_OC1_SetConfig+0x88>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8008dac <TIM_OC1_SetConfig+0x128>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d007      	beq.n	8008d0c <TIM_OC1_SetConfig+0x88>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8008db0 <TIM_OC1_SetConfig+0x12c>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d003      	beq.n	8008d0c <TIM_OC1_SetConfig+0x88>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a2b      	ldr	r2, [pc, #172]	@ (8008db4 <TIM_OC1_SetConfig+0x130>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d10c      	bne.n	8008d26 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f023 0308 	bic.w	r3, r3, #8
 8008d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f023 0304 	bic.w	r3, r3, #4
 8008d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a1d      	ldr	r2, [pc, #116]	@ (8008da0 <TIM_OC1_SetConfig+0x11c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <TIM_OC1_SetConfig+0xd2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a1c      	ldr	r2, [pc, #112]	@ (8008da4 <TIM_OC1_SetConfig+0x120>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00f      	beq.n	8008d56 <TIM_OC1_SetConfig+0xd2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a1b      	ldr	r2, [pc, #108]	@ (8008da8 <TIM_OC1_SetConfig+0x124>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00b      	beq.n	8008d56 <TIM_OC1_SetConfig+0xd2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a1a      	ldr	r2, [pc, #104]	@ (8008dac <TIM_OC1_SetConfig+0x128>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <TIM_OC1_SetConfig+0xd2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a19      	ldr	r2, [pc, #100]	@ (8008db0 <TIM_OC1_SetConfig+0x12c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d003      	beq.n	8008d56 <TIM_OC1_SetConfig+0xd2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a18      	ldr	r2, [pc, #96]	@ (8008db4 <TIM_OC1_SetConfig+0x130>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d111      	bne.n	8008d7a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	621a      	str	r2, [r3, #32]
}
 8008d94:	bf00      	nop
 8008d96:	371c      	adds	r7, #28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	40012c00 	.word	0x40012c00
 8008da4:	40013400 	.word	0x40013400
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40014400 	.word	0x40014400
 8008db0:	40014800 	.word	0x40014800
 8008db4:	40015000 	.word	0x40015000

08008db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	f023 0210 	bic.w	r2, r3, #16
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 0320 	bic.w	r3, r3, #32
 8008e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a2c      	ldr	r2, [pc, #176]	@ (8008ec8 <TIM_OC2_SetConfig+0x110>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <TIM_OC2_SetConfig+0x74>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8008ecc <TIM_OC2_SetConfig+0x114>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_OC2_SetConfig+0x74>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a2a      	ldr	r2, [pc, #168]	@ (8008ed0 <TIM_OC2_SetConfig+0x118>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d10d      	bne.n	8008e48 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ec8 <TIM_OC2_SetConfig+0x110>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d013      	beq.n	8008e78 <TIM_OC2_SetConfig+0xc0>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a1e      	ldr	r2, [pc, #120]	@ (8008ecc <TIM_OC2_SetConfig+0x114>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00f      	beq.n	8008e78 <TIM_OC2_SetConfig+0xc0>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ed4 <TIM_OC2_SetConfig+0x11c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00b      	beq.n	8008e78 <TIM_OC2_SetConfig+0xc0>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a1d      	ldr	r2, [pc, #116]	@ (8008ed8 <TIM_OC2_SetConfig+0x120>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <TIM_OC2_SetConfig+0xc0>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008edc <TIM_OC2_SetConfig+0x124>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d003      	beq.n	8008e78 <TIM_OC2_SetConfig+0xc0>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a17      	ldr	r2, [pc, #92]	@ (8008ed0 <TIM_OC2_SetConfig+0x118>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d113      	bne.n	8008ea0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	621a      	str	r2, [r3, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	40012c00 	.word	0x40012c00
 8008ecc:	40013400 	.word	0x40013400
 8008ed0:	40015000 	.word	0x40015000
 8008ed4:	40014000 	.word	0x40014000
 8008ed8:	40014400 	.word	0x40014400
 8008edc:	40014800 	.word	0x40014800

08008ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 0303 	bic.w	r3, r3, #3
 8008f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8008fec <TIM_OC3_SetConfig+0x10c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d007      	beq.n	8008f52 <TIM_OC3_SetConfig+0x72>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a2a      	ldr	r2, [pc, #168]	@ (8008ff0 <TIM_OC3_SetConfig+0x110>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d003      	beq.n	8008f52 <TIM_OC3_SetConfig+0x72>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a29      	ldr	r2, [pc, #164]	@ (8008ff4 <TIM_OC3_SetConfig+0x114>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d10d      	bne.n	8008f6e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a1e      	ldr	r2, [pc, #120]	@ (8008fec <TIM_OC3_SetConfig+0x10c>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d013      	beq.n	8008f9e <TIM_OC3_SetConfig+0xbe>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff0 <TIM_OC3_SetConfig+0x110>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d00f      	beq.n	8008f9e <TIM_OC3_SetConfig+0xbe>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff8 <TIM_OC3_SetConfig+0x118>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00b      	beq.n	8008f9e <TIM_OC3_SetConfig+0xbe>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a1c      	ldr	r2, [pc, #112]	@ (8008ffc <TIM_OC3_SetConfig+0x11c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d007      	beq.n	8008f9e <TIM_OC3_SetConfig+0xbe>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a1b      	ldr	r2, [pc, #108]	@ (8009000 <TIM_OC3_SetConfig+0x120>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d003      	beq.n	8008f9e <TIM_OC3_SetConfig+0xbe>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a16      	ldr	r2, [pc, #88]	@ (8008ff4 <TIM_OC3_SetConfig+0x114>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d113      	bne.n	8008fc6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	621a      	str	r2, [r3, #32]
}
 8008fe0:	bf00      	nop
 8008fe2:	371c      	adds	r7, #28
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	40012c00 	.word	0x40012c00
 8008ff0:	40013400 	.word	0x40013400
 8008ff4:	40015000 	.word	0x40015000
 8008ff8:	40014000 	.word	0x40014000
 8008ffc:	40014400 	.word	0x40014400
 8009000:	40014800 	.word	0x40014800

08009004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800903e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4313      	orrs	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	031b      	lsls	r3, r3, #12
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	4313      	orrs	r3, r2
 800905e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a2c      	ldr	r2, [pc, #176]	@ (8009114 <TIM_OC4_SetConfig+0x110>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d007      	beq.n	8009078 <TIM_OC4_SetConfig+0x74>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a2b      	ldr	r2, [pc, #172]	@ (8009118 <TIM_OC4_SetConfig+0x114>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d003      	beq.n	8009078 <TIM_OC4_SetConfig+0x74>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a2a      	ldr	r2, [pc, #168]	@ (800911c <TIM_OC4_SetConfig+0x118>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d10d      	bne.n	8009094 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800907e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	031b      	lsls	r3, r3, #12
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a1f      	ldr	r2, [pc, #124]	@ (8009114 <TIM_OC4_SetConfig+0x110>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d013      	beq.n	80090c4 <TIM_OC4_SetConfig+0xc0>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a1e      	ldr	r2, [pc, #120]	@ (8009118 <TIM_OC4_SetConfig+0x114>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00f      	beq.n	80090c4 <TIM_OC4_SetConfig+0xc0>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009120 <TIM_OC4_SetConfig+0x11c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d00b      	beq.n	80090c4 <TIM_OC4_SetConfig+0xc0>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009124 <TIM_OC4_SetConfig+0x120>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d007      	beq.n	80090c4 <TIM_OC4_SetConfig+0xc0>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009128 <TIM_OC4_SetConfig+0x124>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d003      	beq.n	80090c4 <TIM_OC4_SetConfig+0xc0>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a17      	ldr	r2, [pc, #92]	@ (800911c <TIM_OC4_SetConfig+0x118>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d113      	bne.n	80090ec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	019b      	lsls	r3, r3, #6
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	4313      	orrs	r3, r2
 80090de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	019b      	lsls	r3, r3, #6
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	621a      	str	r2, [r3, #32]
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	40012c00 	.word	0x40012c00
 8009118:	40013400 	.word	0x40013400
 800911c:	40015000 	.word	0x40015000
 8009120:	40014000 	.word	0x40014000
 8009124:	40014400 	.word	0x40014400
 8009128:	40014800 	.word	0x40014800

0800912c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800915a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800915e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	4313      	orrs	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009170:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	041b      	lsls	r3, r3, #16
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a19      	ldr	r2, [pc, #100]	@ (80091e8 <TIM_OC5_SetConfig+0xbc>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d013      	beq.n	80091ae <TIM_OC5_SetConfig+0x82>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a18      	ldr	r2, [pc, #96]	@ (80091ec <TIM_OC5_SetConfig+0xc0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d00f      	beq.n	80091ae <TIM_OC5_SetConfig+0x82>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a17      	ldr	r2, [pc, #92]	@ (80091f0 <TIM_OC5_SetConfig+0xc4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d00b      	beq.n	80091ae <TIM_OC5_SetConfig+0x82>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a16      	ldr	r2, [pc, #88]	@ (80091f4 <TIM_OC5_SetConfig+0xc8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d007      	beq.n	80091ae <TIM_OC5_SetConfig+0x82>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a15      	ldr	r2, [pc, #84]	@ (80091f8 <TIM_OC5_SetConfig+0xcc>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d003      	beq.n	80091ae <TIM_OC5_SetConfig+0x82>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a14      	ldr	r2, [pc, #80]	@ (80091fc <TIM_OC5_SetConfig+0xd0>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d109      	bne.n	80091c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	021b      	lsls	r3, r3, #8
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	4313      	orrs	r3, r2
 80091c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	621a      	str	r2, [r3, #32]
}
 80091dc:	bf00      	nop
 80091de:	371c      	adds	r7, #28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	40012c00 	.word	0x40012c00
 80091ec:	40013400 	.word	0x40013400
 80091f0:	40014000 	.word	0x40014000
 80091f4:	40014400 	.word	0x40014400
 80091f8:	40014800 	.word	0x40014800
 80091fc:	40015000 	.word	0x40015000

08009200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800922e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	051b      	lsls	r3, r3, #20
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	4313      	orrs	r3, r2
 8009252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a1a      	ldr	r2, [pc, #104]	@ (80092c0 <TIM_OC6_SetConfig+0xc0>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d013      	beq.n	8009284 <TIM_OC6_SetConfig+0x84>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a19      	ldr	r2, [pc, #100]	@ (80092c4 <TIM_OC6_SetConfig+0xc4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00f      	beq.n	8009284 <TIM_OC6_SetConfig+0x84>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a18      	ldr	r2, [pc, #96]	@ (80092c8 <TIM_OC6_SetConfig+0xc8>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d00b      	beq.n	8009284 <TIM_OC6_SetConfig+0x84>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a17      	ldr	r2, [pc, #92]	@ (80092cc <TIM_OC6_SetConfig+0xcc>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d007      	beq.n	8009284 <TIM_OC6_SetConfig+0x84>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a16      	ldr	r2, [pc, #88]	@ (80092d0 <TIM_OC6_SetConfig+0xd0>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d003      	beq.n	8009284 <TIM_OC6_SetConfig+0x84>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a15      	ldr	r2, [pc, #84]	@ (80092d4 <TIM_OC6_SetConfig+0xd4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d109      	bne.n	8009298 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800928a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	029b      	lsls	r3, r3, #10
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	4313      	orrs	r3, r2
 8009296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	621a      	str	r2, [r3, #32]
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	40012c00 	.word	0x40012c00
 80092c4:	40013400 	.word	0x40013400
 80092c8:	40014000 	.word	0x40014000
 80092cc:	40014400 	.word	0x40014400
 80092d0:	40014800 	.word	0x40014800
 80092d4:	40015000 	.word	0x40015000

080092d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800930a:	f023 0307 	bic.w	r3, r3, #7
 800930e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4313      	orrs	r3, r2
 8009318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	4a4e      	ldr	r2, [pc, #312]	@ (8009460 <TIM_SlaveTimer_SetConfig+0x188>)
 8009328:	4293      	cmp	r3, r2
 800932a:	f000 8092 	beq.w	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 800932e:	4a4c      	ldr	r2, [pc, #304]	@ (8009460 <TIM_SlaveTimer_SetConfig+0x188>)
 8009330:	4293      	cmp	r3, r2
 8009332:	f200 808b 	bhi.w	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009336:	4a4b      	ldr	r2, [pc, #300]	@ (8009464 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	f000 808a 	beq.w	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 800933e:	4a49      	ldr	r2, [pc, #292]	@ (8009464 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	f200 8083 	bhi.w	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009346:	4a48      	ldr	r2, [pc, #288]	@ (8009468 <TIM_SlaveTimer_SetConfig+0x190>)
 8009348:	4293      	cmp	r3, r2
 800934a:	f000 8082 	beq.w	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 800934e:	4a46      	ldr	r2, [pc, #280]	@ (8009468 <TIM_SlaveTimer_SetConfig+0x190>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d87b      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009354:	4a45      	ldr	r2, [pc, #276]	@ (800946c <TIM_SlaveTimer_SetConfig+0x194>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d07b      	beq.n	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 800935a:	4a44      	ldr	r2, [pc, #272]	@ (800946c <TIM_SlaveTimer_SetConfig+0x194>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d875      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009360:	4a43      	ldr	r2, [pc, #268]	@ (8009470 <TIM_SlaveTimer_SetConfig+0x198>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d075      	beq.n	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 8009366:	4a42      	ldr	r2, [pc, #264]	@ (8009470 <TIM_SlaveTimer_SetConfig+0x198>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d86f      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 800936c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009370:	d06f      	beq.n	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 8009372:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009376:	d869      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009378:	2b70      	cmp	r3, #112	@ 0x70
 800937a:	d01a      	beq.n	80093b2 <TIM_SlaveTimer_SetConfig+0xda>
 800937c:	2b70      	cmp	r3, #112	@ 0x70
 800937e:	d865      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009380:	2b60      	cmp	r3, #96	@ 0x60
 8009382:	d059      	beq.n	8009438 <TIM_SlaveTimer_SetConfig+0x160>
 8009384:	2b60      	cmp	r3, #96	@ 0x60
 8009386:	d861      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009388:	2b50      	cmp	r3, #80	@ 0x50
 800938a:	d04b      	beq.n	8009424 <TIM_SlaveTimer_SetConfig+0x14c>
 800938c:	2b50      	cmp	r3, #80	@ 0x50
 800938e:	d85d      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009390:	2b40      	cmp	r3, #64	@ 0x40
 8009392:	d019      	beq.n	80093c8 <TIM_SlaveTimer_SetConfig+0xf0>
 8009394:	2b40      	cmp	r3, #64	@ 0x40
 8009396:	d859      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 8009398:	2b30      	cmp	r3, #48	@ 0x30
 800939a:	d05a      	beq.n	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 800939c:	2b30      	cmp	r3, #48	@ 0x30
 800939e:	d855      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 80093a0:	2b20      	cmp	r3, #32
 80093a2:	d056      	beq.n	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 80093a4:	2b20      	cmp	r3, #32
 80093a6:	d851      	bhi.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d052      	beq.n	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 80093ac:	2b10      	cmp	r3, #16
 80093ae:	d050      	beq.n	8009452 <TIM_SlaveTimer_SetConfig+0x17a>
 80093b0:	e04c      	b.n	800944c <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80093c2:	f000 f8b6 	bl	8009532 <TIM_ETR_SetConfig>
      break;
 80093c6:	e045      	b.n	8009454 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b05      	cmp	r3, #5
 80093ce:	d004      	beq.n	80093da <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80093d4:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80093d8:	d101      	bne.n	80093de <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e03b      	b.n	8009456 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6a1a      	ldr	r2, [r3, #32]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009404:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	4313      	orrs	r3, r2
 8009410:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	621a      	str	r2, [r3, #32]
      break;
 8009422:	e017      	b.n	8009454 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009430:	461a      	mov	r2, r3
 8009432:	f000 f81f 	bl	8009474 <TIM_TI1_ConfigInputStage>
      break;
 8009436:	e00d      	b.n	8009454 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009444:	461a      	mov	r2, r3
 8009446:	f000 f844 	bl	80094d2 <TIM_TI2_ConfigInputStage>
      break;
 800944a:	e003      	b.n	8009454 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	75fb      	strb	r3, [r7, #23]
      break;
 8009450:	e000      	b.n	8009454 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8009452:	bf00      	nop
  }

  return status;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	00100070 	.word	0x00100070
 8009464:	00100050 	.word	0x00100050
 8009468:	00100040 	.word	0x00100040
 800946c:	00100030 	.word	0x00100030
 8009470:	00100020 	.word	0x00100020

08009474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	f023 0201 	bic.w	r2, r3, #1
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800949e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f023 030a 	bic.w	r3, r3, #10
 80094b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	621a      	str	r2, [r3, #32]
}
 80094c6:	bf00      	nop
 80094c8:	371c      	adds	r7, #28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b087      	sub	sp, #28
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	f023 0210 	bic.w	r2, r3, #16
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80094fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	031b      	lsls	r3, r3, #12
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	4313      	orrs	r3, r2
 8009506:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800950e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	4313      	orrs	r3, r2
 8009518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	621a      	str	r2, [r3, #32]
}
 8009526:	bf00      	nop
 8009528:	371c      	adds	r7, #28
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009532:	b480      	push	{r7}
 8009534:	b087      	sub	sp, #28
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	607a      	str	r2, [r7, #4]
 800953e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800954c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	021a      	lsls	r2, r3, #8
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	431a      	orrs	r2, r3
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4313      	orrs	r3, r2
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	609a      	str	r2, [r3, #8]
}
 8009566:	bf00      	nop
 8009568:	371c      	adds	r7, #28
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009572:	b480      	push	{r7}
 8009574:	b087      	sub	sp, #28
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f003 031f 	and.w	r3, r3, #31
 8009584:	2201      	movs	r2, #1
 8009586:	fa02 f303 	lsl.w	r3, r2, r3
 800958a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6a1a      	ldr	r2, [r3, #32]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	43db      	mvns	r3, r3
 8009594:	401a      	ands	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6a1a      	ldr	r2, [r3, #32]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f003 031f 	and.w	r3, r3, #31
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	fa01 f303 	lsl.w	r3, r1, r3
 80095aa:	431a      	orrs	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	621a      	str	r2, [r3, #32]
}
 80095b0:	bf00      	nop
 80095b2:	371c      	adds	r7, #28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <HAL_TIMEx_PWMN_Start+0x24>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	bf14      	ite	ne
 80095d8:	2301      	movne	r3, #1
 80095da:	2300      	moveq	r3, #0
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	e022      	b.n	8009626 <HAL_TIMEx_PWMN_Start+0x6a>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d109      	bne.n	80095fa <HAL_TIMEx_PWMN_Start+0x3e>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	bf14      	ite	ne
 80095f2:	2301      	movne	r3, #1
 80095f4:	2300      	moveq	r3, #0
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	e015      	b.n	8009626 <HAL_TIMEx_PWMN_Start+0x6a>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	d109      	bne.n	8009614 <HAL_TIMEx_PWMN_Start+0x58>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	bf14      	ite	ne
 800960c:	2301      	movne	r3, #1
 800960e:	2300      	moveq	r3, #0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	e008      	b.n	8009626 <HAL_TIMEx_PWMN_Start+0x6a>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b01      	cmp	r3, #1
 800961e:	bf14      	ite	ne
 8009620:	2301      	movne	r3, #1
 8009622:	2300      	moveq	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e06e      	b.n	800970c <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d104      	bne.n	800963e <HAL_TIMEx_PWMN_Start+0x82>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800963c:	e013      	b.n	8009666 <HAL_TIMEx_PWMN_Start+0xaa>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b04      	cmp	r3, #4
 8009642:	d104      	bne.n	800964e <HAL_TIMEx_PWMN_Start+0x92>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800964c:	e00b      	b.n	8009666 <HAL_TIMEx_PWMN_Start+0xaa>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b08      	cmp	r3, #8
 8009652:	d104      	bne.n	800965e <HAL_TIMEx_PWMN_Start+0xa2>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800965c:	e003      	b.n	8009666 <HAL_TIMEx_PWMN_Start+0xaa>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2204      	movs	r2, #4
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f000 f9c6 	bl	8009a00 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009682:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a22      	ldr	r2, [pc, #136]	@ (8009714 <HAL_TIMEx_PWMN_Start+0x158>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d01d      	beq.n	80096ca <HAL_TIMEx_PWMN_Start+0x10e>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009696:	d018      	beq.n	80096ca <HAL_TIMEx_PWMN_Start+0x10e>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a1e      	ldr	r2, [pc, #120]	@ (8009718 <HAL_TIMEx_PWMN_Start+0x15c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d013      	beq.n	80096ca <HAL_TIMEx_PWMN_Start+0x10e>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1d      	ldr	r2, [pc, #116]	@ (800971c <HAL_TIMEx_PWMN_Start+0x160>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00e      	beq.n	80096ca <HAL_TIMEx_PWMN_Start+0x10e>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a1b      	ldr	r2, [pc, #108]	@ (8009720 <HAL_TIMEx_PWMN_Start+0x164>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d009      	beq.n	80096ca <HAL_TIMEx_PWMN_Start+0x10e>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009724 <HAL_TIMEx_PWMN_Start+0x168>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d004      	beq.n	80096ca <HAL_TIMEx_PWMN_Start+0x10e>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a18      	ldr	r2, [pc, #96]	@ (8009728 <HAL_TIMEx_PWMN_Start+0x16c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d115      	bne.n	80096f6 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689a      	ldr	r2, [r3, #8]
 80096d0:	4b16      	ldr	r3, [pc, #88]	@ (800972c <HAL_TIMEx_PWMN_Start+0x170>)
 80096d2:	4013      	ands	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b06      	cmp	r3, #6
 80096da:	d015      	beq.n	8009708 <HAL_TIMEx_PWMN_Start+0x14c>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096e2:	d011      	beq.n	8009708 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0201 	orr.w	r2, r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096f4:	e008      	b.n	8009708 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f042 0201 	orr.w	r2, r2, #1
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	e000      	b.n	800970a <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009708:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	40012c00 	.word	0x40012c00
 8009718:	40000400 	.word	0x40000400
 800971c:	40000800 	.word	0x40000800
 8009720:	40013400 	.word	0x40013400
 8009724:	40014000 	.word	0x40014000
 8009728:	40015000 	.word	0x40015000
 800972c:	00010007 	.word	0x00010007

08009730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009740:	2b01      	cmp	r3, #1
 8009742:	d101      	bne.n	8009748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009744:	2302      	movs	r3, #2
 8009746:	e06f      	b.n	8009828 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a31      	ldr	r2, [pc, #196]	@ (8009834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d009      	beq.n	8009786 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a30      	ldr	r2, [pc, #192]	@ (8009838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d004      	beq.n	8009786 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a2e      	ldr	r2, [pc, #184]	@ (800983c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d108      	bne.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800978c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800979e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d01d      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097c8:	d018      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a1c      	ldr	r2, [pc, #112]	@ (8009840 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d013      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00e      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a15      	ldr	r2, [pc, #84]	@ (8009838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d009      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a16      	ldr	r2, [pc, #88]	@ (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a11      	ldr	r2, [pc, #68]	@ (800983c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d10c      	bne.n	8009816 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	4313      	orrs	r3, r2
 800980c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	40012c00 	.word	0x40012c00
 8009838:	40013400 	.word	0x40013400
 800983c:	40015000 	.word	0x40015000
 8009840:	40000400 	.word	0x40000400
 8009844:	40000800 	.word	0x40000800
 8009848:	40014000 	.word	0x40014000

0800984c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009860:	2b01      	cmp	r3, #1
 8009862:	d101      	bne.n	8009868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009864:	2302      	movs	r3, #2
 8009866:	e078      	b.n	800995a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	4313      	orrs	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	4313      	orrs	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	041b      	lsls	r3, r3, #16
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009968 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d009      	beq.n	800990e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a1b      	ldr	r2, [pc, #108]	@ (800996c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d004      	beq.n	800990e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a19      	ldr	r2, [pc, #100]	@ (8009970 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d11c      	bne.n	8009948 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009918:	051b      	lsls	r3, r3, #20
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009944:	4313      	orrs	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	40012c00 	.word	0x40012c00
 800996c:	40013400 	.word	0x40013400
 8009970:	40015000 	.word	0x40015000

08009974 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f003 030f 	and.w	r3, r3, #15
 8009a12:	2204      	movs	r2, #4
 8009a14:	fa02 f303 	lsl.w	r3, r2, r3
 8009a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6a1a      	ldr	r2, [r3, #32]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	43db      	mvns	r3, r3
 8009a22:	401a      	ands	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6a1a      	ldr	r2, [r3, #32]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f003 030f 	and.w	r3, r3, #15
 8009a32:	6879      	ldr	r1, [r7, #4]
 8009a34:	fa01 f303 	lsl.w	r3, r1, r3
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	621a      	str	r2, [r3, #32]
}
 8009a3e:	bf00      	nop
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d101      	bne.n	8009a5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e042      	b.n	8009ae2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7f9 fdda 	bl	8003628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2224      	movs	r2, #36	@ 0x24
 8009a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f022 0201 	bic.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc15 	bl	800a2c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f916 	bl	8009ccc <UART_SetConfig>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d101      	bne.n	8009aaa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e01b      	b.n	8009ae2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ab8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ac8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0201 	orr.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc94 	bl	800a408 <UART_CheckIdleState>
 8009ae0:	4603      	mov	r3, r0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b08a      	sub	sp, #40	@ 0x28
 8009aee:	af02      	add	r7, sp, #8
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	603b      	str	r3, [r7, #0]
 8009af6:	4613      	mov	r3, r2
 8009af8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	d17b      	bne.n	8009bfc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <HAL_UART_Transmit+0x26>
 8009b0a:	88fb      	ldrh	r3, [r7, #6]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e074      	b.n	8009bfe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2221      	movs	r2, #33	@ 0x21
 8009b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b24:	f7fa f804 	bl	8003b30 <HAL_GetTick>
 8009b28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	88fa      	ldrh	r2, [r7, #6]
 8009b2e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	88fa      	ldrh	r2, [r7, #6]
 8009b36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b42:	d108      	bne.n	8009b56 <HAL_UART_Transmit+0x6c>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	61bb      	str	r3, [r7, #24]
 8009b54:	e003      	b.n	8009b5e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b5e:	e030      	b.n	8009bc2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2200      	movs	r2, #0
 8009b68:	2180      	movs	r1, #128	@ 0x80
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 fcf6 	bl	800a55c <UART_WaitOnFlagUntilTimeout>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d005      	beq.n	8009b82 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e03d      	b.n	8009bfe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10b      	bne.n	8009ba0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	3302      	adds	r3, #2
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	e007      	b.n	8009bb0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	781a      	ldrb	r2, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	3301      	adds	r3, #1
 8009bae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1c8      	bne.n	8009b60 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2140      	movs	r1, #64	@ 0x40
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 fcbf 	bl	800a55c <UART_WaitOnFlagUntilTimeout>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d005      	beq.n	8009bf0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e006      	b.n	8009bfe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	e000      	b.n	8009bfe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009bfc:	2302      	movs	r3, #2
  }
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3720      	adds	r7, #32
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08a      	sub	sp, #40	@ 0x28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	4613      	mov	r3, r2
 8009c14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	d137      	bne.n	8009c90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HAL_UART_Receive_IT+0x24>
 8009c26:	88fb      	ldrh	r3, [r7, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e030      	b.n	8009c92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a18      	ldr	r2, [pc, #96]	@ (8009c9c <HAL_UART_Receive_IT+0x94>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d01f      	beq.n	8009c80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d018      	beq.n	8009c80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	e853 3f00 	ldrex	r3, [r3]
 8009c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	623b      	str	r3, [r7, #32]
 8009c6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c70:	69f9      	ldr	r1, [r7, #28]
 8009c72:	6a3a      	ldr	r2, [r7, #32]
 8009c74:	e841 2300 	strex	r3, r2, [r1]
 8009c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e6      	bne.n	8009c4e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c80:	88fb      	ldrh	r3, [r7, #6]
 8009c82:	461a      	mov	r2, r3
 8009c84:	68b9      	ldr	r1, [r7, #8]
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fcd6 	bl	800a638 <UART_Start_Receive_IT>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	e000      	b.n	8009c92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c90:	2302      	movs	r3, #2
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3728      	adds	r7, #40	@ 0x28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	40008000 	.word	0x40008000

08009ca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cd0:	b08c      	sub	sp, #48	@ 0x30
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	4baa      	ldr	r3, [pc, #680]	@ (8009fa4 <UART_SetConfig+0x2d8>)
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	6812      	ldr	r2, [r2, #0]
 8009d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d04:	430b      	orrs	r3, r1
 8009d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a9f      	ldr	r2, [pc, #636]	@ (8009fa8 <UART_SetConfig+0x2dc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d004      	beq.n	8009d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d34:	4313      	orrs	r3, r2
 8009d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009d42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d4c:	430b      	orrs	r3, r1
 8009d4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	f023 010f 	bic.w	r1, r3, #15
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a90      	ldr	r2, [pc, #576]	@ (8009fac <UART_SetConfig+0x2e0>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d125      	bne.n	8009dbc <UART_SetConfig+0xf0>
 8009d70:	4b8f      	ldr	r3, [pc, #572]	@ (8009fb0 <UART_SetConfig+0x2e4>)
 8009d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d81a      	bhi.n	8009db4 <UART_SetConfig+0xe8>
 8009d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d84 <UART_SetConfig+0xb8>)
 8009d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d84:	08009d95 	.word	0x08009d95
 8009d88:	08009da5 	.word	0x08009da5
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009dad 	.word	0x08009dad
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d9a:	e116      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009da2:	e112      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009da4:	2304      	movs	r3, #4
 8009da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009daa:	e10e      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009dac:	2308      	movs	r3, #8
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db2:	e10a      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009db4:	2310      	movs	r3, #16
 8009db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dba:	e106      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a7c      	ldr	r2, [pc, #496]	@ (8009fb4 <UART_SetConfig+0x2e8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d138      	bne.n	8009e38 <UART_SetConfig+0x16c>
 8009dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8009fb0 <UART_SetConfig+0x2e4>)
 8009dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dcc:	f003 030c 	and.w	r3, r3, #12
 8009dd0:	2b0c      	cmp	r3, #12
 8009dd2:	d82d      	bhi.n	8009e30 <UART_SetConfig+0x164>
 8009dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ddc <UART_SetConfig+0x110>)
 8009dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dda:	bf00      	nop
 8009ddc:	08009e11 	.word	0x08009e11
 8009de0:	08009e31 	.word	0x08009e31
 8009de4:	08009e31 	.word	0x08009e31
 8009de8:	08009e31 	.word	0x08009e31
 8009dec:	08009e21 	.word	0x08009e21
 8009df0:	08009e31 	.word	0x08009e31
 8009df4:	08009e31 	.word	0x08009e31
 8009df8:	08009e31 	.word	0x08009e31
 8009dfc:	08009e19 	.word	0x08009e19
 8009e00:	08009e31 	.word	0x08009e31
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	08009e31 	.word	0x08009e31
 8009e0c:	08009e29 	.word	0x08009e29
 8009e10:	2300      	movs	r3, #0
 8009e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e16:	e0d8      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e1e:	e0d4      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e26:	e0d0      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e2e:	e0cc      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e30:	2310      	movs	r3, #16
 8009e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e36:	e0c8      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a5e      	ldr	r2, [pc, #376]	@ (8009fb8 <UART_SetConfig+0x2ec>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d125      	bne.n	8009e8e <UART_SetConfig+0x1c2>
 8009e42:	4b5b      	ldr	r3, [pc, #364]	@ (8009fb0 <UART_SetConfig+0x2e4>)
 8009e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e4c:	2b30      	cmp	r3, #48	@ 0x30
 8009e4e:	d016      	beq.n	8009e7e <UART_SetConfig+0x1b2>
 8009e50:	2b30      	cmp	r3, #48	@ 0x30
 8009e52:	d818      	bhi.n	8009e86 <UART_SetConfig+0x1ba>
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	d00a      	beq.n	8009e6e <UART_SetConfig+0x1a2>
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d814      	bhi.n	8009e86 <UART_SetConfig+0x1ba>
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <UART_SetConfig+0x19a>
 8009e60:	2b10      	cmp	r3, #16
 8009e62:	d008      	beq.n	8009e76 <UART_SetConfig+0x1aa>
 8009e64:	e00f      	b.n	8009e86 <UART_SetConfig+0x1ba>
 8009e66:	2300      	movs	r3, #0
 8009e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6c:	e0ad      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e6e:	2302      	movs	r3, #2
 8009e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e74:	e0a9      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e76:	2304      	movs	r3, #4
 8009e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e7c:	e0a5      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e7e:	2308      	movs	r3, #8
 8009e80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e84:	e0a1      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e86:	2310      	movs	r3, #16
 8009e88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e8c:	e09d      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a4a      	ldr	r2, [pc, #296]	@ (8009fbc <UART_SetConfig+0x2f0>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d125      	bne.n	8009ee4 <UART_SetConfig+0x218>
 8009e98:	4b45      	ldr	r3, [pc, #276]	@ (8009fb0 <UART_SetConfig+0x2e4>)
 8009e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ea2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ea4:	d016      	beq.n	8009ed4 <UART_SetConfig+0x208>
 8009ea6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ea8:	d818      	bhi.n	8009edc <UART_SetConfig+0x210>
 8009eaa:	2b80      	cmp	r3, #128	@ 0x80
 8009eac:	d00a      	beq.n	8009ec4 <UART_SetConfig+0x1f8>
 8009eae:	2b80      	cmp	r3, #128	@ 0x80
 8009eb0:	d814      	bhi.n	8009edc <UART_SetConfig+0x210>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <UART_SetConfig+0x1f0>
 8009eb6:	2b40      	cmp	r3, #64	@ 0x40
 8009eb8:	d008      	beq.n	8009ecc <UART_SetConfig+0x200>
 8009eba:	e00f      	b.n	8009edc <UART_SetConfig+0x210>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ec2:	e082      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eca:	e07e      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009ecc:	2304      	movs	r3, #4
 8009ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed2:	e07a      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009ed4:	2308      	movs	r3, #8
 8009ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eda:	e076      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009edc:	2310      	movs	r3, #16
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee2:	e072      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a35      	ldr	r2, [pc, #212]	@ (8009fc0 <UART_SetConfig+0x2f4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d12a      	bne.n	8009f44 <UART_SetConfig+0x278>
 8009eee:	4b30      	ldr	r3, [pc, #192]	@ (8009fb0 <UART_SetConfig+0x2e4>)
 8009ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009efc:	d01a      	beq.n	8009f34 <UART_SetConfig+0x268>
 8009efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f02:	d81b      	bhi.n	8009f3c <UART_SetConfig+0x270>
 8009f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f08:	d00c      	beq.n	8009f24 <UART_SetConfig+0x258>
 8009f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f0e:	d815      	bhi.n	8009f3c <UART_SetConfig+0x270>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d003      	beq.n	8009f1c <UART_SetConfig+0x250>
 8009f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f18:	d008      	beq.n	8009f2c <UART_SetConfig+0x260>
 8009f1a:	e00f      	b.n	8009f3c <UART_SetConfig+0x270>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f22:	e052      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f24:	2302      	movs	r3, #2
 8009f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f2a:	e04e      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f2c:	2304      	movs	r3, #4
 8009f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f32:	e04a      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f34:	2308      	movs	r3, #8
 8009f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f3a:	e046      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f3c:	2310      	movs	r3, #16
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f42:	e042      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a17      	ldr	r2, [pc, #92]	@ (8009fa8 <UART_SetConfig+0x2dc>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d13a      	bne.n	8009fc4 <UART_SetConfig+0x2f8>
 8009f4e:	4b18      	ldr	r3, [pc, #96]	@ (8009fb0 <UART_SetConfig+0x2e4>)
 8009f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f5c:	d01a      	beq.n	8009f94 <UART_SetConfig+0x2c8>
 8009f5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f62:	d81b      	bhi.n	8009f9c <UART_SetConfig+0x2d0>
 8009f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f68:	d00c      	beq.n	8009f84 <UART_SetConfig+0x2b8>
 8009f6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f6e:	d815      	bhi.n	8009f9c <UART_SetConfig+0x2d0>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d003      	beq.n	8009f7c <UART_SetConfig+0x2b0>
 8009f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f78:	d008      	beq.n	8009f8c <UART_SetConfig+0x2c0>
 8009f7a:	e00f      	b.n	8009f9c <UART_SetConfig+0x2d0>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f82:	e022      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f84:	2302      	movs	r3, #2
 8009f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8a:	e01e      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f92:	e01a      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f94:	2308      	movs	r3, #8
 8009f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f9a:	e016      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fa2:	e012      	b.n	8009fca <UART_SetConfig+0x2fe>
 8009fa4:	cfff69f3 	.word	0xcfff69f3
 8009fa8:	40008000 	.word	0x40008000
 8009fac:	40013800 	.word	0x40013800
 8009fb0:	40021000 	.word	0x40021000
 8009fb4:	40004400 	.word	0x40004400
 8009fb8:	40004800 	.word	0x40004800
 8009fbc:	40004c00 	.word	0x40004c00
 8009fc0:	40005000 	.word	0x40005000
 8009fc4:	2310      	movs	r3, #16
 8009fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4aae      	ldr	r2, [pc, #696]	@ (800a288 <UART_SetConfig+0x5bc>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	f040 8097 	bne.w	800a104 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fda:	2b08      	cmp	r3, #8
 8009fdc:	d823      	bhi.n	800a026 <UART_SetConfig+0x35a>
 8009fde:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe4 <UART_SetConfig+0x318>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	0800a009 	.word	0x0800a009
 8009fe8:	0800a027 	.word	0x0800a027
 8009fec:	0800a011 	.word	0x0800a011
 8009ff0:	0800a027 	.word	0x0800a027
 8009ff4:	0800a017 	.word	0x0800a017
 8009ff8:	0800a027 	.word	0x0800a027
 8009ffc:	0800a027 	.word	0x0800a027
 800a000:	0800a027 	.word	0x0800a027
 800a004:	0800a01f 	.word	0x0800a01f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a008:	f7fd fe5c 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 800a00c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a00e:	e010      	b.n	800a032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a010:	4b9e      	ldr	r3, [pc, #632]	@ (800a28c <UART_SetConfig+0x5c0>)
 800a012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a014:	e00d      	b.n	800a032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a016:	f7fd fde7 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 800a01a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a01c:	e009      	b.n	800a032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a01e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a022:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a024:	e005      	b.n	800a032 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a030:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 8130 	beq.w	800a29a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a03e:	4a94      	ldr	r2, [pc, #592]	@ (800a290 <UART_SetConfig+0x5c4>)
 800a040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a044:	461a      	mov	r2, r3
 800a046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a048:	fbb3 f3f2 	udiv	r3, r3, r2
 800a04c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	4413      	add	r3, r2
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d305      	bcc.n	800a06a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a064:	69ba      	ldr	r2, [r7, #24]
 800a066:	429a      	cmp	r2, r3
 800a068:	d903      	bls.n	800a072 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a070:	e113      	b.n	800a29a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a074:	2200      	movs	r2, #0
 800a076:	60bb      	str	r3, [r7, #8]
 800a078:	60fa      	str	r2, [r7, #12]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07e:	4a84      	ldr	r2, [pc, #528]	@ (800a290 <UART_SetConfig+0x5c4>)
 800a080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a084:	b29b      	uxth	r3, r3
 800a086:	2200      	movs	r2, #0
 800a088:	603b      	str	r3, [r7, #0]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a090:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a094:	f7f6 fdea 	bl	8000c6c <__aeabi_uldivmod>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4610      	mov	r0, r2
 800a09e:	4619      	mov	r1, r3
 800a0a0:	f04f 0200 	mov.w	r2, #0
 800a0a4:	f04f 0300 	mov.w	r3, #0
 800a0a8:	020b      	lsls	r3, r1, #8
 800a0aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0ae:	0202      	lsls	r2, r0, #8
 800a0b0:	6979      	ldr	r1, [r7, #20]
 800a0b2:	6849      	ldr	r1, [r1, #4]
 800a0b4:	0849      	lsrs	r1, r1, #1
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	eb12 0804 	adds.w	r8, r2, r4
 800a0c0:	eb43 0905 	adc.w	r9, r3, r5
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	469a      	mov	sl, r3
 800a0cc:	4693      	mov	fp, r2
 800a0ce:	4652      	mov	r2, sl
 800a0d0:	465b      	mov	r3, fp
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 fdc9 	bl	8000c6c <__aeabi_uldivmod>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4613      	mov	r3, r2
 800a0e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0e8:	d308      	bcc.n	800a0fc <UART_SetConfig+0x430>
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0f0:	d204      	bcs.n	800a0fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	6a3a      	ldr	r2, [r7, #32]
 800a0f8:	60da      	str	r2, [r3, #12]
 800a0fa:	e0ce      	b.n	800a29a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a102:	e0ca      	b.n	800a29a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a10c:	d166      	bne.n	800a1dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a10e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a112:	2b08      	cmp	r3, #8
 800a114:	d827      	bhi.n	800a166 <UART_SetConfig+0x49a>
 800a116:	a201      	add	r2, pc, #4	@ (adr r2, 800a11c <UART_SetConfig+0x450>)
 800a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11c:	0800a141 	.word	0x0800a141
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a151 	.word	0x0800a151
 800a128:	0800a167 	.word	0x0800a167
 800a12c:	0800a157 	.word	0x0800a157
 800a130:	0800a167 	.word	0x0800a167
 800a134:	0800a167 	.word	0x0800a167
 800a138:	0800a167 	.word	0x0800a167
 800a13c:	0800a15f 	.word	0x0800a15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a140:	f7fd fdc0 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 800a144:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a146:	e014      	b.n	800a172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a148:	f7fd fdd2 	bl	8007cf0 <HAL_RCC_GetPCLK2Freq>
 800a14c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a14e:	e010      	b.n	800a172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a150:	4b4e      	ldr	r3, [pc, #312]	@ (800a28c <UART_SetConfig+0x5c0>)
 800a152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a154:	e00d      	b.n	800a172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a156:	f7fd fd47 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 800a15a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a15c:	e009      	b.n	800a172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a15e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a164:	e005      	b.n	800a172 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a166:	2300      	movs	r3, #0
 800a168:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 8090 	beq.w	800a29a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17e:	4a44      	ldr	r2, [pc, #272]	@ (800a290 <UART_SetConfig+0x5c4>)
 800a180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a184:	461a      	mov	r2, r3
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	fbb3 f3f2 	udiv	r3, r3, r2
 800a18c:	005a      	lsls	r2, r3, #1
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	085b      	lsrs	r3, r3, #1
 800a194:	441a      	add	r2, r3
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a19e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	2b0f      	cmp	r3, #15
 800a1a4:	d916      	bls.n	800a1d4 <UART_SetConfig+0x508>
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1ac:	d212      	bcs.n	800a1d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	f023 030f 	bic.w	r3, r3, #15
 800a1b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	085b      	lsrs	r3, r3, #1
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	f003 0307 	and.w	r3, r3, #7
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	8bfb      	ldrh	r3, [r7, #30]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	8bfa      	ldrh	r2, [r7, #30]
 800a1d0:	60da      	str	r2, [r3, #12]
 800a1d2:	e062      	b.n	800a29a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1da:	e05e      	b.n	800a29a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1e0:	2b08      	cmp	r3, #8
 800a1e2:	d828      	bhi.n	800a236 <UART_SetConfig+0x56a>
 800a1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <UART_SetConfig+0x520>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a211 	.word	0x0800a211
 800a1f0:	0800a219 	.word	0x0800a219
 800a1f4:	0800a221 	.word	0x0800a221
 800a1f8:	0800a237 	.word	0x0800a237
 800a1fc:	0800a227 	.word	0x0800a227
 800a200:	0800a237 	.word	0x0800a237
 800a204:	0800a237 	.word	0x0800a237
 800a208:	0800a237 	.word	0x0800a237
 800a20c:	0800a22f 	.word	0x0800a22f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a210:	f7fd fd58 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 800a214:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a216:	e014      	b.n	800a242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a218:	f7fd fd6a 	bl	8007cf0 <HAL_RCC_GetPCLK2Freq>
 800a21c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a21e:	e010      	b.n	800a242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a220:	4b1a      	ldr	r3, [pc, #104]	@ (800a28c <UART_SetConfig+0x5c0>)
 800a222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a224:	e00d      	b.n	800a242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a226:	f7fd fcdf 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 800a22a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a22c:	e009      	b.n	800a242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a22e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a234:	e005      	b.n	800a242 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a240:	bf00      	nop
    }

    if (pclk != 0U)
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d028      	beq.n	800a29a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24c:	4a10      	ldr	r2, [pc, #64]	@ (800a290 <UART_SetConfig+0x5c4>)
 800a24e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a252:	461a      	mov	r2, r3
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	fbb3 f2f2 	udiv	r2, r3, r2
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	085b      	lsrs	r3, r3, #1
 800a260:	441a      	add	r2, r3
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	2b0f      	cmp	r3, #15
 800a270:	d910      	bls.n	800a294 <UART_SetConfig+0x5c8>
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a278:	d20c      	bcs.n	800a294 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	60da      	str	r2, [r3, #12]
 800a284:	e009      	b.n	800a29a <UART_SetConfig+0x5ce>
 800a286:	bf00      	nop
 800a288:	40008000 	.word	0x40008000
 800a28c:	00f42400 	.word	0x00f42400
 800a290:	0800d4fc 	.word	0x0800d4fc
      }
      else
      {
        ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a2b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3730      	adds	r7, #48	@ 0x30
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a2c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d0:	f003 0308 	and.w	r3, r3, #8
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00a      	beq.n	800a2ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00a      	beq.n	800a332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a336:	f003 0304 	and.w	r3, r3, #4
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a358:	f003 0310 	and.w	r3, r3, #16
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00a      	beq.n	800a376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37a:	f003 0320 	and.w	r3, r3, #32
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	430a      	orrs	r2, r1
 800a396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d01a      	beq.n	800a3da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3c2:	d10a      	bne.n	800a3da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	605a      	str	r2, [r3, #4]
  }
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b098      	sub	sp, #96	@ 0x60
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a418:	f7f9 fb8a 	bl	8003b30 <HAL_GetTick>
 800a41c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0308 	and.w	r3, r3, #8
 800a428:	2b08      	cmp	r3, #8
 800a42a:	d12f      	bne.n	800a48c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a42c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a434:	2200      	movs	r2, #0
 800a436:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f88e 	bl	800a55c <UART_WaitOnFlagUntilTimeout>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d022      	beq.n	800a48c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a45a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	461a      	mov	r2, r3
 800a462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a464:	647b      	str	r3, [r7, #68]	@ 0x44
 800a466:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a46a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a46c:	e841 2300 	strex	r3, r2, [r1]
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e6      	bne.n	800a446 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2220      	movs	r2, #32
 800a47c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e063      	b.n	800a554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0304 	and.w	r3, r3, #4
 800a496:	2b04      	cmp	r3, #4
 800a498:	d149      	bne.n	800a52e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a49a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f857 	bl	800a55c <UART_WaitOnFlagUntilTimeout>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d03c      	beq.n	800a52e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e6      	bne.n	800a4b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f023 0301 	bic.w	r3, r3, #1
 800a4fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3308      	adds	r3, #8
 800a504:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a506:	61fa      	str	r2, [r7, #28]
 800a508:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	69b9      	ldr	r1, [r7, #24]
 800a50c:	69fa      	ldr	r2, [r7, #28]
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	617b      	str	r3, [r7, #20]
   return(result);
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e5      	bne.n	800a4e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e012      	b.n	800a554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2220      	movs	r2, #32
 800a53a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3758      	adds	r7, #88	@ 0x58
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	603b      	str	r3, [r7, #0]
 800a568:	4613      	mov	r3, r2
 800a56a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a56c:	e04f      	b.n	800a60e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a574:	d04b      	beq.n	800a60e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a576:	f7f9 fadb 	bl	8003b30 <HAL_GetTick>
 800a57a:	4602      	mov	r2, r0
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	69ba      	ldr	r2, [r7, #24]
 800a582:	429a      	cmp	r2, r3
 800a584:	d302      	bcc.n	800a58c <UART_WaitOnFlagUntilTimeout+0x30>
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e04e      	b.n	800a62e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d037      	beq.n	800a60e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b80      	cmp	r3, #128	@ 0x80
 800a5a2:	d034      	beq.n	800a60e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b40      	cmp	r3, #64	@ 0x40
 800a5a8:	d031      	beq.n	800a60e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d110      	bne.n	800a5da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2208      	movs	r2, #8
 800a5be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 f95b 	bl	800a87c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2208      	movs	r2, #8
 800a5ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e029      	b.n	800a62e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5e8:	d111      	bne.n	800a60e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f000 f941 	bl	800a87c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e00f      	b.n	800a62e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69da      	ldr	r2, [r3, #28]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	4013      	ands	r3, r2
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	bf0c      	ite	eq
 800a61e:	2301      	moveq	r3, #1
 800a620:	2300      	movne	r3, #0
 800a622:	b2db      	uxtb	r3, r3
 800a624:	461a      	mov	r2, r3
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d0a0      	beq.n	800a56e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a638:	b480      	push	{r7}
 800a63a:	b0a3      	sub	sp, #140	@ 0x8c
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	4613      	mov	r3, r2
 800a644:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	88fa      	ldrh	r2, [r7, #6]
 800a650:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	88fa      	ldrh	r2, [r7, #6]
 800a658:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a66a:	d10e      	bne.n	800a68a <UART_Start_Receive_IT+0x52>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d105      	bne.n	800a680 <UART_Start_Receive_IT+0x48>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a67a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a67e:	e02d      	b.n	800a6dc <UART_Start_Receive_IT+0xa4>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	22ff      	movs	r2, #255	@ 0xff
 800a684:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a688:	e028      	b.n	800a6dc <UART_Start_Receive_IT+0xa4>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10d      	bne.n	800a6ae <UART_Start_Receive_IT+0x76>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d104      	bne.n	800a6a4 <UART_Start_Receive_IT+0x6c>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	22ff      	movs	r2, #255	@ 0xff
 800a69e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a6a2:	e01b      	b.n	800a6dc <UART_Start_Receive_IT+0xa4>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	227f      	movs	r2, #127	@ 0x7f
 800a6a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a6ac:	e016      	b.n	800a6dc <UART_Start_Receive_IT+0xa4>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6b6:	d10d      	bne.n	800a6d4 <UART_Start_Receive_IT+0x9c>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d104      	bne.n	800a6ca <UART_Start_Receive_IT+0x92>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	227f      	movs	r2, #127	@ 0x7f
 800a6c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a6c8:	e008      	b.n	800a6dc <UART_Start_Receive_IT+0xa4>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	223f      	movs	r2, #63	@ 0x3f
 800a6ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a6d2:	e003      	b.n	800a6dc <UART_Start_Receive_IT+0xa4>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2222      	movs	r2, #34	@ 0x22
 800a6e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3308      	adds	r3, #8
 800a6f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6f6:	e853 3f00 	ldrex	r3, [r3]
 800a6fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a6fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6fe:	f043 0301 	orr.w	r3, r3, #1
 800a702:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3308      	adds	r3, #8
 800a70c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a710:	673a      	str	r2, [r7, #112]	@ 0x70
 800a712:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a714:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a716:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a718:	e841 2300 	strex	r3, r2, [r1]
 800a71c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a71e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1e3      	bne.n	800a6ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a72c:	d14f      	bne.n	800a7ce <UART_Start_Receive_IT+0x196>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a734:	88fa      	ldrh	r2, [r7, #6]
 800a736:	429a      	cmp	r2, r3
 800a738:	d349      	bcc.n	800a7ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a742:	d107      	bne.n	800a754 <UART_Start_Receive_IT+0x11c>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	4a47      	ldr	r2, [pc, #284]	@ (800a86c <UART_Start_Receive_IT+0x234>)
 800a750:	675a      	str	r2, [r3, #116]	@ 0x74
 800a752:	e002      	b.n	800a75a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4a46      	ldr	r2, [pc, #280]	@ (800a870 <UART_Start_Receive_IT+0x238>)
 800a758:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d01a      	beq.n	800a798 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a76a:	e853 3f00 	ldrex	r3, [r3]
 800a76e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a776:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a784:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a786:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a788:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a78a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a78c:	e841 2300 	strex	r3, r2, [r1]
 800a790:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1e4      	bne.n	800a762 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3308      	adds	r3, #8
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a2:	e853 3f00 	ldrex	r3, [r3]
 800a7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3308      	adds	r3, #8
 800a7b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a7b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a7ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7c0:	e841 2300 	strex	r3, r2, [r1]
 800a7c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e5      	bne.n	800a798 <UART_Start_Receive_IT+0x160>
 800a7cc:	e046      	b.n	800a85c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7d6:	d107      	bne.n	800a7e8 <UART_Start_Receive_IT+0x1b0>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d103      	bne.n	800a7e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4a24      	ldr	r2, [pc, #144]	@ (800a874 <UART_Start_Receive_IT+0x23c>)
 800a7e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a7e6:	e002      	b.n	800a7ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4a23      	ldr	r2, [pc, #140]	@ (800a878 <UART_Start_Receive_IT+0x240>)
 800a7ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d019      	beq.n	800a82a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a806:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a80a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	461a      	mov	r2, r3
 800a812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a814:	637b      	str	r3, [r7, #52]	@ 0x34
 800a816:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a818:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a81a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a81c:	e841 2300 	strex	r3, r2, [r1]
 800a820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e6      	bne.n	800a7f6 <UART_Start_Receive_IT+0x1be>
 800a828:	e018      	b.n	800a85c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	613b      	str	r3, [r7, #16]
   return(result);
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f043 0320 	orr.w	r3, r3, #32
 800a83e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	461a      	mov	r2, r3
 800a846:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a848:	623b      	str	r3, [r7, #32]
 800a84a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84c:	69f9      	ldr	r1, [r7, #28]
 800a84e:	6a3a      	ldr	r2, [r7, #32]
 800a850:	e841 2300 	strex	r3, r2, [r1]
 800a854:	61bb      	str	r3, [r7, #24]
   return(result);
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e6      	bne.n	800a82a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	378c      	adds	r7, #140	@ 0x8c
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	0800b01d 	.word	0x0800b01d
 800a870:	0800acb9 	.word	0x0800acb9
 800a874:	0800ab01 	.word	0x0800ab01
 800a878:	0800a949 	.word	0x0800a949

0800a87c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b095      	sub	sp, #84	@ 0x54
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e6      	bne.n	800a884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8cc:	f023 0301 	bic.w	r3, r3, #1
 800a8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e3      	bne.n	800a8b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d118      	bne.n	800a928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	e853 3f00 	ldrex	r3, [r3]
 800a902:	60bb      	str	r3, [r7, #8]
   return(result);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f023 0310 	bic.w	r3, r3, #16
 800a90a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	461a      	mov	r2, r3
 800a912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6979      	ldr	r1, [r7, #20]
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	613b      	str	r3, [r7, #16]
   return(result);
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e6      	bne.n	800a8f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a93c:	bf00      	nop
 800a93e:	3754      	adds	r7, #84	@ 0x54
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b09c      	sub	sp, #112	@ 0x70
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a956:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a960:	2b22      	cmp	r3, #34	@ 0x22
 800a962:	f040 80be 	bne.w	800aae2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a970:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a974:	b2d9      	uxtb	r1, r3
 800a976:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a980:	400a      	ands	r2, r1
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a996:	b29b      	uxth	r3, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f040 80a1 	bne.w	800aaf2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9d6:	e841 2300 	strex	r3, r2, [r1]
 800a9da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a9dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e6      	bne.n	800a9b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ec:	e853 3f00 	ldrex	r3, [r3]
 800a9f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f4:	f023 0301 	bic.w	r3, r3, #1
 800a9f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3308      	adds	r3, #8
 800aa00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa02:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa0a:	e841 2300 	strex	r3, r2, [r1]
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e5      	bne.n	800a9e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a33      	ldr	r2, [pc, #204]	@ (800aafc <UART_RxISR_8BIT+0x1b4>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d01f      	beq.n	800aa74 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d018      	beq.n	800aa74 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4a:	e853 3f00 	ldrex	r3, [r3]
 800aa4e:	623b      	str	r3, [r7, #32]
   return(result);
 800aa50:	6a3b      	ldr	r3, [r7, #32]
 800aa52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa56:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa60:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa68:	e841 2300 	strex	r3, r2, [r1]
 800aa6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e6      	bne.n	800aa42 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d12e      	bne.n	800aada <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f023 0310 	bic.w	r3, r3, #16
 800aa96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaa0:	61fb      	str	r3, [r7, #28]
 800aaa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	69b9      	ldr	r1, [r7, #24]
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	617b      	str	r3, [r7, #20]
   return(result);
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e6      	bne.n	800aa82 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	f003 0310 	and.w	r3, r3, #16
 800aabe:	2b10      	cmp	r3, #16
 800aac0:	d103      	bne.n	800aaca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2210      	movs	r2, #16
 800aac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7ff f8ee 	bl	8009cb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aad8:	e00b      	b.n	800aaf2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7f7 ffb0 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 800aae0:	e007      	b.n	800aaf2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	699a      	ldr	r2, [r3, #24]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f042 0208 	orr.w	r2, r2, #8
 800aaf0:	619a      	str	r2, [r3, #24]
}
 800aaf2:	bf00      	nop
 800aaf4:	3770      	adds	r7, #112	@ 0x70
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	40008000 	.word	0x40008000

0800ab00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b09c      	sub	sp, #112	@ 0x70
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab18:	2b22      	cmp	r3, #34	@ 0x22
 800ab1a:	f040 80be 	bne.w	800ac9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ab2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ab32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ab36:	4013      	ands	r3, r2
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab42:	1c9a      	adds	r2, r3, #2
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	3b01      	subs	r3, #1
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f040 80a1 	bne.w	800acaa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab7c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab86:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab88:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ab94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e6      	bne.n	800ab68 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abac:	f023 0301 	bic.w	r3, r3, #1
 800abb0:	663b      	str	r3, [r7, #96]	@ 0x60
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3308      	adds	r3, #8
 800abb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abba:	643a      	str	r2, [r7, #64]	@ 0x40
 800abbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abc2:	e841 2300 	strex	r3, r2, [r1]
 800abc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1e5      	bne.n	800ab9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a33      	ldr	r2, [pc, #204]	@ (800acb4 <UART_RxISR_16BIT+0x1b4>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d01f      	beq.n	800ac2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d018      	beq.n	800ac2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	e853 3f00 	ldrex	r3, [r3]
 800ac06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac1a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac20:	e841 2300 	strex	r3, r2, [r1]
 800ac24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1e6      	bne.n	800abfa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d12e      	bne.n	800ac92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f023 0310 	bic.w	r3, r3, #16
 800ac4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac58:	61bb      	str	r3, [r7, #24]
 800ac5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	6979      	ldr	r1, [r7, #20]
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	613b      	str	r3, [r7, #16]
   return(result);
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e6      	bne.n	800ac3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	f003 0310 	and.w	r3, r3, #16
 800ac76:	2b10      	cmp	r3, #16
 800ac78:	d103      	bne.n	800ac82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2210      	movs	r2, #16
 800ac80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff f812 	bl	8009cb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac90:	e00b      	b.n	800acaa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7f7 fed4 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 800ac98:	e007      	b.n	800acaa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	699a      	ldr	r2, [r3, #24]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f042 0208 	orr.w	r2, r2, #8
 800aca8:	619a      	str	r2, [r3, #24]
}
 800acaa:	bf00      	nop
 800acac:	3770      	adds	r7, #112	@ 0x70
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	40008000 	.word	0x40008000

0800acb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b0ac      	sub	sp, #176	@ 0xb0
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800acc6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acee:	2b22      	cmp	r3, #34	@ 0x22
 800acf0:	f040 8183 	bne.w	800affa <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800acfa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800acfe:	e126      	b.n	800af4e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad06:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad0a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ad0e:	b2d9      	uxtb	r1, r3
 800ad10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad1a:	400a      	ands	r2, r1
 800ad1c:	b2d2      	uxtb	r2, r2
 800ad1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	3b01      	subs	r3, #1
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	69db      	ldr	r3, [r3, #28]
 800ad42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ad46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d053      	beq.n	800adfa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d011      	beq.n	800ad82 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ad5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ad62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00b      	beq.n	800ad82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad78:	f043 0201 	orr.w	r2, r3, #1
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d011      	beq.n	800adb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ad8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00b      	beq.n	800adb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ada8:	f043 0204 	orr.w	r2, r3, #4
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adb6:	f003 0304 	and.w	r3, r3, #4
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d011      	beq.n	800ade2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800adbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00b      	beq.n	800ade2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2204      	movs	r2, #4
 800add0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800add8:	f043 0202 	orr.w	r2, r3, #2
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d006      	beq.n	800adfa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7fe ff57 	bl	8009ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 80a3 	bne.w	800af4e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ae16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	461a      	mov	r2, r3
 800ae26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae2c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ae30:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ae38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e4      	bne.n	800ae08 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3308      	adds	r3, #8
 800ae44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae48:	e853 3f00 	ldrex	r3, [r3]
 800ae4c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ae4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae54:	f023 0301 	bic.w	r3, r3, #1
 800ae58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3308      	adds	r3, #8
 800ae62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ae66:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ae68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ae6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ae6e:	e841 2300 	strex	r3, r2, [r1]
 800ae72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ae74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1e1      	bne.n	800ae3e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a60      	ldr	r2, [pc, #384]	@ (800b014 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d021      	beq.n	800aedc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d01a      	beq.n	800aedc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeae:	e853 3f00 	ldrex	r3, [r3]
 800aeb2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aeb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aeba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aec8:	657b      	str	r3, [r7, #84]	@ 0x54
 800aeca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aecc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aece:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aed0:	e841 2300 	strex	r3, r2, [r1]
 800aed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1e4      	bne.n	800aea6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d130      	bne.n	800af46 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefa:	f023 0310 	bic.w	r3, r3, #16
 800aefe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800af0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e4      	bne.n	800aeea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	f003 0310 	and.w	r3, r3, #16
 800af2a:	2b10      	cmp	r3, #16
 800af2c:	d103      	bne.n	800af36 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2210      	movs	r2, #16
 800af34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7fe feb8 	bl	8009cb4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800af44:	e00e      	b.n	800af64 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7f7 fd7a 	bl	8002a40 <HAL_UART_RxCpltCallback>
        break;
 800af4c:	e00a      	b.n	800af64 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af4e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800af52:	2b00      	cmp	r3, #0
 800af54:	d006      	beq.n	800af64 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800af56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f47f aece 	bne.w	800ad00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af6a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800af6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800af72:	2b00      	cmp	r3, #0
 800af74:	d049      	beq.n	800b00a <UART_RxISR_8BIT_FIFOEN+0x352>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af7c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800af80:	429a      	cmp	r2, r3
 800af82:	d242      	bcs.n	800b00a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3308      	adds	r3, #8
 800af8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	e853 3f00 	ldrex	r3, [r3]
 800af92:	61fb      	str	r3, [r7, #28]
   return(result);
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3308      	adds	r3, #8
 800afa4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800afa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800afaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afb0:	e841 2300 	strex	r3, r2, [r1]
 800afb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800afb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e3      	bne.n	800af84 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a16      	ldr	r2, [pc, #88]	@ (800b018 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800afc0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	e853 3f00 	ldrex	r3, [r3]
 800afce:	60bb      	str	r3, [r7, #8]
   return(result);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f043 0320 	orr.w	r3, r3, #32
 800afd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800afe4:	61bb      	str	r3, [r7, #24]
 800afe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe8:	6979      	ldr	r1, [r7, #20]
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	e841 2300 	strex	r3, r2, [r1]
 800aff0:	613b      	str	r3, [r7, #16]
   return(result);
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1e4      	bne.n	800afc2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aff8:	e007      	b.n	800b00a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	699a      	ldr	r2, [r3, #24]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f042 0208 	orr.w	r2, r2, #8
 800b008:	619a      	str	r2, [r3, #24]
}
 800b00a:	bf00      	nop
 800b00c:	37b0      	adds	r7, #176	@ 0xb0
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	40008000 	.word	0x40008000
 800b018:	0800a949 	.word	0x0800a949

0800b01c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b0ae      	sub	sp, #184	@ 0xb8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b02a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b052:	2b22      	cmp	r3, #34	@ 0x22
 800b054:	f040 8187 	bne.w	800b366 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b05e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b062:	e12a      	b.n	800b2ba <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b076:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b07a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b07e:	4013      	ands	r3, r2
 800b080:	b29a      	uxth	r2, r3
 800b082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b086:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b08c:	1c9a      	adds	r2, r3, #2
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b098:	b29b      	uxth	r3, r3
 800b09a:	3b01      	subs	r3, #1
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b0ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d053      	beq.n	800b162 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d011      	beq.n	800b0ea <UART_RxISR_16BIT_FIFOEN+0xce>
 800b0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00b      	beq.n	800b0ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e0:	f043 0201 	orr.w	r2, r3, #1
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d011      	beq.n	800b11a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b0f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00b      	beq.n	800b11a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2202      	movs	r2, #2
 800b108:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b110:	f043 0204 	orr.w	r2, r3, #4
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b11a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b11e:	f003 0304 	and.w	r3, r3, #4
 800b122:	2b00      	cmp	r3, #0
 800b124:	d011      	beq.n	800b14a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00b      	beq.n	800b14a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2204      	movs	r2, #4
 800b138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b140:	f043 0202 	orr.w	r2, r3, #2
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b150:	2b00      	cmp	r3, #0
 800b152:	d006      	beq.n	800b162 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7fe fda3 	bl	8009ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b168:	b29b      	uxth	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f040 80a5 	bne.w	800b2ba <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b178:	e853 3f00 	ldrex	r3, [r3]
 800b17c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b17e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	461a      	mov	r2, r3
 800b18e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b196:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b19a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b1a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e2      	bne.n	800b170 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b1ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1c0:	f023 0301 	bic.w	r3, r3, #1
 800b1c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b1d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b1d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b1d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1da:	e841 2300 	strex	r3, r2, [r1]
 800b1de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b1e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1e1      	bne.n	800b1aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a60      	ldr	r2, [pc, #384]	@ (800b380 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d021      	beq.n	800b248 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d01a      	beq.n	800b248 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b21a:	e853 3f00 	ldrex	r3, [r3]
 800b21e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b222:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b234:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b236:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b23a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b23c:	e841 2300 	strex	r3, r2, [r1]
 800b240:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1e4      	bne.n	800b212 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d130      	bne.n	800b2b2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b266:	f023 0310 	bic.w	r3, r3, #16
 800b26a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b278:	647b      	str	r3, [r7, #68]	@ 0x44
 800b27a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b27e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e4      	bne.n	800b256 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	f003 0310 	and.w	r3, r3, #16
 800b296:	2b10      	cmp	r3, #16
 800b298:	d103      	bne.n	800b2a2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2210      	movs	r2, #16
 800b2a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7fe fd02 	bl	8009cb4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b2b0:	e00e      	b.n	800b2d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7f7 fbc4 	bl	8002a40 <HAL_UART_RxCpltCallback>
        break;
 800b2b8:	e00a      	b.n	800b2d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b2ba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d006      	beq.n	800b2d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b2c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b2c6:	f003 0320 	and.w	r3, r3, #32
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f47f aeca 	bne.w	800b064 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2d6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b2da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d049      	beq.n	800b376 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b2e8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d242      	bcs.n	800b376 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	e853 3f00 	ldrex	r3, [r3]
 800b2fe:	623b      	str	r3, [r7, #32]
   return(result);
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b306:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3308      	adds	r3, #8
 800b310:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b314:	633a      	str	r2, [r7, #48]	@ 0x30
 800b316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e3      	bne.n	800b2f0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a16      	ldr	r2, [pc, #88]	@ (800b384 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b32c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	e853 3f00 	ldrex	r3, [r3]
 800b33a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f043 0320 	orr.w	r3, r3, #32
 800b342:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b350:	61fb      	str	r3, [r7, #28]
 800b352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b354:	69b9      	ldr	r1, [r7, #24]
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	e841 2300 	strex	r3, r2, [r1]
 800b35c:	617b      	str	r3, [r7, #20]
   return(result);
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e4      	bne.n	800b32e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b364:	e007      	b.n	800b376 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	699a      	ldr	r2, [r3, #24]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f042 0208 	orr.w	r2, r2, #8
 800b374:	619a      	str	r2, [r3, #24]
}
 800b376:	bf00      	nop
 800b378:	37b8      	adds	r7, #184	@ 0xb8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	40008000 	.word	0x40008000
 800b384:	0800ab01 	.word	0x0800ab01

0800b388 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b396:	2b01      	cmp	r3, #1
 800b398:	d101      	bne.n	800b39e <HAL_UARTEx_DisableFifoMode+0x16>
 800b39a:	2302      	movs	r3, #2
 800b39c:	e027      	b.n	800b3ee <HAL_UARTEx_DisableFifoMode+0x66>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2224      	movs	r2, #36	@ 0x24
 800b3aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f022 0201 	bic.w	r2, r2, #1
 800b3c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b3cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d101      	bne.n	800b412 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b40e:	2302      	movs	r3, #2
 800b410:	e02d      	b.n	800b46e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2224      	movs	r2, #36	@ 0x24
 800b41e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f022 0201 	bic.w	r2, r2, #1
 800b438:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f850 	bl	800b4f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2220      	movs	r2, #32
 800b460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b486:	2b01      	cmp	r3, #1
 800b488:	d101      	bne.n	800b48e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b48a:	2302      	movs	r3, #2
 800b48c:	e02d      	b.n	800b4ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2224      	movs	r2, #36	@ 0x24
 800b49a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f022 0201 	bic.w	r2, r2, #1
 800b4b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	430a      	orrs	r2, r1
 800b4c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f812 	bl	800b4f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
	...

0800b4f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b500:	2b00      	cmp	r3, #0
 800b502:	d108      	bne.n	800b516 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b514:	e031      	b.n	800b57a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b516:	2308      	movs	r3, #8
 800b518:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b51a:	2308      	movs	r3, #8
 800b51c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	0e5b      	lsrs	r3, r3, #25
 800b526:	b2db      	uxtb	r3, r3
 800b528:	f003 0307 	and.w	r3, r3, #7
 800b52c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	0f5b      	lsrs	r3, r3, #29
 800b536:	b2db      	uxtb	r3, r3
 800b538:	f003 0307 	and.w	r3, r3, #7
 800b53c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	7b3a      	ldrb	r2, [r7, #12]
 800b542:	4911      	ldr	r1, [pc, #68]	@ (800b588 <UARTEx_SetNbDataToProcess+0x94>)
 800b544:	5c8a      	ldrb	r2, [r1, r2]
 800b546:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b54a:	7b3a      	ldrb	r2, [r7, #12]
 800b54c:	490f      	ldr	r1, [pc, #60]	@ (800b58c <UARTEx_SetNbDataToProcess+0x98>)
 800b54e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b550:	fb93 f3f2 	sdiv	r3, r3, r2
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	7b7a      	ldrb	r2, [r7, #13]
 800b560:	4909      	ldr	r1, [pc, #36]	@ (800b588 <UARTEx_SetNbDataToProcess+0x94>)
 800b562:	5c8a      	ldrb	r2, [r1, r2]
 800b564:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b568:	7b7a      	ldrb	r2, [r7, #13]
 800b56a:	4908      	ldr	r1, [pc, #32]	@ (800b58c <UARTEx_SetNbDataToProcess+0x98>)
 800b56c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b56e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b572:	b29a      	uxth	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b57a:	bf00      	nop
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	0800d514 	.word	0x0800d514
 800b58c:	0800d51c 	.word	0x0800d51c

0800b590 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b598:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b59c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	43db      	mvns	r3, r3
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	1d3b      	adds	r3, r7, #4
 800b5d0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <std>:
 800b604:	2300      	movs	r3, #0
 800b606:	b510      	push	{r4, lr}
 800b608:	4604      	mov	r4, r0
 800b60a:	e9c0 3300 	strd	r3, r3, [r0]
 800b60e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b612:	6083      	str	r3, [r0, #8]
 800b614:	8181      	strh	r1, [r0, #12]
 800b616:	6643      	str	r3, [r0, #100]	@ 0x64
 800b618:	81c2      	strh	r2, [r0, #14]
 800b61a:	6183      	str	r3, [r0, #24]
 800b61c:	4619      	mov	r1, r3
 800b61e:	2208      	movs	r2, #8
 800b620:	305c      	adds	r0, #92	@ 0x5c
 800b622:	f000 fa49 	bl	800bab8 <memset>
 800b626:	4b0d      	ldr	r3, [pc, #52]	@ (800b65c <std+0x58>)
 800b628:	6263      	str	r3, [r4, #36]	@ 0x24
 800b62a:	4b0d      	ldr	r3, [pc, #52]	@ (800b660 <std+0x5c>)
 800b62c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b62e:	4b0d      	ldr	r3, [pc, #52]	@ (800b664 <std+0x60>)
 800b630:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b632:	4b0d      	ldr	r3, [pc, #52]	@ (800b668 <std+0x64>)
 800b634:	6323      	str	r3, [r4, #48]	@ 0x30
 800b636:	4b0d      	ldr	r3, [pc, #52]	@ (800b66c <std+0x68>)
 800b638:	6224      	str	r4, [r4, #32]
 800b63a:	429c      	cmp	r4, r3
 800b63c:	d006      	beq.n	800b64c <std+0x48>
 800b63e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b642:	4294      	cmp	r4, r2
 800b644:	d002      	beq.n	800b64c <std+0x48>
 800b646:	33d0      	adds	r3, #208	@ 0xd0
 800b648:	429c      	cmp	r4, r3
 800b64a:	d105      	bne.n	800b658 <std+0x54>
 800b64c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b654:	f000 baa8 	b.w	800bba8 <__retarget_lock_init_recursive>
 800b658:	bd10      	pop	{r4, pc}
 800b65a:	bf00      	nop
 800b65c:	0800b905 	.word	0x0800b905
 800b660:	0800b92b 	.word	0x0800b92b
 800b664:	0800b963 	.word	0x0800b963
 800b668:	0800b987 	.word	0x0800b987
 800b66c:	20000a48 	.word	0x20000a48

0800b670 <stdio_exit_handler>:
 800b670:	4a02      	ldr	r2, [pc, #8]	@ (800b67c <stdio_exit_handler+0xc>)
 800b672:	4903      	ldr	r1, [pc, #12]	@ (800b680 <stdio_exit_handler+0x10>)
 800b674:	4803      	ldr	r0, [pc, #12]	@ (800b684 <stdio_exit_handler+0x14>)
 800b676:	f000 b869 	b.w	800b74c <_fwalk_sglue>
 800b67a:	bf00      	nop
 800b67c:	20000148 	.word	0x20000148
 800b680:	0800cd4d 	.word	0x0800cd4d
 800b684:	20000158 	.word	0x20000158

0800b688 <cleanup_stdio>:
 800b688:	6841      	ldr	r1, [r0, #4]
 800b68a:	4b0c      	ldr	r3, [pc, #48]	@ (800b6bc <cleanup_stdio+0x34>)
 800b68c:	4299      	cmp	r1, r3
 800b68e:	b510      	push	{r4, lr}
 800b690:	4604      	mov	r4, r0
 800b692:	d001      	beq.n	800b698 <cleanup_stdio+0x10>
 800b694:	f001 fb5a 	bl	800cd4c <_fflush_r>
 800b698:	68a1      	ldr	r1, [r4, #8]
 800b69a:	4b09      	ldr	r3, [pc, #36]	@ (800b6c0 <cleanup_stdio+0x38>)
 800b69c:	4299      	cmp	r1, r3
 800b69e:	d002      	beq.n	800b6a6 <cleanup_stdio+0x1e>
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f001 fb53 	bl	800cd4c <_fflush_r>
 800b6a6:	68e1      	ldr	r1, [r4, #12]
 800b6a8:	4b06      	ldr	r3, [pc, #24]	@ (800b6c4 <cleanup_stdio+0x3c>)
 800b6aa:	4299      	cmp	r1, r3
 800b6ac:	d004      	beq.n	800b6b8 <cleanup_stdio+0x30>
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6b4:	f001 bb4a 	b.w	800cd4c <_fflush_r>
 800b6b8:	bd10      	pop	{r4, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000a48 	.word	0x20000a48
 800b6c0:	20000ab0 	.word	0x20000ab0
 800b6c4:	20000b18 	.word	0x20000b18

0800b6c8 <global_stdio_init.part.0>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b6f8 <global_stdio_init.part.0+0x30>)
 800b6cc:	4c0b      	ldr	r4, [pc, #44]	@ (800b6fc <global_stdio_init.part.0+0x34>)
 800b6ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b700 <global_stdio_init.part.0+0x38>)
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	f7ff ff94 	bl	800b604 <std>
 800b6dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	2109      	movs	r1, #9
 800b6e4:	f7ff ff8e 	bl	800b604 <std>
 800b6e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6ec:	2202      	movs	r2, #2
 800b6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f2:	2112      	movs	r1, #18
 800b6f4:	f7ff bf86 	b.w	800b604 <std>
 800b6f8:	20000b80 	.word	0x20000b80
 800b6fc:	20000a48 	.word	0x20000a48
 800b700:	0800b671 	.word	0x0800b671

0800b704 <__sfp_lock_acquire>:
 800b704:	4801      	ldr	r0, [pc, #4]	@ (800b70c <__sfp_lock_acquire+0x8>)
 800b706:	f000 ba50 	b.w	800bbaa <__retarget_lock_acquire_recursive>
 800b70a:	bf00      	nop
 800b70c:	20000b89 	.word	0x20000b89

0800b710 <__sfp_lock_release>:
 800b710:	4801      	ldr	r0, [pc, #4]	@ (800b718 <__sfp_lock_release+0x8>)
 800b712:	f000 ba4b 	b.w	800bbac <__retarget_lock_release_recursive>
 800b716:	bf00      	nop
 800b718:	20000b89 	.word	0x20000b89

0800b71c <__sinit>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	4604      	mov	r4, r0
 800b720:	f7ff fff0 	bl	800b704 <__sfp_lock_acquire>
 800b724:	6a23      	ldr	r3, [r4, #32]
 800b726:	b11b      	cbz	r3, 800b730 <__sinit+0x14>
 800b728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b72c:	f7ff bff0 	b.w	800b710 <__sfp_lock_release>
 800b730:	4b04      	ldr	r3, [pc, #16]	@ (800b744 <__sinit+0x28>)
 800b732:	6223      	str	r3, [r4, #32]
 800b734:	4b04      	ldr	r3, [pc, #16]	@ (800b748 <__sinit+0x2c>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1f5      	bne.n	800b728 <__sinit+0xc>
 800b73c:	f7ff ffc4 	bl	800b6c8 <global_stdio_init.part.0>
 800b740:	e7f2      	b.n	800b728 <__sinit+0xc>
 800b742:	bf00      	nop
 800b744:	0800b689 	.word	0x0800b689
 800b748:	20000b80 	.word	0x20000b80

0800b74c <_fwalk_sglue>:
 800b74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b750:	4607      	mov	r7, r0
 800b752:	4688      	mov	r8, r1
 800b754:	4614      	mov	r4, r2
 800b756:	2600      	movs	r6, #0
 800b758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b75c:	f1b9 0901 	subs.w	r9, r9, #1
 800b760:	d505      	bpl.n	800b76e <_fwalk_sglue+0x22>
 800b762:	6824      	ldr	r4, [r4, #0]
 800b764:	2c00      	cmp	r4, #0
 800b766:	d1f7      	bne.n	800b758 <_fwalk_sglue+0xc>
 800b768:	4630      	mov	r0, r6
 800b76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b76e:	89ab      	ldrh	r3, [r5, #12]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d907      	bls.n	800b784 <_fwalk_sglue+0x38>
 800b774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b778:	3301      	adds	r3, #1
 800b77a:	d003      	beq.n	800b784 <_fwalk_sglue+0x38>
 800b77c:	4629      	mov	r1, r5
 800b77e:	4638      	mov	r0, r7
 800b780:	47c0      	blx	r8
 800b782:	4306      	orrs	r6, r0
 800b784:	3568      	adds	r5, #104	@ 0x68
 800b786:	e7e9      	b.n	800b75c <_fwalk_sglue+0x10>

0800b788 <iprintf>:
 800b788:	b40f      	push	{r0, r1, r2, r3}
 800b78a:	b507      	push	{r0, r1, r2, lr}
 800b78c:	4906      	ldr	r1, [pc, #24]	@ (800b7a8 <iprintf+0x20>)
 800b78e:	ab04      	add	r3, sp, #16
 800b790:	6808      	ldr	r0, [r1, #0]
 800b792:	f853 2b04 	ldr.w	r2, [r3], #4
 800b796:	6881      	ldr	r1, [r0, #8]
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	f000 fe61 	bl	800c460 <_vfiprintf_r>
 800b79e:	b003      	add	sp, #12
 800b7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7a4:	b004      	add	sp, #16
 800b7a6:	4770      	bx	lr
 800b7a8:	20000154 	.word	0x20000154

0800b7ac <_puts_r>:
 800b7ac:	6a03      	ldr	r3, [r0, #32]
 800b7ae:	b570      	push	{r4, r5, r6, lr}
 800b7b0:	6884      	ldr	r4, [r0, #8]
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	460e      	mov	r6, r1
 800b7b6:	b90b      	cbnz	r3, 800b7bc <_puts_r+0x10>
 800b7b8:	f7ff ffb0 	bl	800b71c <__sinit>
 800b7bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7be:	07db      	lsls	r3, r3, #31
 800b7c0:	d405      	bmi.n	800b7ce <_puts_r+0x22>
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	0598      	lsls	r0, r3, #22
 800b7c6:	d402      	bmi.n	800b7ce <_puts_r+0x22>
 800b7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ca:	f000 f9ee 	bl	800bbaa <__retarget_lock_acquire_recursive>
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	0719      	lsls	r1, r3, #28
 800b7d2:	d502      	bpl.n	800b7da <_puts_r+0x2e>
 800b7d4:	6923      	ldr	r3, [r4, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d135      	bne.n	800b846 <_puts_r+0x9a>
 800b7da:	4621      	mov	r1, r4
 800b7dc:	4628      	mov	r0, r5
 800b7de:	f000 f915 	bl	800ba0c <__swsetup_r>
 800b7e2:	b380      	cbz	r0, 800b846 <_puts_r+0x9a>
 800b7e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b7e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7ea:	07da      	lsls	r2, r3, #31
 800b7ec:	d405      	bmi.n	800b7fa <_puts_r+0x4e>
 800b7ee:	89a3      	ldrh	r3, [r4, #12]
 800b7f0:	059b      	lsls	r3, r3, #22
 800b7f2:	d402      	bmi.n	800b7fa <_puts_r+0x4e>
 800b7f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7f6:	f000 f9d9 	bl	800bbac <__retarget_lock_release_recursive>
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	bd70      	pop	{r4, r5, r6, pc}
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	da04      	bge.n	800b80c <_puts_r+0x60>
 800b802:	69a2      	ldr	r2, [r4, #24]
 800b804:	429a      	cmp	r2, r3
 800b806:	dc17      	bgt.n	800b838 <_puts_r+0x8c>
 800b808:	290a      	cmp	r1, #10
 800b80a:	d015      	beq.n	800b838 <_puts_r+0x8c>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	6022      	str	r2, [r4, #0]
 800b812:	7019      	strb	r1, [r3, #0]
 800b814:	68a3      	ldr	r3, [r4, #8]
 800b816:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b81a:	3b01      	subs	r3, #1
 800b81c:	60a3      	str	r3, [r4, #8]
 800b81e:	2900      	cmp	r1, #0
 800b820:	d1ed      	bne.n	800b7fe <_puts_r+0x52>
 800b822:	2b00      	cmp	r3, #0
 800b824:	da11      	bge.n	800b84a <_puts_r+0x9e>
 800b826:	4622      	mov	r2, r4
 800b828:	210a      	movs	r1, #10
 800b82a:	4628      	mov	r0, r5
 800b82c:	f000 f8af 	bl	800b98e <__swbuf_r>
 800b830:	3001      	adds	r0, #1
 800b832:	d0d7      	beq.n	800b7e4 <_puts_r+0x38>
 800b834:	250a      	movs	r5, #10
 800b836:	e7d7      	b.n	800b7e8 <_puts_r+0x3c>
 800b838:	4622      	mov	r2, r4
 800b83a:	4628      	mov	r0, r5
 800b83c:	f000 f8a7 	bl	800b98e <__swbuf_r>
 800b840:	3001      	adds	r0, #1
 800b842:	d1e7      	bne.n	800b814 <_puts_r+0x68>
 800b844:	e7ce      	b.n	800b7e4 <_puts_r+0x38>
 800b846:	3e01      	subs	r6, #1
 800b848:	e7e4      	b.n	800b814 <_puts_r+0x68>
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	1c5a      	adds	r2, r3, #1
 800b84e:	6022      	str	r2, [r4, #0]
 800b850:	220a      	movs	r2, #10
 800b852:	701a      	strb	r2, [r3, #0]
 800b854:	e7ee      	b.n	800b834 <_puts_r+0x88>
	...

0800b858 <puts>:
 800b858:	4b02      	ldr	r3, [pc, #8]	@ (800b864 <puts+0xc>)
 800b85a:	4601      	mov	r1, r0
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	f7ff bfa5 	b.w	800b7ac <_puts_r>
 800b862:	bf00      	nop
 800b864:	20000154 	.word	0x20000154

0800b868 <siprintf>:
 800b868:	b40e      	push	{r1, r2, r3}
 800b86a:	b510      	push	{r4, lr}
 800b86c:	b09d      	sub	sp, #116	@ 0x74
 800b86e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b870:	9002      	str	r0, [sp, #8]
 800b872:	9006      	str	r0, [sp, #24]
 800b874:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b878:	480a      	ldr	r0, [pc, #40]	@ (800b8a4 <siprintf+0x3c>)
 800b87a:	9107      	str	r1, [sp, #28]
 800b87c:	9104      	str	r1, [sp, #16]
 800b87e:	490a      	ldr	r1, [pc, #40]	@ (800b8a8 <siprintf+0x40>)
 800b880:	f853 2b04 	ldr.w	r2, [r3], #4
 800b884:	9105      	str	r1, [sp, #20]
 800b886:	2400      	movs	r4, #0
 800b888:	a902      	add	r1, sp, #8
 800b88a:	6800      	ldr	r0, [r0, #0]
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b890:	f000 faf0 	bl	800be74 <_svfiprintf_r>
 800b894:	9b02      	ldr	r3, [sp, #8]
 800b896:	701c      	strb	r4, [r3, #0]
 800b898:	b01d      	add	sp, #116	@ 0x74
 800b89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b89e:	b003      	add	sp, #12
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	20000154 	.word	0x20000154
 800b8a8:	ffff0208 	.word	0xffff0208

0800b8ac <siscanf>:
 800b8ac:	b40e      	push	{r1, r2, r3}
 800b8ae:	b570      	push	{r4, r5, r6, lr}
 800b8b0:	b09d      	sub	sp, #116	@ 0x74
 800b8b2:	ac21      	add	r4, sp, #132	@ 0x84
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b8ba:	f854 6b04 	ldr.w	r6, [r4], #4
 800b8be:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b8c2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800b8c4:	9002      	str	r0, [sp, #8]
 800b8c6:	9006      	str	r0, [sp, #24]
 800b8c8:	f7f4 fcaa 	bl	8000220 <strlen>
 800b8cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b8fc <siscanf+0x50>)
 800b8ce:	9003      	str	r0, [sp, #12]
 800b8d0:	9007      	str	r0, [sp, #28]
 800b8d2:	480b      	ldr	r0, [pc, #44]	@ (800b900 <siscanf+0x54>)
 800b8d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8da:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b8de:	4632      	mov	r2, r6
 800b8e0:	4623      	mov	r3, r4
 800b8e2:	a902      	add	r1, sp, #8
 800b8e4:	6800      	ldr	r0, [r0, #0]
 800b8e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b8e8:	9514      	str	r5, [sp, #80]	@ 0x50
 800b8ea:	9401      	str	r4, [sp, #4]
 800b8ec:	f000 fc18 	bl	800c120 <__ssvfiscanf_r>
 800b8f0:	b01d      	add	sp, #116	@ 0x74
 800b8f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8f6:	b003      	add	sp, #12
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	0800b927 	.word	0x0800b927
 800b900:	20000154 	.word	0x20000154

0800b904 <__sread>:
 800b904:	b510      	push	{r4, lr}
 800b906:	460c      	mov	r4, r1
 800b908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b90c:	f000 f8fe 	bl	800bb0c <_read_r>
 800b910:	2800      	cmp	r0, #0
 800b912:	bfab      	itete	ge
 800b914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b916:	89a3      	ldrhlt	r3, [r4, #12]
 800b918:	181b      	addge	r3, r3, r0
 800b91a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b91e:	bfac      	ite	ge
 800b920:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b922:	81a3      	strhlt	r3, [r4, #12]
 800b924:	bd10      	pop	{r4, pc}

0800b926 <__seofread>:
 800b926:	2000      	movs	r0, #0
 800b928:	4770      	bx	lr

0800b92a <__swrite>:
 800b92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b92e:	461f      	mov	r7, r3
 800b930:	898b      	ldrh	r3, [r1, #12]
 800b932:	05db      	lsls	r3, r3, #23
 800b934:	4605      	mov	r5, r0
 800b936:	460c      	mov	r4, r1
 800b938:	4616      	mov	r6, r2
 800b93a:	d505      	bpl.n	800b948 <__swrite+0x1e>
 800b93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b940:	2302      	movs	r3, #2
 800b942:	2200      	movs	r2, #0
 800b944:	f000 f8d0 	bl	800bae8 <_lseek_r>
 800b948:	89a3      	ldrh	r3, [r4, #12]
 800b94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b94e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b952:	81a3      	strh	r3, [r4, #12]
 800b954:	4632      	mov	r2, r6
 800b956:	463b      	mov	r3, r7
 800b958:	4628      	mov	r0, r5
 800b95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b95e:	f000 b8e7 	b.w	800bb30 <_write_r>

0800b962 <__sseek>:
 800b962:	b510      	push	{r4, lr}
 800b964:	460c      	mov	r4, r1
 800b966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b96a:	f000 f8bd 	bl	800bae8 <_lseek_r>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	bf15      	itete	ne
 800b974:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b97a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b97e:	81a3      	strheq	r3, [r4, #12]
 800b980:	bf18      	it	ne
 800b982:	81a3      	strhne	r3, [r4, #12]
 800b984:	bd10      	pop	{r4, pc}

0800b986 <__sclose>:
 800b986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b98a:	f000 b89d 	b.w	800bac8 <_close_r>

0800b98e <__swbuf_r>:
 800b98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b990:	460e      	mov	r6, r1
 800b992:	4614      	mov	r4, r2
 800b994:	4605      	mov	r5, r0
 800b996:	b118      	cbz	r0, 800b9a0 <__swbuf_r+0x12>
 800b998:	6a03      	ldr	r3, [r0, #32]
 800b99a:	b90b      	cbnz	r3, 800b9a0 <__swbuf_r+0x12>
 800b99c:	f7ff febe 	bl	800b71c <__sinit>
 800b9a0:	69a3      	ldr	r3, [r4, #24]
 800b9a2:	60a3      	str	r3, [r4, #8]
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	071a      	lsls	r2, r3, #28
 800b9a8:	d501      	bpl.n	800b9ae <__swbuf_r+0x20>
 800b9aa:	6923      	ldr	r3, [r4, #16]
 800b9ac:	b943      	cbnz	r3, 800b9c0 <__swbuf_r+0x32>
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f000 f82b 	bl	800ba0c <__swsetup_r>
 800b9b6:	b118      	cbz	r0, 800b9c0 <__swbuf_r+0x32>
 800b9b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b9bc:	4638      	mov	r0, r7
 800b9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	6922      	ldr	r2, [r4, #16]
 800b9c4:	1a98      	subs	r0, r3, r2
 800b9c6:	6963      	ldr	r3, [r4, #20]
 800b9c8:	b2f6      	uxtb	r6, r6
 800b9ca:	4283      	cmp	r3, r0
 800b9cc:	4637      	mov	r7, r6
 800b9ce:	dc05      	bgt.n	800b9dc <__swbuf_r+0x4e>
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f001 f9ba 	bl	800cd4c <_fflush_r>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d1ed      	bne.n	800b9b8 <__swbuf_r+0x2a>
 800b9dc:	68a3      	ldr	r3, [r4, #8]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	60a3      	str	r3, [r4, #8]
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	6022      	str	r2, [r4, #0]
 800b9e8:	701e      	strb	r6, [r3, #0]
 800b9ea:	6962      	ldr	r2, [r4, #20]
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d004      	beq.n	800b9fc <__swbuf_r+0x6e>
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	07db      	lsls	r3, r3, #31
 800b9f6:	d5e1      	bpl.n	800b9bc <__swbuf_r+0x2e>
 800b9f8:	2e0a      	cmp	r6, #10
 800b9fa:	d1df      	bne.n	800b9bc <__swbuf_r+0x2e>
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f001 f9a4 	bl	800cd4c <_fflush_r>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d0d9      	beq.n	800b9bc <__swbuf_r+0x2e>
 800ba08:	e7d6      	b.n	800b9b8 <__swbuf_r+0x2a>
	...

0800ba0c <__swsetup_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4b29      	ldr	r3, [pc, #164]	@ (800bab4 <__swsetup_r+0xa8>)
 800ba10:	4605      	mov	r5, r0
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	460c      	mov	r4, r1
 800ba16:	b118      	cbz	r0, 800ba20 <__swsetup_r+0x14>
 800ba18:	6a03      	ldr	r3, [r0, #32]
 800ba1a:	b90b      	cbnz	r3, 800ba20 <__swsetup_r+0x14>
 800ba1c:	f7ff fe7e 	bl	800b71c <__sinit>
 800ba20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba24:	0719      	lsls	r1, r3, #28
 800ba26:	d422      	bmi.n	800ba6e <__swsetup_r+0x62>
 800ba28:	06da      	lsls	r2, r3, #27
 800ba2a:	d407      	bmi.n	800ba3c <__swsetup_r+0x30>
 800ba2c:	2209      	movs	r2, #9
 800ba2e:	602a      	str	r2, [r5, #0]
 800ba30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba34:	81a3      	strh	r3, [r4, #12]
 800ba36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba3a:	e033      	b.n	800baa4 <__swsetup_r+0x98>
 800ba3c:	0758      	lsls	r0, r3, #29
 800ba3e:	d512      	bpl.n	800ba66 <__swsetup_r+0x5a>
 800ba40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba42:	b141      	cbz	r1, 800ba56 <__swsetup_r+0x4a>
 800ba44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba48:	4299      	cmp	r1, r3
 800ba4a:	d002      	beq.n	800ba52 <__swsetup_r+0x46>
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f000 f8bd 	bl	800bbcc <_free_r>
 800ba52:	2300      	movs	r3, #0
 800ba54:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba5c:	81a3      	strh	r3, [r4, #12]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6063      	str	r3, [r4, #4]
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	f043 0308 	orr.w	r3, r3, #8
 800ba6c:	81a3      	strh	r3, [r4, #12]
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	b94b      	cbnz	r3, 800ba86 <__swsetup_r+0x7a>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba7c:	d003      	beq.n	800ba86 <__swsetup_r+0x7a>
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4628      	mov	r0, r5
 800ba82:	f001 f9b1 	bl	800cde8 <__smakebuf_r>
 800ba86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba8a:	f013 0201 	ands.w	r2, r3, #1
 800ba8e:	d00a      	beq.n	800baa6 <__swsetup_r+0x9a>
 800ba90:	2200      	movs	r2, #0
 800ba92:	60a2      	str	r2, [r4, #8]
 800ba94:	6962      	ldr	r2, [r4, #20]
 800ba96:	4252      	negs	r2, r2
 800ba98:	61a2      	str	r2, [r4, #24]
 800ba9a:	6922      	ldr	r2, [r4, #16]
 800ba9c:	b942      	cbnz	r2, 800bab0 <__swsetup_r+0xa4>
 800ba9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800baa2:	d1c5      	bne.n	800ba30 <__swsetup_r+0x24>
 800baa4:	bd38      	pop	{r3, r4, r5, pc}
 800baa6:	0799      	lsls	r1, r3, #30
 800baa8:	bf58      	it	pl
 800baaa:	6962      	ldrpl	r2, [r4, #20]
 800baac:	60a2      	str	r2, [r4, #8]
 800baae:	e7f4      	b.n	800ba9a <__swsetup_r+0x8e>
 800bab0:	2000      	movs	r0, #0
 800bab2:	e7f7      	b.n	800baa4 <__swsetup_r+0x98>
 800bab4:	20000154 	.word	0x20000154

0800bab8 <memset>:
 800bab8:	4402      	add	r2, r0
 800baba:	4603      	mov	r3, r0
 800babc:	4293      	cmp	r3, r2
 800babe:	d100      	bne.n	800bac2 <memset+0xa>
 800bac0:	4770      	bx	lr
 800bac2:	f803 1b01 	strb.w	r1, [r3], #1
 800bac6:	e7f9      	b.n	800babc <memset+0x4>

0800bac8 <_close_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4d06      	ldr	r5, [pc, #24]	@ (800bae4 <_close_r+0x1c>)
 800bacc:	2300      	movs	r3, #0
 800bace:	4604      	mov	r4, r0
 800bad0:	4608      	mov	r0, r1
 800bad2:	602b      	str	r3, [r5, #0]
 800bad4:	f7f7 fec1 	bl	800385a <_close>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d102      	bne.n	800bae2 <_close_r+0x1a>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	b103      	cbz	r3, 800bae2 <_close_r+0x1a>
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	20000b84 	.word	0x20000b84

0800bae8 <_lseek_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	@ (800bb08 <_lseek_r+0x20>)
 800baec:	4604      	mov	r4, r0
 800baee:	4608      	mov	r0, r1
 800baf0:	4611      	mov	r1, r2
 800baf2:	2200      	movs	r2, #0
 800baf4:	602a      	str	r2, [r5, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	f7f7 fed6 	bl	80038a8 <_lseek>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d102      	bne.n	800bb06 <_lseek_r+0x1e>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	b103      	cbz	r3, 800bb06 <_lseek_r+0x1e>
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	20000b84 	.word	0x20000b84

0800bb0c <_read_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4d07      	ldr	r5, [pc, #28]	@ (800bb2c <_read_r+0x20>)
 800bb10:	4604      	mov	r4, r0
 800bb12:	4608      	mov	r0, r1
 800bb14:	4611      	mov	r1, r2
 800bb16:	2200      	movs	r2, #0
 800bb18:	602a      	str	r2, [r5, #0]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f7f7 fe80 	bl	8003820 <_read>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_read_r+0x1e>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_read_r+0x1e>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	20000b84 	.word	0x20000b84

0800bb30 <_write_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4d07      	ldr	r5, [pc, #28]	@ (800bb50 <_write_r+0x20>)
 800bb34:	4604      	mov	r4, r0
 800bb36:	4608      	mov	r0, r1
 800bb38:	4611      	mov	r1, r2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	602a      	str	r2, [r5, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	f7f5 fdea 	bl	8001718 <_write>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_write_r+0x1e>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_write_r+0x1e>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	20000b84 	.word	0x20000b84

0800bb54 <__errno>:
 800bb54:	4b01      	ldr	r3, [pc, #4]	@ (800bb5c <__errno+0x8>)
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	20000154 	.word	0x20000154

0800bb60 <__libc_init_array>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	4d0d      	ldr	r5, [pc, #52]	@ (800bb98 <__libc_init_array+0x38>)
 800bb64:	4c0d      	ldr	r4, [pc, #52]	@ (800bb9c <__libc_init_array+0x3c>)
 800bb66:	1b64      	subs	r4, r4, r5
 800bb68:	10a4      	asrs	r4, r4, #2
 800bb6a:	2600      	movs	r6, #0
 800bb6c:	42a6      	cmp	r6, r4
 800bb6e:	d109      	bne.n	800bb84 <__libc_init_array+0x24>
 800bb70:	4d0b      	ldr	r5, [pc, #44]	@ (800bba0 <__libc_init_array+0x40>)
 800bb72:	4c0c      	ldr	r4, [pc, #48]	@ (800bba4 <__libc_init_array+0x44>)
 800bb74:	f001 fb56 	bl	800d224 <_init>
 800bb78:	1b64      	subs	r4, r4, r5
 800bb7a:	10a4      	asrs	r4, r4, #2
 800bb7c:	2600      	movs	r6, #0
 800bb7e:	42a6      	cmp	r6, r4
 800bb80:	d105      	bne.n	800bb8e <__libc_init_array+0x2e>
 800bb82:	bd70      	pop	{r4, r5, r6, pc}
 800bb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb88:	4798      	blx	r3
 800bb8a:	3601      	adds	r6, #1
 800bb8c:	e7ee      	b.n	800bb6c <__libc_init_array+0xc>
 800bb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb92:	4798      	blx	r3
 800bb94:	3601      	adds	r6, #1
 800bb96:	e7f2      	b.n	800bb7e <__libc_init_array+0x1e>
 800bb98:	0800d67c 	.word	0x0800d67c
 800bb9c:	0800d67c 	.word	0x0800d67c
 800bba0:	0800d67c 	.word	0x0800d67c
 800bba4:	0800d680 	.word	0x0800d680

0800bba8 <__retarget_lock_init_recursive>:
 800bba8:	4770      	bx	lr

0800bbaa <__retarget_lock_acquire_recursive>:
 800bbaa:	4770      	bx	lr

0800bbac <__retarget_lock_release_recursive>:
 800bbac:	4770      	bx	lr

0800bbae <memcpy>:
 800bbae:	440a      	add	r2, r1
 800bbb0:	4291      	cmp	r1, r2
 800bbb2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bbb6:	d100      	bne.n	800bbba <memcpy+0xc>
 800bbb8:	4770      	bx	lr
 800bbba:	b510      	push	{r4, lr}
 800bbbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbc4:	4291      	cmp	r1, r2
 800bbc6:	d1f9      	bne.n	800bbbc <memcpy+0xe>
 800bbc8:	bd10      	pop	{r4, pc}
	...

0800bbcc <_free_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4605      	mov	r5, r0
 800bbd0:	2900      	cmp	r1, #0
 800bbd2:	d041      	beq.n	800bc58 <_free_r+0x8c>
 800bbd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbd8:	1f0c      	subs	r4, r1, #4
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	bfb8      	it	lt
 800bbde:	18e4      	addlt	r4, r4, r3
 800bbe0:	f000 f8e0 	bl	800bda4 <__malloc_lock>
 800bbe4:	4a1d      	ldr	r2, [pc, #116]	@ (800bc5c <_free_r+0x90>)
 800bbe6:	6813      	ldr	r3, [r2, #0]
 800bbe8:	b933      	cbnz	r3, 800bbf8 <_free_r+0x2c>
 800bbea:	6063      	str	r3, [r4, #4]
 800bbec:	6014      	str	r4, [r2, #0]
 800bbee:	4628      	mov	r0, r5
 800bbf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbf4:	f000 b8dc 	b.w	800bdb0 <__malloc_unlock>
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	d908      	bls.n	800bc0e <_free_r+0x42>
 800bbfc:	6820      	ldr	r0, [r4, #0]
 800bbfe:	1821      	adds	r1, r4, r0
 800bc00:	428b      	cmp	r3, r1
 800bc02:	bf01      	itttt	eq
 800bc04:	6819      	ldreq	r1, [r3, #0]
 800bc06:	685b      	ldreq	r3, [r3, #4]
 800bc08:	1809      	addeq	r1, r1, r0
 800bc0a:	6021      	streq	r1, [r4, #0]
 800bc0c:	e7ed      	b.n	800bbea <_free_r+0x1e>
 800bc0e:	461a      	mov	r2, r3
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	b10b      	cbz	r3, 800bc18 <_free_r+0x4c>
 800bc14:	42a3      	cmp	r3, r4
 800bc16:	d9fa      	bls.n	800bc0e <_free_r+0x42>
 800bc18:	6811      	ldr	r1, [r2, #0]
 800bc1a:	1850      	adds	r0, r2, r1
 800bc1c:	42a0      	cmp	r0, r4
 800bc1e:	d10b      	bne.n	800bc38 <_free_r+0x6c>
 800bc20:	6820      	ldr	r0, [r4, #0]
 800bc22:	4401      	add	r1, r0
 800bc24:	1850      	adds	r0, r2, r1
 800bc26:	4283      	cmp	r3, r0
 800bc28:	6011      	str	r1, [r2, #0]
 800bc2a:	d1e0      	bne.n	800bbee <_free_r+0x22>
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	6053      	str	r3, [r2, #4]
 800bc32:	4408      	add	r0, r1
 800bc34:	6010      	str	r0, [r2, #0]
 800bc36:	e7da      	b.n	800bbee <_free_r+0x22>
 800bc38:	d902      	bls.n	800bc40 <_free_r+0x74>
 800bc3a:	230c      	movs	r3, #12
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	e7d6      	b.n	800bbee <_free_r+0x22>
 800bc40:	6820      	ldr	r0, [r4, #0]
 800bc42:	1821      	adds	r1, r4, r0
 800bc44:	428b      	cmp	r3, r1
 800bc46:	bf04      	itt	eq
 800bc48:	6819      	ldreq	r1, [r3, #0]
 800bc4a:	685b      	ldreq	r3, [r3, #4]
 800bc4c:	6063      	str	r3, [r4, #4]
 800bc4e:	bf04      	itt	eq
 800bc50:	1809      	addeq	r1, r1, r0
 800bc52:	6021      	streq	r1, [r4, #0]
 800bc54:	6054      	str	r4, [r2, #4]
 800bc56:	e7ca      	b.n	800bbee <_free_r+0x22>
 800bc58:	bd38      	pop	{r3, r4, r5, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20000b90 	.word	0x20000b90

0800bc60 <sbrk_aligned>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	4e0f      	ldr	r6, [pc, #60]	@ (800bca0 <sbrk_aligned+0x40>)
 800bc64:	460c      	mov	r4, r1
 800bc66:	6831      	ldr	r1, [r6, #0]
 800bc68:	4605      	mov	r5, r0
 800bc6a:	b911      	cbnz	r1, 800bc72 <sbrk_aligned+0x12>
 800bc6c:	f001 f9a8 	bl	800cfc0 <_sbrk_r>
 800bc70:	6030      	str	r0, [r6, #0]
 800bc72:	4621      	mov	r1, r4
 800bc74:	4628      	mov	r0, r5
 800bc76:	f001 f9a3 	bl	800cfc0 <_sbrk_r>
 800bc7a:	1c43      	adds	r3, r0, #1
 800bc7c:	d103      	bne.n	800bc86 <sbrk_aligned+0x26>
 800bc7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bc82:	4620      	mov	r0, r4
 800bc84:	bd70      	pop	{r4, r5, r6, pc}
 800bc86:	1cc4      	adds	r4, r0, #3
 800bc88:	f024 0403 	bic.w	r4, r4, #3
 800bc8c:	42a0      	cmp	r0, r4
 800bc8e:	d0f8      	beq.n	800bc82 <sbrk_aligned+0x22>
 800bc90:	1a21      	subs	r1, r4, r0
 800bc92:	4628      	mov	r0, r5
 800bc94:	f001 f994 	bl	800cfc0 <_sbrk_r>
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d1f2      	bne.n	800bc82 <sbrk_aligned+0x22>
 800bc9c:	e7ef      	b.n	800bc7e <sbrk_aligned+0x1e>
 800bc9e:	bf00      	nop
 800bca0:	20000b8c 	.word	0x20000b8c

0800bca4 <_malloc_r>:
 800bca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca8:	1ccd      	adds	r5, r1, #3
 800bcaa:	f025 0503 	bic.w	r5, r5, #3
 800bcae:	3508      	adds	r5, #8
 800bcb0:	2d0c      	cmp	r5, #12
 800bcb2:	bf38      	it	cc
 800bcb4:	250c      	movcc	r5, #12
 800bcb6:	2d00      	cmp	r5, #0
 800bcb8:	4606      	mov	r6, r0
 800bcba:	db01      	blt.n	800bcc0 <_malloc_r+0x1c>
 800bcbc:	42a9      	cmp	r1, r5
 800bcbe:	d904      	bls.n	800bcca <_malloc_r+0x26>
 800bcc0:	230c      	movs	r3, #12
 800bcc2:	6033      	str	r3, [r6, #0]
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bda0 <_malloc_r+0xfc>
 800bcce:	f000 f869 	bl	800bda4 <__malloc_lock>
 800bcd2:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd6:	461c      	mov	r4, r3
 800bcd8:	bb44      	cbnz	r4, 800bd2c <_malloc_r+0x88>
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7ff ffbf 	bl	800bc60 <sbrk_aligned>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	4604      	mov	r4, r0
 800bce6:	d158      	bne.n	800bd9a <_malloc_r+0xf6>
 800bce8:	f8d8 4000 	ldr.w	r4, [r8]
 800bcec:	4627      	mov	r7, r4
 800bcee:	2f00      	cmp	r7, #0
 800bcf0:	d143      	bne.n	800bd7a <_malloc_r+0xd6>
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	d04b      	beq.n	800bd8e <_malloc_r+0xea>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	eb04 0903 	add.w	r9, r4, r3
 800bd00:	f001 f95e 	bl	800cfc0 <_sbrk_r>
 800bd04:	4581      	cmp	r9, r0
 800bd06:	d142      	bne.n	800bd8e <_malloc_r+0xea>
 800bd08:	6821      	ldr	r1, [r4, #0]
 800bd0a:	1a6d      	subs	r5, r5, r1
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f7ff ffa6 	bl	800bc60 <sbrk_aligned>
 800bd14:	3001      	adds	r0, #1
 800bd16:	d03a      	beq.n	800bd8e <_malloc_r+0xea>
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	442b      	add	r3, r5
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	bb62      	cbnz	r2, 800bd80 <_malloc_r+0xdc>
 800bd26:	f8c8 7000 	str.w	r7, [r8]
 800bd2a:	e00f      	b.n	800bd4c <_malloc_r+0xa8>
 800bd2c:	6822      	ldr	r2, [r4, #0]
 800bd2e:	1b52      	subs	r2, r2, r5
 800bd30:	d420      	bmi.n	800bd74 <_malloc_r+0xd0>
 800bd32:	2a0b      	cmp	r2, #11
 800bd34:	d917      	bls.n	800bd66 <_malloc_r+0xc2>
 800bd36:	1961      	adds	r1, r4, r5
 800bd38:	42a3      	cmp	r3, r4
 800bd3a:	6025      	str	r5, [r4, #0]
 800bd3c:	bf18      	it	ne
 800bd3e:	6059      	strne	r1, [r3, #4]
 800bd40:	6863      	ldr	r3, [r4, #4]
 800bd42:	bf08      	it	eq
 800bd44:	f8c8 1000 	streq.w	r1, [r8]
 800bd48:	5162      	str	r2, [r4, r5]
 800bd4a:	604b      	str	r3, [r1, #4]
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f000 f82f 	bl	800bdb0 <__malloc_unlock>
 800bd52:	f104 000b 	add.w	r0, r4, #11
 800bd56:	1d23      	adds	r3, r4, #4
 800bd58:	f020 0007 	bic.w	r0, r0, #7
 800bd5c:	1ac2      	subs	r2, r0, r3
 800bd5e:	bf1c      	itt	ne
 800bd60:	1a1b      	subne	r3, r3, r0
 800bd62:	50a3      	strne	r3, [r4, r2]
 800bd64:	e7af      	b.n	800bcc6 <_malloc_r+0x22>
 800bd66:	6862      	ldr	r2, [r4, #4]
 800bd68:	42a3      	cmp	r3, r4
 800bd6a:	bf0c      	ite	eq
 800bd6c:	f8c8 2000 	streq.w	r2, [r8]
 800bd70:	605a      	strne	r2, [r3, #4]
 800bd72:	e7eb      	b.n	800bd4c <_malloc_r+0xa8>
 800bd74:	4623      	mov	r3, r4
 800bd76:	6864      	ldr	r4, [r4, #4]
 800bd78:	e7ae      	b.n	800bcd8 <_malloc_r+0x34>
 800bd7a:	463c      	mov	r4, r7
 800bd7c:	687f      	ldr	r7, [r7, #4]
 800bd7e:	e7b6      	b.n	800bcee <_malloc_r+0x4a>
 800bd80:	461a      	mov	r2, r3
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	d1fb      	bne.n	800bd80 <_malloc_r+0xdc>
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6053      	str	r3, [r2, #4]
 800bd8c:	e7de      	b.n	800bd4c <_malloc_r+0xa8>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	6033      	str	r3, [r6, #0]
 800bd92:	4630      	mov	r0, r6
 800bd94:	f000 f80c 	bl	800bdb0 <__malloc_unlock>
 800bd98:	e794      	b.n	800bcc4 <_malloc_r+0x20>
 800bd9a:	6005      	str	r5, [r0, #0]
 800bd9c:	e7d6      	b.n	800bd4c <_malloc_r+0xa8>
 800bd9e:	bf00      	nop
 800bda0:	20000b90 	.word	0x20000b90

0800bda4 <__malloc_lock>:
 800bda4:	4801      	ldr	r0, [pc, #4]	@ (800bdac <__malloc_lock+0x8>)
 800bda6:	f7ff bf00 	b.w	800bbaa <__retarget_lock_acquire_recursive>
 800bdaa:	bf00      	nop
 800bdac:	20000b88 	.word	0x20000b88

0800bdb0 <__malloc_unlock>:
 800bdb0:	4801      	ldr	r0, [pc, #4]	@ (800bdb8 <__malloc_unlock+0x8>)
 800bdb2:	f7ff befb 	b.w	800bbac <__retarget_lock_release_recursive>
 800bdb6:	bf00      	nop
 800bdb8:	20000b88 	.word	0x20000b88

0800bdbc <__ssputs_r>:
 800bdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc0:	688e      	ldr	r6, [r1, #8]
 800bdc2:	461f      	mov	r7, r3
 800bdc4:	42be      	cmp	r6, r7
 800bdc6:	680b      	ldr	r3, [r1, #0]
 800bdc8:	4682      	mov	sl, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	4690      	mov	r8, r2
 800bdce:	d82d      	bhi.n	800be2c <__ssputs_r+0x70>
 800bdd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bdd8:	d026      	beq.n	800be28 <__ssputs_r+0x6c>
 800bdda:	6965      	ldr	r5, [r4, #20]
 800bddc:	6909      	ldr	r1, [r1, #16]
 800bdde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bde2:	eba3 0901 	sub.w	r9, r3, r1
 800bde6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdea:	1c7b      	adds	r3, r7, #1
 800bdec:	444b      	add	r3, r9
 800bdee:	106d      	asrs	r5, r5, #1
 800bdf0:	429d      	cmp	r5, r3
 800bdf2:	bf38      	it	cc
 800bdf4:	461d      	movcc	r5, r3
 800bdf6:	0553      	lsls	r3, r2, #21
 800bdf8:	d527      	bpl.n	800be4a <__ssputs_r+0x8e>
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	f7ff ff52 	bl	800bca4 <_malloc_r>
 800be00:	4606      	mov	r6, r0
 800be02:	b360      	cbz	r0, 800be5e <__ssputs_r+0xa2>
 800be04:	6921      	ldr	r1, [r4, #16]
 800be06:	464a      	mov	r2, r9
 800be08:	f7ff fed1 	bl	800bbae <memcpy>
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be16:	81a3      	strh	r3, [r4, #12]
 800be18:	6126      	str	r6, [r4, #16]
 800be1a:	6165      	str	r5, [r4, #20]
 800be1c:	444e      	add	r6, r9
 800be1e:	eba5 0509 	sub.w	r5, r5, r9
 800be22:	6026      	str	r6, [r4, #0]
 800be24:	60a5      	str	r5, [r4, #8]
 800be26:	463e      	mov	r6, r7
 800be28:	42be      	cmp	r6, r7
 800be2a:	d900      	bls.n	800be2e <__ssputs_r+0x72>
 800be2c:	463e      	mov	r6, r7
 800be2e:	6820      	ldr	r0, [r4, #0]
 800be30:	4632      	mov	r2, r6
 800be32:	4641      	mov	r1, r8
 800be34:	f001 f887 	bl	800cf46 <memmove>
 800be38:	68a3      	ldr	r3, [r4, #8]
 800be3a:	1b9b      	subs	r3, r3, r6
 800be3c:	60a3      	str	r3, [r4, #8]
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	4433      	add	r3, r6
 800be42:	6023      	str	r3, [r4, #0]
 800be44:	2000      	movs	r0, #0
 800be46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be4a:	462a      	mov	r2, r5
 800be4c:	f001 f8c8 	bl	800cfe0 <_realloc_r>
 800be50:	4606      	mov	r6, r0
 800be52:	2800      	cmp	r0, #0
 800be54:	d1e0      	bne.n	800be18 <__ssputs_r+0x5c>
 800be56:	6921      	ldr	r1, [r4, #16]
 800be58:	4650      	mov	r0, sl
 800be5a:	f7ff feb7 	bl	800bbcc <_free_r>
 800be5e:	230c      	movs	r3, #12
 800be60:	f8ca 3000 	str.w	r3, [sl]
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be6a:	81a3      	strh	r3, [r4, #12]
 800be6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be70:	e7e9      	b.n	800be46 <__ssputs_r+0x8a>
	...

0800be74 <_svfiprintf_r>:
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	4698      	mov	r8, r3
 800be7a:	898b      	ldrh	r3, [r1, #12]
 800be7c:	061b      	lsls	r3, r3, #24
 800be7e:	b09d      	sub	sp, #116	@ 0x74
 800be80:	4607      	mov	r7, r0
 800be82:	460d      	mov	r5, r1
 800be84:	4614      	mov	r4, r2
 800be86:	d510      	bpl.n	800beaa <_svfiprintf_r+0x36>
 800be88:	690b      	ldr	r3, [r1, #16]
 800be8a:	b973      	cbnz	r3, 800beaa <_svfiprintf_r+0x36>
 800be8c:	2140      	movs	r1, #64	@ 0x40
 800be8e:	f7ff ff09 	bl	800bca4 <_malloc_r>
 800be92:	6028      	str	r0, [r5, #0]
 800be94:	6128      	str	r0, [r5, #16]
 800be96:	b930      	cbnz	r0, 800bea6 <_svfiprintf_r+0x32>
 800be98:	230c      	movs	r3, #12
 800be9a:	603b      	str	r3, [r7, #0]
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bea0:	b01d      	add	sp, #116	@ 0x74
 800bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea6:	2340      	movs	r3, #64	@ 0x40
 800bea8:	616b      	str	r3, [r5, #20]
 800beaa:	2300      	movs	r3, #0
 800beac:	9309      	str	r3, [sp, #36]	@ 0x24
 800beae:	2320      	movs	r3, #32
 800beb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800beb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb8:	2330      	movs	r3, #48	@ 0x30
 800beba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c058 <_svfiprintf_r+0x1e4>
 800bebe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bec2:	f04f 0901 	mov.w	r9, #1
 800bec6:	4623      	mov	r3, r4
 800bec8:	469a      	mov	sl, r3
 800beca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bece:	b10a      	cbz	r2, 800bed4 <_svfiprintf_r+0x60>
 800bed0:	2a25      	cmp	r2, #37	@ 0x25
 800bed2:	d1f9      	bne.n	800bec8 <_svfiprintf_r+0x54>
 800bed4:	ebba 0b04 	subs.w	fp, sl, r4
 800bed8:	d00b      	beq.n	800bef2 <_svfiprintf_r+0x7e>
 800beda:	465b      	mov	r3, fp
 800bedc:	4622      	mov	r2, r4
 800bede:	4629      	mov	r1, r5
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff ff6b 	bl	800bdbc <__ssputs_r>
 800bee6:	3001      	adds	r0, #1
 800bee8:	f000 80a7 	beq.w	800c03a <_svfiprintf_r+0x1c6>
 800beec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beee:	445a      	add	r2, fp
 800bef0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bef2:	f89a 3000 	ldrb.w	r3, [sl]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 809f 	beq.w	800c03a <_svfiprintf_r+0x1c6>
 800befc:	2300      	movs	r3, #0
 800befe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf06:	f10a 0a01 	add.w	sl, sl, #1
 800bf0a:	9304      	str	r3, [sp, #16]
 800bf0c:	9307      	str	r3, [sp, #28]
 800bf0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf12:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf14:	4654      	mov	r4, sl
 800bf16:	2205      	movs	r2, #5
 800bf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1c:	484e      	ldr	r0, [pc, #312]	@ (800c058 <_svfiprintf_r+0x1e4>)
 800bf1e:	f7f4 f987 	bl	8000230 <memchr>
 800bf22:	9a04      	ldr	r2, [sp, #16]
 800bf24:	b9d8      	cbnz	r0, 800bf5e <_svfiprintf_r+0xea>
 800bf26:	06d0      	lsls	r0, r2, #27
 800bf28:	bf44      	itt	mi
 800bf2a:	2320      	movmi	r3, #32
 800bf2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf30:	0711      	lsls	r1, r2, #28
 800bf32:	bf44      	itt	mi
 800bf34:	232b      	movmi	r3, #43	@ 0x2b
 800bf36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf40:	d015      	beq.n	800bf6e <_svfiprintf_r+0xfa>
 800bf42:	9a07      	ldr	r2, [sp, #28]
 800bf44:	4654      	mov	r4, sl
 800bf46:	2000      	movs	r0, #0
 800bf48:	f04f 0c0a 	mov.w	ip, #10
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf52:	3b30      	subs	r3, #48	@ 0x30
 800bf54:	2b09      	cmp	r3, #9
 800bf56:	d94b      	bls.n	800bff0 <_svfiprintf_r+0x17c>
 800bf58:	b1b0      	cbz	r0, 800bf88 <_svfiprintf_r+0x114>
 800bf5a:	9207      	str	r2, [sp, #28]
 800bf5c:	e014      	b.n	800bf88 <_svfiprintf_r+0x114>
 800bf5e:	eba0 0308 	sub.w	r3, r0, r8
 800bf62:	fa09 f303 	lsl.w	r3, r9, r3
 800bf66:	4313      	orrs	r3, r2
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	46a2      	mov	sl, r4
 800bf6c:	e7d2      	b.n	800bf14 <_svfiprintf_r+0xa0>
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	1d19      	adds	r1, r3, #4
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	9103      	str	r1, [sp, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfbb      	ittet	lt
 800bf7a:	425b      	neglt	r3, r3
 800bf7c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf80:	9307      	strge	r3, [sp, #28]
 800bf82:	9307      	strlt	r3, [sp, #28]
 800bf84:	bfb8      	it	lt
 800bf86:	9204      	strlt	r2, [sp, #16]
 800bf88:	7823      	ldrb	r3, [r4, #0]
 800bf8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf8c:	d10a      	bne.n	800bfa4 <_svfiprintf_r+0x130>
 800bf8e:	7863      	ldrb	r3, [r4, #1]
 800bf90:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf92:	d132      	bne.n	800bffa <_svfiprintf_r+0x186>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	1d1a      	adds	r2, r3, #4
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	9203      	str	r2, [sp, #12]
 800bf9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfa0:	3402      	adds	r4, #2
 800bfa2:	9305      	str	r3, [sp, #20]
 800bfa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c068 <_svfiprintf_r+0x1f4>
 800bfa8:	7821      	ldrb	r1, [r4, #0]
 800bfaa:	2203      	movs	r2, #3
 800bfac:	4650      	mov	r0, sl
 800bfae:	f7f4 f93f 	bl	8000230 <memchr>
 800bfb2:	b138      	cbz	r0, 800bfc4 <_svfiprintf_r+0x150>
 800bfb4:	9b04      	ldr	r3, [sp, #16]
 800bfb6:	eba0 000a 	sub.w	r0, r0, sl
 800bfba:	2240      	movs	r2, #64	@ 0x40
 800bfbc:	4082      	lsls	r2, r0
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	3401      	adds	r4, #1
 800bfc2:	9304      	str	r3, [sp, #16]
 800bfc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc8:	4824      	ldr	r0, [pc, #144]	@ (800c05c <_svfiprintf_r+0x1e8>)
 800bfca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfce:	2206      	movs	r2, #6
 800bfd0:	f7f4 f92e 	bl	8000230 <memchr>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d036      	beq.n	800c046 <_svfiprintf_r+0x1d2>
 800bfd8:	4b21      	ldr	r3, [pc, #132]	@ (800c060 <_svfiprintf_r+0x1ec>)
 800bfda:	bb1b      	cbnz	r3, 800c024 <_svfiprintf_r+0x1b0>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	3307      	adds	r3, #7
 800bfe0:	f023 0307 	bic.w	r3, r3, #7
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	9303      	str	r3, [sp, #12]
 800bfe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfea:	4433      	add	r3, r6
 800bfec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfee:	e76a      	b.n	800bec6 <_svfiprintf_r+0x52>
 800bff0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bff4:	460c      	mov	r4, r1
 800bff6:	2001      	movs	r0, #1
 800bff8:	e7a8      	b.n	800bf4c <_svfiprintf_r+0xd8>
 800bffa:	2300      	movs	r3, #0
 800bffc:	3401      	adds	r4, #1
 800bffe:	9305      	str	r3, [sp, #20]
 800c000:	4619      	mov	r1, r3
 800c002:	f04f 0c0a 	mov.w	ip, #10
 800c006:	4620      	mov	r0, r4
 800c008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c00c:	3a30      	subs	r2, #48	@ 0x30
 800c00e:	2a09      	cmp	r2, #9
 800c010:	d903      	bls.n	800c01a <_svfiprintf_r+0x1a6>
 800c012:	2b00      	cmp	r3, #0
 800c014:	d0c6      	beq.n	800bfa4 <_svfiprintf_r+0x130>
 800c016:	9105      	str	r1, [sp, #20]
 800c018:	e7c4      	b.n	800bfa4 <_svfiprintf_r+0x130>
 800c01a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c01e:	4604      	mov	r4, r0
 800c020:	2301      	movs	r3, #1
 800c022:	e7f0      	b.n	800c006 <_svfiprintf_r+0x192>
 800c024:	ab03      	add	r3, sp, #12
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	462a      	mov	r2, r5
 800c02a:	4b0e      	ldr	r3, [pc, #56]	@ (800c064 <_svfiprintf_r+0x1f0>)
 800c02c:	a904      	add	r1, sp, #16
 800c02e:	4638      	mov	r0, r7
 800c030:	f3af 8000 	nop.w
 800c034:	1c42      	adds	r2, r0, #1
 800c036:	4606      	mov	r6, r0
 800c038:	d1d6      	bne.n	800bfe8 <_svfiprintf_r+0x174>
 800c03a:	89ab      	ldrh	r3, [r5, #12]
 800c03c:	065b      	lsls	r3, r3, #25
 800c03e:	f53f af2d 	bmi.w	800be9c <_svfiprintf_r+0x28>
 800c042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c044:	e72c      	b.n	800bea0 <_svfiprintf_r+0x2c>
 800c046:	ab03      	add	r3, sp, #12
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	462a      	mov	r2, r5
 800c04c:	4b05      	ldr	r3, [pc, #20]	@ (800c064 <_svfiprintf_r+0x1f0>)
 800c04e:	a904      	add	r1, sp, #16
 800c050:	4638      	mov	r0, r7
 800c052:	f000 fb8b 	bl	800c76c <_printf_i>
 800c056:	e7ed      	b.n	800c034 <_svfiprintf_r+0x1c0>
 800c058:	0800d524 	.word	0x0800d524
 800c05c:	0800d52e 	.word	0x0800d52e
 800c060:	00000000 	.word	0x00000000
 800c064:	0800bdbd 	.word	0x0800bdbd
 800c068:	0800d52a 	.word	0x0800d52a

0800c06c <_sungetc_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	1c4b      	adds	r3, r1, #1
 800c070:	4614      	mov	r4, r2
 800c072:	d103      	bne.n	800c07c <_sungetc_r+0x10>
 800c074:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c078:	4628      	mov	r0, r5
 800c07a:	bd38      	pop	{r3, r4, r5, pc}
 800c07c:	8993      	ldrh	r3, [r2, #12]
 800c07e:	f023 0320 	bic.w	r3, r3, #32
 800c082:	8193      	strh	r3, [r2, #12]
 800c084:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c086:	6852      	ldr	r2, [r2, #4]
 800c088:	b2cd      	uxtb	r5, r1
 800c08a:	b18b      	cbz	r3, 800c0b0 <_sungetc_r+0x44>
 800c08c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c08e:	4293      	cmp	r3, r2
 800c090:	dd08      	ble.n	800c0a4 <_sungetc_r+0x38>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	1e5a      	subs	r2, r3, #1
 800c096:	6022      	str	r2, [r4, #0]
 800c098:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c09c:	6863      	ldr	r3, [r4, #4]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	6063      	str	r3, [r4, #4]
 800c0a2:	e7e9      	b.n	800c078 <_sungetc_r+0xc>
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	f000 ff14 	bl	800ced2 <__submore>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d0f1      	beq.n	800c092 <_sungetc_r+0x26>
 800c0ae:	e7e1      	b.n	800c074 <_sungetc_r+0x8>
 800c0b0:	6921      	ldr	r1, [r4, #16]
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	b151      	cbz	r1, 800c0cc <_sungetc_r+0x60>
 800c0b6:	4299      	cmp	r1, r3
 800c0b8:	d208      	bcs.n	800c0cc <_sungetc_r+0x60>
 800c0ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c0be:	42a9      	cmp	r1, r5
 800c0c0:	d104      	bne.n	800c0cc <_sungetc_r+0x60>
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	3201      	adds	r2, #1
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	6062      	str	r2, [r4, #4]
 800c0ca:	e7d5      	b.n	800c078 <_sungetc_r+0xc>
 800c0cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800c0d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c0da:	4623      	mov	r3, r4
 800c0dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e7dc      	b.n	800c0a0 <_sungetc_r+0x34>

0800c0e6 <__ssrefill_r>:
 800c0e6:	b510      	push	{r4, lr}
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c0ec:	b169      	cbz	r1, 800c10a <__ssrefill_r+0x24>
 800c0ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0f2:	4299      	cmp	r1, r3
 800c0f4:	d001      	beq.n	800c0fa <__ssrefill_r+0x14>
 800c0f6:	f7ff fd69 	bl	800bbcc <_free_r>
 800c0fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0fc:	6063      	str	r3, [r4, #4]
 800c0fe:	2000      	movs	r0, #0
 800c100:	6360      	str	r0, [r4, #52]	@ 0x34
 800c102:	b113      	cbz	r3, 800c10a <__ssrefill_r+0x24>
 800c104:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	bd10      	pop	{r4, pc}
 800c10a:	6923      	ldr	r3, [r4, #16]
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	2300      	movs	r3, #0
 800c110:	6063      	str	r3, [r4, #4]
 800c112:	89a3      	ldrh	r3, [r4, #12]
 800c114:	f043 0320 	orr.w	r3, r3, #32
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c11e:	e7f3      	b.n	800c108 <__ssrefill_r+0x22>

0800c120 <__ssvfiscanf_r>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	460c      	mov	r4, r1
 800c126:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c12a:	2100      	movs	r1, #0
 800c12c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c130:	49a6      	ldr	r1, [pc, #664]	@ (800c3cc <__ssvfiscanf_r+0x2ac>)
 800c132:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c134:	f10d 0804 	add.w	r8, sp, #4
 800c138:	49a5      	ldr	r1, [pc, #660]	@ (800c3d0 <__ssvfiscanf_r+0x2b0>)
 800c13a:	4fa6      	ldr	r7, [pc, #664]	@ (800c3d4 <__ssvfiscanf_r+0x2b4>)
 800c13c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c140:	4606      	mov	r6, r0
 800c142:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	f892 9000 	ldrb.w	r9, [r2]
 800c14a:	f1b9 0f00 	cmp.w	r9, #0
 800c14e:	f000 8158 	beq.w	800c402 <__ssvfiscanf_r+0x2e2>
 800c152:	f817 3009 	ldrb.w	r3, [r7, r9]
 800c156:	f013 0308 	ands.w	r3, r3, #8
 800c15a:	f102 0501 	add.w	r5, r2, #1
 800c15e:	d019      	beq.n	800c194 <__ssvfiscanf_r+0x74>
 800c160:	6863      	ldr	r3, [r4, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	dd0f      	ble.n	800c186 <__ssvfiscanf_r+0x66>
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	781a      	ldrb	r2, [r3, #0]
 800c16a:	5cba      	ldrb	r2, [r7, r2]
 800c16c:	0712      	lsls	r2, r2, #28
 800c16e:	d401      	bmi.n	800c174 <__ssvfiscanf_r+0x54>
 800c170:	462a      	mov	r2, r5
 800c172:	e7e8      	b.n	800c146 <__ssvfiscanf_r+0x26>
 800c174:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c176:	3201      	adds	r2, #1
 800c178:	9245      	str	r2, [sp, #276]	@ 0x114
 800c17a:	6862      	ldr	r2, [r4, #4]
 800c17c:	3301      	adds	r3, #1
 800c17e:	3a01      	subs	r2, #1
 800c180:	6062      	str	r2, [r4, #4]
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	e7ec      	b.n	800c160 <__ssvfiscanf_r+0x40>
 800c186:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c188:	4621      	mov	r1, r4
 800c18a:	4630      	mov	r0, r6
 800c18c:	4798      	blx	r3
 800c18e:	2800      	cmp	r0, #0
 800c190:	d0e9      	beq.n	800c166 <__ssvfiscanf_r+0x46>
 800c192:	e7ed      	b.n	800c170 <__ssvfiscanf_r+0x50>
 800c194:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800c198:	f040 8085 	bne.w	800c2a6 <__ssvfiscanf_r+0x186>
 800c19c:	9341      	str	r3, [sp, #260]	@ 0x104
 800c19e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c1a0:	7853      	ldrb	r3, [r2, #1]
 800c1a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1a4:	bf02      	ittt	eq
 800c1a6:	2310      	moveq	r3, #16
 800c1a8:	1c95      	addeq	r5, r2, #2
 800c1aa:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c1ac:	220a      	movs	r2, #10
 800c1ae:	46aa      	mov	sl, r5
 800c1b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c1b4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c1b8:	2b09      	cmp	r3, #9
 800c1ba:	d91e      	bls.n	800c1fa <__ssvfiscanf_r+0xda>
 800c1bc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800c3d8 <__ssvfiscanf_r+0x2b8>
 800c1c0:	2203      	movs	r2, #3
 800c1c2:	4658      	mov	r0, fp
 800c1c4:	f7f4 f834 	bl	8000230 <memchr>
 800c1c8:	b138      	cbz	r0, 800c1da <__ssvfiscanf_r+0xba>
 800c1ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c1cc:	eba0 000b 	sub.w	r0, r0, fp
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	4083      	lsls	r3, r0
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	9341      	str	r3, [sp, #260]	@ 0x104
 800c1d8:	4655      	mov	r5, sl
 800c1da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c1de:	2b78      	cmp	r3, #120	@ 0x78
 800c1e0:	d806      	bhi.n	800c1f0 <__ssvfiscanf_r+0xd0>
 800c1e2:	2b57      	cmp	r3, #87	@ 0x57
 800c1e4:	d810      	bhi.n	800c208 <__ssvfiscanf_r+0xe8>
 800c1e6:	2b25      	cmp	r3, #37	@ 0x25
 800c1e8:	d05d      	beq.n	800c2a6 <__ssvfiscanf_r+0x186>
 800c1ea:	d857      	bhi.n	800c29c <__ssvfiscanf_r+0x17c>
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d075      	beq.n	800c2dc <__ssvfiscanf_r+0x1bc>
 800c1f0:	2303      	movs	r3, #3
 800c1f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c1f4:	230a      	movs	r3, #10
 800c1f6:	9342      	str	r3, [sp, #264]	@ 0x108
 800c1f8:	e088      	b.n	800c30c <__ssvfiscanf_r+0x1ec>
 800c1fa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c1fc:	fb02 1103 	mla	r1, r2, r3, r1
 800c200:	3930      	subs	r1, #48	@ 0x30
 800c202:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c204:	4655      	mov	r5, sl
 800c206:	e7d2      	b.n	800c1ae <__ssvfiscanf_r+0x8e>
 800c208:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c20c:	2a20      	cmp	r2, #32
 800c20e:	d8ef      	bhi.n	800c1f0 <__ssvfiscanf_r+0xd0>
 800c210:	a101      	add	r1, pc, #4	@ (adr r1, 800c218 <__ssvfiscanf_r+0xf8>)
 800c212:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c216:	bf00      	nop
 800c218:	0800c2eb 	.word	0x0800c2eb
 800c21c:	0800c1f1 	.word	0x0800c1f1
 800c220:	0800c1f1 	.word	0x0800c1f1
 800c224:	0800c345 	.word	0x0800c345
 800c228:	0800c1f1 	.word	0x0800c1f1
 800c22c:	0800c1f1 	.word	0x0800c1f1
 800c230:	0800c1f1 	.word	0x0800c1f1
 800c234:	0800c1f1 	.word	0x0800c1f1
 800c238:	0800c1f1 	.word	0x0800c1f1
 800c23c:	0800c1f1 	.word	0x0800c1f1
 800c240:	0800c1f1 	.word	0x0800c1f1
 800c244:	0800c35b 	.word	0x0800c35b
 800c248:	0800c341 	.word	0x0800c341
 800c24c:	0800c2a3 	.word	0x0800c2a3
 800c250:	0800c2a3 	.word	0x0800c2a3
 800c254:	0800c2a3 	.word	0x0800c2a3
 800c258:	0800c1f1 	.word	0x0800c1f1
 800c25c:	0800c2fd 	.word	0x0800c2fd
 800c260:	0800c1f1 	.word	0x0800c1f1
 800c264:	0800c1f1 	.word	0x0800c1f1
 800c268:	0800c1f1 	.word	0x0800c1f1
 800c26c:	0800c1f1 	.word	0x0800c1f1
 800c270:	0800c36b 	.word	0x0800c36b
 800c274:	0800c305 	.word	0x0800c305
 800c278:	0800c2e3 	.word	0x0800c2e3
 800c27c:	0800c1f1 	.word	0x0800c1f1
 800c280:	0800c1f1 	.word	0x0800c1f1
 800c284:	0800c367 	.word	0x0800c367
 800c288:	0800c1f1 	.word	0x0800c1f1
 800c28c:	0800c341 	.word	0x0800c341
 800c290:	0800c1f1 	.word	0x0800c1f1
 800c294:	0800c1f1 	.word	0x0800c1f1
 800c298:	0800c2eb 	.word	0x0800c2eb
 800c29c:	3b45      	subs	r3, #69	@ 0x45
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d8a6      	bhi.n	800c1f0 <__ssvfiscanf_r+0xd0>
 800c2a2:	2305      	movs	r3, #5
 800c2a4:	e031      	b.n	800c30a <__ssvfiscanf_r+0x1ea>
 800c2a6:	6863      	ldr	r3, [r4, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dd0d      	ble.n	800c2c8 <__ssvfiscanf_r+0x1a8>
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	781a      	ldrb	r2, [r3, #0]
 800c2b0:	454a      	cmp	r2, r9
 800c2b2:	f040 80a6 	bne.w	800c402 <__ssvfiscanf_r+0x2e2>
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	6862      	ldr	r2, [r4, #4]
 800c2ba:	6023      	str	r3, [r4, #0]
 800c2bc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c2be:	3a01      	subs	r2, #1
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	6062      	str	r2, [r4, #4]
 800c2c4:	9345      	str	r3, [sp, #276]	@ 0x114
 800c2c6:	e753      	b.n	800c170 <__ssvfiscanf_r+0x50>
 800c2c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	4798      	blx	r3
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d0eb      	beq.n	800c2ac <__ssvfiscanf_r+0x18c>
 800c2d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	f040 808b 	bne.w	800c3f2 <__ssvfiscanf_r+0x2d2>
 800c2dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2e0:	e08b      	b.n	800c3fa <__ssvfiscanf_r+0x2da>
 800c2e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c2e4:	f042 0220 	orr.w	r2, r2, #32
 800c2e8:	9241      	str	r2, [sp, #260]	@ 0x104
 800c2ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c2ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2f0:	9241      	str	r2, [sp, #260]	@ 0x104
 800c2f2:	2210      	movs	r2, #16
 800c2f4:	2b6e      	cmp	r3, #110	@ 0x6e
 800c2f6:	9242      	str	r2, [sp, #264]	@ 0x108
 800c2f8:	d902      	bls.n	800c300 <__ssvfiscanf_r+0x1e0>
 800c2fa:	e005      	b.n	800c308 <__ssvfiscanf_r+0x1e8>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9342      	str	r3, [sp, #264]	@ 0x108
 800c300:	2303      	movs	r3, #3
 800c302:	e002      	b.n	800c30a <__ssvfiscanf_r+0x1ea>
 800c304:	2308      	movs	r3, #8
 800c306:	9342      	str	r3, [sp, #264]	@ 0x108
 800c308:	2304      	movs	r3, #4
 800c30a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c30c:	6863      	ldr	r3, [r4, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dd39      	ble.n	800c386 <__ssvfiscanf_r+0x266>
 800c312:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c314:	0659      	lsls	r1, r3, #25
 800c316:	d404      	bmi.n	800c322 <__ssvfiscanf_r+0x202>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	781a      	ldrb	r2, [r3, #0]
 800c31c:	5cba      	ldrb	r2, [r7, r2]
 800c31e:	0712      	lsls	r2, r2, #28
 800c320:	d438      	bmi.n	800c394 <__ssvfiscanf_r+0x274>
 800c322:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c324:	2b02      	cmp	r3, #2
 800c326:	dc47      	bgt.n	800c3b8 <__ssvfiscanf_r+0x298>
 800c328:	466b      	mov	r3, sp
 800c32a:	4622      	mov	r2, r4
 800c32c:	a941      	add	r1, sp, #260	@ 0x104
 800c32e:	4630      	mov	r0, r6
 800c330:	f000 fb3a 	bl	800c9a8 <_scanf_chars>
 800c334:	2801      	cmp	r0, #1
 800c336:	d064      	beq.n	800c402 <__ssvfiscanf_r+0x2e2>
 800c338:	2802      	cmp	r0, #2
 800c33a:	f47f af19 	bne.w	800c170 <__ssvfiscanf_r+0x50>
 800c33e:	e7c9      	b.n	800c2d4 <__ssvfiscanf_r+0x1b4>
 800c340:	220a      	movs	r2, #10
 800c342:	e7d7      	b.n	800c2f4 <__ssvfiscanf_r+0x1d4>
 800c344:	4629      	mov	r1, r5
 800c346:	4640      	mov	r0, r8
 800c348:	f000 fd8a 	bl	800ce60 <__sccl>
 800c34c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c352:	9341      	str	r3, [sp, #260]	@ 0x104
 800c354:	4605      	mov	r5, r0
 800c356:	2301      	movs	r3, #1
 800c358:	e7d7      	b.n	800c30a <__ssvfiscanf_r+0x1ea>
 800c35a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c35c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c360:	9341      	str	r3, [sp, #260]	@ 0x104
 800c362:	2300      	movs	r3, #0
 800c364:	e7d1      	b.n	800c30a <__ssvfiscanf_r+0x1ea>
 800c366:	2302      	movs	r3, #2
 800c368:	e7cf      	b.n	800c30a <__ssvfiscanf_r+0x1ea>
 800c36a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c36c:	06c3      	lsls	r3, r0, #27
 800c36e:	f53f aeff 	bmi.w	800c170 <__ssvfiscanf_r+0x50>
 800c372:	9b00      	ldr	r3, [sp, #0]
 800c374:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c376:	1d19      	adds	r1, r3, #4
 800c378:	9100      	str	r1, [sp, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	07c0      	lsls	r0, r0, #31
 800c37e:	bf4c      	ite	mi
 800c380:	801a      	strhmi	r2, [r3, #0]
 800c382:	601a      	strpl	r2, [r3, #0]
 800c384:	e6f4      	b.n	800c170 <__ssvfiscanf_r+0x50>
 800c386:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c388:	4621      	mov	r1, r4
 800c38a:	4630      	mov	r0, r6
 800c38c:	4798      	blx	r3
 800c38e:	2800      	cmp	r0, #0
 800c390:	d0bf      	beq.n	800c312 <__ssvfiscanf_r+0x1f2>
 800c392:	e79f      	b.n	800c2d4 <__ssvfiscanf_r+0x1b4>
 800c394:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c396:	3201      	adds	r2, #1
 800c398:	9245      	str	r2, [sp, #276]	@ 0x114
 800c39a:	6862      	ldr	r2, [r4, #4]
 800c39c:	3a01      	subs	r2, #1
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	6062      	str	r2, [r4, #4]
 800c3a2:	dd02      	ble.n	800c3aa <__ssvfiscanf_r+0x28a>
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	e7b6      	b.n	800c318 <__ssvfiscanf_r+0x1f8>
 800c3aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	4798      	blx	r3
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d0b0      	beq.n	800c318 <__ssvfiscanf_r+0x1f8>
 800c3b6:	e78d      	b.n	800c2d4 <__ssvfiscanf_r+0x1b4>
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	dc0f      	bgt.n	800c3dc <__ssvfiscanf_r+0x2bc>
 800c3bc:	466b      	mov	r3, sp
 800c3be:	4622      	mov	r2, r4
 800c3c0:	a941      	add	r1, sp, #260	@ 0x104
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f000 fb4a 	bl	800ca5c <_scanf_i>
 800c3c8:	e7b4      	b.n	800c334 <__ssvfiscanf_r+0x214>
 800c3ca:	bf00      	nop
 800c3cc:	0800c06d 	.word	0x0800c06d
 800c3d0:	0800c0e7 	.word	0x0800c0e7
 800c3d4:	0800d573 	.word	0x0800d573
 800c3d8:	0800d52a 	.word	0x0800d52a
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c408 <__ssvfiscanf_r+0x2e8>)
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f43f aec6 	beq.w	800c170 <__ssvfiscanf_r+0x50>
 800c3e4:	466b      	mov	r3, sp
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	a941      	add	r1, sp, #260	@ 0x104
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f3af 8000 	nop.w
 800c3f0:	e7a0      	b.n	800c334 <__ssvfiscanf_r+0x214>
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	065b      	lsls	r3, r3, #25
 800c3f6:	f53f af71 	bmi.w	800c2dc <__ssvfiscanf_r+0x1bc>
 800c3fa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c402:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c404:	e7f9      	b.n	800c3fa <__ssvfiscanf_r+0x2da>
 800c406:	bf00      	nop
 800c408:	00000000 	.word	0x00000000

0800c40c <__sfputc_r>:
 800c40c:	6893      	ldr	r3, [r2, #8]
 800c40e:	3b01      	subs	r3, #1
 800c410:	2b00      	cmp	r3, #0
 800c412:	b410      	push	{r4}
 800c414:	6093      	str	r3, [r2, #8]
 800c416:	da08      	bge.n	800c42a <__sfputc_r+0x1e>
 800c418:	6994      	ldr	r4, [r2, #24]
 800c41a:	42a3      	cmp	r3, r4
 800c41c:	db01      	blt.n	800c422 <__sfputc_r+0x16>
 800c41e:	290a      	cmp	r1, #10
 800c420:	d103      	bne.n	800c42a <__sfputc_r+0x1e>
 800c422:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c426:	f7ff bab2 	b.w	800b98e <__swbuf_r>
 800c42a:	6813      	ldr	r3, [r2, #0]
 800c42c:	1c58      	adds	r0, r3, #1
 800c42e:	6010      	str	r0, [r2, #0]
 800c430:	7019      	strb	r1, [r3, #0]
 800c432:	4608      	mov	r0, r1
 800c434:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <__sfputs_r>:
 800c43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43c:	4606      	mov	r6, r0
 800c43e:	460f      	mov	r7, r1
 800c440:	4614      	mov	r4, r2
 800c442:	18d5      	adds	r5, r2, r3
 800c444:	42ac      	cmp	r4, r5
 800c446:	d101      	bne.n	800c44c <__sfputs_r+0x12>
 800c448:	2000      	movs	r0, #0
 800c44a:	e007      	b.n	800c45c <__sfputs_r+0x22>
 800c44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c450:	463a      	mov	r2, r7
 800c452:	4630      	mov	r0, r6
 800c454:	f7ff ffda 	bl	800c40c <__sfputc_r>
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	d1f3      	bne.n	800c444 <__sfputs_r+0xa>
 800c45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c460 <_vfiprintf_r>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	460d      	mov	r5, r1
 800c466:	b09d      	sub	sp, #116	@ 0x74
 800c468:	4614      	mov	r4, r2
 800c46a:	4698      	mov	r8, r3
 800c46c:	4606      	mov	r6, r0
 800c46e:	b118      	cbz	r0, 800c478 <_vfiprintf_r+0x18>
 800c470:	6a03      	ldr	r3, [r0, #32]
 800c472:	b90b      	cbnz	r3, 800c478 <_vfiprintf_r+0x18>
 800c474:	f7ff f952 	bl	800b71c <__sinit>
 800c478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c47a:	07d9      	lsls	r1, r3, #31
 800c47c:	d405      	bmi.n	800c48a <_vfiprintf_r+0x2a>
 800c47e:	89ab      	ldrh	r3, [r5, #12]
 800c480:	059a      	lsls	r2, r3, #22
 800c482:	d402      	bmi.n	800c48a <_vfiprintf_r+0x2a>
 800c484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c486:	f7ff fb90 	bl	800bbaa <__retarget_lock_acquire_recursive>
 800c48a:	89ab      	ldrh	r3, [r5, #12]
 800c48c:	071b      	lsls	r3, r3, #28
 800c48e:	d501      	bpl.n	800c494 <_vfiprintf_r+0x34>
 800c490:	692b      	ldr	r3, [r5, #16]
 800c492:	b99b      	cbnz	r3, 800c4bc <_vfiprintf_r+0x5c>
 800c494:	4629      	mov	r1, r5
 800c496:	4630      	mov	r0, r6
 800c498:	f7ff fab8 	bl	800ba0c <__swsetup_r>
 800c49c:	b170      	cbz	r0, 800c4bc <_vfiprintf_r+0x5c>
 800c49e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4a0:	07dc      	lsls	r4, r3, #31
 800c4a2:	d504      	bpl.n	800c4ae <_vfiprintf_r+0x4e>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4a8:	b01d      	add	sp, #116	@ 0x74
 800c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ae:	89ab      	ldrh	r3, [r5, #12]
 800c4b0:	0598      	lsls	r0, r3, #22
 800c4b2:	d4f7      	bmi.n	800c4a4 <_vfiprintf_r+0x44>
 800c4b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4b6:	f7ff fb79 	bl	800bbac <__retarget_lock_release_recursive>
 800c4ba:	e7f3      	b.n	800c4a4 <_vfiprintf_r+0x44>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ca:	2330      	movs	r3, #48	@ 0x30
 800c4cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c67c <_vfiprintf_r+0x21c>
 800c4d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4d4:	f04f 0901 	mov.w	r9, #1
 800c4d8:	4623      	mov	r3, r4
 800c4da:	469a      	mov	sl, r3
 800c4dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4e0:	b10a      	cbz	r2, 800c4e6 <_vfiprintf_r+0x86>
 800c4e2:	2a25      	cmp	r2, #37	@ 0x25
 800c4e4:	d1f9      	bne.n	800c4da <_vfiprintf_r+0x7a>
 800c4e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ea:	d00b      	beq.n	800c504 <_vfiprintf_r+0xa4>
 800c4ec:	465b      	mov	r3, fp
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f7ff ffa1 	bl	800c43a <__sfputs_r>
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	f000 80a7 	beq.w	800c64c <_vfiprintf_r+0x1ec>
 800c4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c500:	445a      	add	r2, fp
 800c502:	9209      	str	r2, [sp, #36]	@ 0x24
 800c504:	f89a 3000 	ldrb.w	r3, [sl]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 809f 	beq.w	800c64c <_vfiprintf_r+0x1ec>
 800c50e:	2300      	movs	r3, #0
 800c510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c518:	f10a 0a01 	add.w	sl, sl, #1
 800c51c:	9304      	str	r3, [sp, #16]
 800c51e:	9307      	str	r3, [sp, #28]
 800c520:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c524:	931a      	str	r3, [sp, #104]	@ 0x68
 800c526:	4654      	mov	r4, sl
 800c528:	2205      	movs	r2, #5
 800c52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c52e:	4853      	ldr	r0, [pc, #332]	@ (800c67c <_vfiprintf_r+0x21c>)
 800c530:	f7f3 fe7e 	bl	8000230 <memchr>
 800c534:	9a04      	ldr	r2, [sp, #16]
 800c536:	b9d8      	cbnz	r0, 800c570 <_vfiprintf_r+0x110>
 800c538:	06d1      	lsls	r1, r2, #27
 800c53a:	bf44      	itt	mi
 800c53c:	2320      	movmi	r3, #32
 800c53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c542:	0713      	lsls	r3, r2, #28
 800c544:	bf44      	itt	mi
 800c546:	232b      	movmi	r3, #43	@ 0x2b
 800c548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c54c:	f89a 3000 	ldrb.w	r3, [sl]
 800c550:	2b2a      	cmp	r3, #42	@ 0x2a
 800c552:	d015      	beq.n	800c580 <_vfiprintf_r+0x120>
 800c554:	9a07      	ldr	r2, [sp, #28]
 800c556:	4654      	mov	r4, sl
 800c558:	2000      	movs	r0, #0
 800c55a:	f04f 0c0a 	mov.w	ip, #10
 800c55e:	4621      	mov	r1, r4
 800c560:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c564:	3b30      	subs	r3, #48	@ 0x30
 800c566:	2b09      	cmp	r3, #9
 800c568:	d94b      	bls.n	800c602 <_vfiprintf_r+0x1a2>
 800c56a:	b1b0      	cbz	r0, 800c59a <_vfiprintf_r+0x13a>
 800c56c:	9207      	str	r2, [sp, #28]
 800c56e:	e014      	b.n	800c59a <_vfiprintf_r+0x13a>
 800c570:	eba0 0308 	sub.w	r3, r0, r8
 800c574:	fa09 f303 	lsl.w	r3, r9, r3
 800c578:	4313      	orrs	r3, r2
 800c57a:	9304      	str	r3, [sp, #16]
 800c57c:	46a2      	mov	sl, r4
 800c57e:	e7d2      	b.n	800c526 <_vfiprintf_r+0xc6>
 800c580:	9b03      	ldr	r3, [sp, #12]
 800c582:	1d19      	adds	r1, r3, #4
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	9103      	str	r1, [sp, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	bfbb      	ittet	lt
 800c58c:	425b      	neglt	r3, r3
 800c58e:	f042 0202 	orrlt.w	r2, r2, #2
 800c592:	9307      	strge	r3, [sp, #28]
 800c594:	9307      	strlt	r3, [sp, #28]
 800c596:	bfb8      	it	lt
 800c598:	9204      	strlt	r2, [sp, #16]
 800c59a:	7823      	ldrb	r3, [r4, #0]
 800c59c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c59e:	d10a      	bne.n	800c5b6 <_vfiprintf_r+0x156>
 800c5a0:	7863      	ldrb	r3, [r4, #1]
 800c5a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5a4:	d132      	bne.n	800c60c <_vfiprintf_r+0x1ac>
 800c5a6:	9b03      	ldr	r3, [sp, #12]
 800c5a8:	1d1a      	adds	r2, r3, #4
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	9203      	str	r2, [sp, #12]
 800c5ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5b2:	3402      	adds	r4, #2
 800c5b4:	9305      	str	r3, [sp, #20]
 800c5b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c68c <_vfiprintf_r+0x22c>
 800c5ba:	7821      	ldrb	r1, [r4, #0]
 800c5bc:	2203      	movs	r2, #3
 800c5be:	4650      	mov	r0, sl
 800c5c0:	f7f3 fe36 	bl	8000230 <memchr>
 800c5c4:	b138      	cbz	r0, 800c5d6 <_vfiprintf_r+0x176>
 800c5c6:	9b04      	ldr	r3, [sp, #16]
 800c5c8:	eba0 000a 	sub.w	r0, r0, sl
 800c5cc:	2240      	movs	r2, #64	@ 0x40
 800c5ce:	4082      	lsls	r2, r0
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	3401      	adds	r4, #1
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5da:	4829      	ldr	r0, [pc, #164]	@ (800c680 <_vfiprintf_r+0x220>)
 800c5dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5e0:	2206      	movs	r2, #6
 800c5e2:	f7f3 fe25 	bl	8000230 <memchr>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d03f      	beq.n	800c66a <_vfiprintf_r+0x20a>
 800c5ea:	4b26      	ldr	r3, [pc, #152]	@ (800c684 <_vfiprintf_r+0x224>)
 800c5ec:	bb1b      	cbnz	r3, 800c636 <_vfiprintf_r+0x1d6>
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	f023 0307 	bic.w	r3, r3, #7
 800c5f6:	3308      	adds	r3, #8
 800c5f8:	9303      	str	r3, [sp, #12]
 800c5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5fc:	443b      	add	r3, r7
 800c5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c600:	e76a      	b.n	800c4d8 <_vfiprintf_r+0x78>
 800c602:	fb0c 3202 	mla	r2, ip, r2, r3
 800c606:	460c      	mov	r4, r1
 800c608:	2001      	movs	r0, #1
 800c60a:	e7a8      	b.n	800c55e <_vfiprintf_r+0xfe>
 800c60c:	2300      	movs	r3, #0
 800c60e:	3401      	adds	r4, #1
 800c610:	9305      	str	r3, [sp, #20]
 800c612:	4619      	mov	r1, r3
 800c614:	f04f 0c0a 	mov.w	ip, #10
 800c618:	4620      	mov	r0, r4
 800c61a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c61e:	3a30      	subs	r2, #48	@ 0x30
 800c620:	2a09      	cmp	r2, #9
 800c622:	d903      	bls.n	800c62c <_vfiprintf_r+0x1cc>
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0c6      	beq.n	800c5b6 <_vfiprintf_r+0x156>
 800c628:	9105      	str	r1, [sp, #20]
 800c62a:	e7c4      	b.n	800c5b6 <_vfiprintf_r+0x156>
 800c62c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c630:	4604      	mov	r4, r0
 800c632:	2301      	movs	r3, #1
 800c634:	e7f0      	b.n	800c618 <_vfiprintf_r+0x1b8>
 800c636:	ab03      	add	r3, sp, #12
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	462a      	mov	r2, r5
 800c63c:	4b12      	ldr	r3, [pc, #72]	@ (800c688 <_vfiprintf_r+0x228>)
 800c63e:	a904      	add	r1, sp, #16
 800c640:	4630      	mov	r0, r6
 800c642:	f3af 8000 	nop.w
 800c646:	4607      	mov	r7, r0
 800c648:	1c78      	adds	r0, r7, #1
 800c64a:	d1d6      	bne.n	800c5fa <_vfiprintf_r+0x19a>
 800c64c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c64e:	07d9      	lsls	r1, r3, #31
 800c650:	d405      	bmi.n	800c65e <_vfiprintf_r+0x1fe>
 800c652:	89ab      	ldrh	r3, [r5, #12]
 800c654:	059a      	lsls	r2, r3, #22
 800c656:	d402      	bmi.n	800c65e <_vfiprintf_r+0x1fe>
 800c658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c65a:	f7ff faa7 	bl	800bbac <__retarget_lock_release_recursive>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	065b      	lsls	r3, r3, #25
 800c662:	f53f af1f 	bmi.w	800c4a4 <_vfiprintf_r+0x44>
 800c666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c668:	e71e      	b.n	800c4a8 <_vfiprintf_r+0x48>
 800c66a:	ab03      	add	r3, sp, #12
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	462a      	mov	r2, r5
 800c670:	4b05      	ldr	r3, [pc, #20]	@ (800c688 <_vfiprintf_r+0x228>)
 800c672:	a904      	add	r1, sp, #16
 800c674:	4630      	mov	r0, r6
 800c676:	f000 f879 	bl	800c76c <_printf_i>
 800c67a:	e7e4      	b.n	800c646 <_vfiprintf_r+0x1e6>
 800c67c:	0800d524 	.word	0x0800d524
 800c680:	0800d52e 	.word	0x0800d52e
 800c684:	00000000 	.word	0x00000000
 800c688:	0800c43b 	.word	0x0800c43b
 800c68c:	0800d52a 	.word	0x0800d52a

0800c690 <_printf_common>:
 800c690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c694:	4616      	mov	r6, r2
 800c696:	4698      	mov	r8, r3
 800c698:	688a      	ldr	r2, [r1, #8]
 800c69a:	690b      	ldr	r3, [r1, #16]
 800c69c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	bfb8      	it	lt
 800c6a4:	4613      	movlt	r3, r2
 800c6a6:	6033      	str	r3, [r6, #0]
 800c6a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6ac:	4607      	mov	r7, r0
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	b10a      	cbz	r2, 800c6b6 <_printf_common+0x26>
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	6033      	str	r3, [r6, #0]
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	0699      	lsls	r1, r3, #26
 800c6ba:	bf42      	ittt	mi
 800c6bc:	6833      	ldrmi	r3, [r6, #0]
 800c6be:	3302      	addmi	r3, #2
 800c6c0:	6033      	strmi	r3, [r6, #0]
 800c6c2:	6825      	ldr	r5, [r4, #0]
 800c6c4:	f015 0506 	ands.w	r5, r5, #6
 800c6c8:	d106      	bne.n	800c6d8 <_printf_common+0x48>
 800c6ca:	f104 0a19 	add.w	sl, r4, #25
 800c6ce:	68e3      	ldr	r3, [r4, #12]
 800c6d0:	6832      	ldr	r2, [r6, #0]
 800c6d2:	1a9b      	subs	r3, r3, r2
 800c6d4:	42ab      	cmp	r3, r5
 800c6d6:	dc26      	bgt.n	800c726 <_printf_common+0x96>
 800c6d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6dc:	6822      	ldr	r2, [r4, #0]
 800c6de:	3b00      	subs	r3, #0
 800c6e0:	bf18      	it	ne
 800c6e2:	2301      	movne	r3, #1
 800c6e4:	0692      	lsls	r2, r2, #26
 800c6e6:	d42b      	bmi.n	800c740 <_printf_common+0xb0>
 800c6e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6ec:	4641      	mov	r1, r8
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	47c8      	blx	r9
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	d01e      	beq.n	800c734 <_printf_common+0xa4>
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	6922      	ldr	r2, [r4, #16]
 800c6fa:	f003 0306 	and.w	r3, r3, #6
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	bf02      	ittt	eq
 800c702:	68e5      	ldreq	r5, [r4, #12]
 800c704:	6833      	ldreq	r3, [r6, #0]
 800c706:	1aed      	subeq	r5, r5, r3
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	bf0c      	ite	eq
 800c70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c710:	2500      	movne	r5, #0
 800c712:	4293      	cmp	r3, r2
 800c714:	bfc4      	itt	gt
 800c716:	1a9b      	subgt	r3, r3, r2
 800c718:	18ed      	addgt	r5, r5, r3
 800c71a:	2600      	movs	r6, #0
 800c71c:	341a      	adds	r4, #26
 800c71e:	42b5      	cmp	r5, r6
 800c720:	d11a      	bne.n	800c758 <_printf_common+0xc8>
 800c722:	2000      	movs	r0, #0
 800c724:	e008      	b.n	800c738 <_printf_common+0xa8>
 800c726:	2301      	movs	r3, #1
 800c728:	4652      	mov	r2, sl
 800c72a:	4641      	mov	r1, r8
 800c72c:	4638      	mov	r0, r7
 800c72e:	47c8      	blx	r9
 800c730:	3001      	adds	r0, #1
 800c732:	d103      	bne.n	800c73c <_printf_common+0xac>
 800c734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73c:	3501      	adds	r5, #1
 800c73e:	e7c6      	b.n	800c6ce <_printf_common+0x3e>
 800c740:	18e1      	adds	r1, r4, r3
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	2030      	movs	r0, #48	@ 0x30
 800c746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c74a:	4422      	add	r2, r4
 800c74c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c754:	3302      	adds	r3, #2
 800c756:	e7c7      	b.n	800c6e8 <_printf_common+0x58>
 800c758:	2301      	movs	r3, #1
 800c75a:	4622      	mov	r2, r4
 800c75c:	4641      	mov	r1, r8
 800c75e:	4638      	mov	r0, r7
 800c760:	47c8      	blx	r9
 800c762:	3001      	adds	r0, #1
 800c764:	d0e6      	beq.n	800c734 <_printf_common+0xa4>
 800c766:	3601      	adds	r6, #1
 800c768:	e7d9      	b.n	800c71e <_printf_common+0x8e>
	...

0800c76c <_printf_i>:
 800c76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c770:	7e0f      	ldrb	r7, [r1, #24]
 800c772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c774:	2f78      	cmp	r7, #120	@ 0x78
 800c776:	4691      	mov	r9, r2
 800c778:	4680      	mov	r8, r0
 800c77a:	460c      	mov	r4, r1
 800c77c:	469a      	mov	sl, r3
 800c77e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c782:	d807      	bhi.n	800c794 <_printf_i+0x28>
 800c784:	2f62      	cmp	r7, #98	@ 0x62
 800c786:	d80a      	bhi.n	800c79e <_printf_i+0x32>
 800c788:	2f00      	cmp	r7, #0
 800c78a:	f000 80d1 	beq.w	800c930 <_printf_i+0x1c4>
 800c78e:	2f58      	cmp	r7, #88	@ 0x58
 800c790:	f000 80b8 	beq.w	800c904 <_printf_i+0x198>
 800c794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c79c:	e03a      	b.n	800c814 <_printf_i+0xa8>
 800c79e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7a2:	2b15      	cmp	r3, #21
 800c7a4:	d8f6      	bhi.n	800c794 <_printf_i+0x28>
 800c7a6:	a101      	add	r1, pc, #4	@ (adr r1, 800c7ac <_printf_i+0x40>)
 800c7a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7ac:	0800c805 	.word	0x0800c805
 800c7b0:	0800c819 	.word	0x0800c819
 800c7b4:	0800c795 	.word	0x0800c795
 800c7b8:	0800c795 	.word	0x0800c795
 800c7bc:	0800c795 	.word	0x0800c795
 800c7c0:	0800c795 	.word	0x0800c795
 800c7c4:	0800c819 	.word	0x0800c819
 800c7c8:	0800c795 	.word	0x0800c795
 800c7cc:	0800c795 	.word	0x0800c795
 800c7d0:	0800c795 	.word	0x0800c795
 800c7d4:	0800c795 	.word	0x0800c795
 800c7d8:	0800c917 	.word	0x0800c917
 800c7dc:	0800c843 	.word	0x0800c843
 800c7e0:	0800c8d1 	.word	0x0800c8d1
 800c7e4:	0800c795 	.word	0x0800c795
 800c7e8:	0800c795 	.word	0x0800c795
 800c7ec:	0800c939 	.word	0x0800c939
 800c7f0:	0800c795 	.word	0x0800c795
 800c7f4:	0800c843 	.word	0x0800c843
 800c7f8:	0800c795 	.word	0x0800c795
 800c7fc:	0800c795 	.word	0x0800c795
 800c800:	0800c8d9 	.word	0x0800c8d9
 800c804:	6833      	ldr	r3, [r6, #0]
 800c806:	1d1a      	adds	r2, r3, #4
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	6032      	str	r2, [r6, #0]
 800c80c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c814:	2301      	movs	r3, #1
 800c816:	e09c      	b.n	800c952 <_printf_i+0x1e6>
 800c818:	6833      	ldr	r3, [r6, #0]
 800c81a:	6820      	ldr	r0, [r4, #0]
 800c81c:	1d19      	adds	r1, r3, #4
 800c81e:	6031      	str	r1, [r6, #0]
 800c820:	0606      	lsls	r6, r0, #24
 800c822:	d501      	bpl.n	800c828 <_printf_i+0xbc>
 800c824:	681d      	ldr	r5, [r3, #0]
 800c826:	e003      	b.n	800c830 <_printf_i+0xc4>
 800c828:	0645      	lsls	r5, r0, #25
 800c82a:	d5fb      	bpl.n	800c824 <_printf_i+0xb8>
 800c82c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c830:	2d00      	cmp	r5, #0
 800c832:	da03      	bge.n	800c83c <_printf_i+0xd0>
 800c834:	232d      	movs	r3, #45	@ 0x2d
 800c836:	426d      	negs	r5, r5
 800c838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c83c:	4858      	ldr	r0, [pc, #352]	@ (800c9a0 <_printf_i+0x234>)
 800c83e:	230a      	movs	r3, #10
 800c840:	e011      	b.n	800c866 <_printf_i+0xfa>
 800c842:	6821      	ldr	r1, [r4, #0]
 800c844:	6833      	ldr	r3, [r6, #0]
 800c846:	0608      	lsls	r0, r1, #24
 800c848:	f853 5b04 	ldr.w	r5, [r3], #4
 800c84c:	d402      	bmi.n	800c854 <_printf_i+0xe8>
 800c84e:	0649      	lsls	r1, r1, #25
 800c850:	bf48      	it	mi
 800c852:	b2ad      	uxthmi	r5, r5
 800c854:	2f6f      	cmp	r7, #111	@ 0x6f
 800c856:	4852      	ldr	r0, [pc, #328]	@ (800c9a0 <_printf_i+0x234>)
 800c858:	6033      	str	r3, [r6, #0]
 800c85a:	bf14      	ite	ne
 800c85c:	230a      	movne	r3, #10
 800c85e:	2308      	moveq	r3, #8
 800c860:	2100      	movs	r1, #0
 800c862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c866:	6866      	ldr	r6, [r4, #4]
 800c868:	60a6      	str	r6, [r4, #8]
 800c86a:	2e00      	cmp	r6, #0
 800c86c:	db05      	blt.n	800c87a <_printf_i+0x10e>
 800c86e:	6821      	ldr	r1, [r4, #0]
 800c870:	432e      	orrs	r6, r5
 800c872:	f021 0104 	bic.w	r1, r1, #4
 800c876:	6021      	str	r1, [r4, #0]
 800c878:	d04b      	beq.n	800c912 <_printf_i+0x1a6>
 800c87a:	4616      	mov	r6, r2
 800c87c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c880:	fb03 5711 	mls	r7, r3, r1, r5
 800c884:	5dc7      	ldrb	r7, [r0, r7]
 800c886:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c88a:	462f      	mov	r7, r5
 800c88c:	42bb      	cmp	r3, r7
 800c88e:	460d      	mov	r5, r1
 800c890:	d9f4      	bls.n	800c87c <_printf_i+0x110>
 800c892:	2b08      	cmp	r3, #8
 800c894:	d10b      	bne.n	800c8ae <_printf_i+0x142>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	07df      	lsls	r7, r3, #31
 800c89a:	d508      	bpl.n	800c8ae <_printf_i+0x142>
 800c89c:	6923      	ldr	r3, [r4, #16]
 800c89e:	6861      	ldr	r1, [r4, #4]
 800c8a0:	4299      	cmp	r1, r3
 800c8a2:	bfde      	ittt	le
 800c8a4:	2330      	movle	r3, #48	@ 0x30
 800c8a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8aa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c8ae:	1b92      	subs	r2, r2, r6
 800c8b0:	6122      	str	r2, [r4, #16]
 800c8b2:	f8cd a000 	str.w	sl, [sp]
 800c8b6:	464b      	mov	r3, r9
 800c8b8:	aa03      	add	r2, sp, #12
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	4640      	mov	r0, r8
 800c8be:	f7ff fee7 	bl	800c690 <_printf_common>
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	d14a      	bne.n	800c95c <_printf_i+0x1f0>
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8ca:	b004      	add	sp, #16
 800c8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	f043 0320 	orr.w	r3, r3, #32
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	4832      	ldr	r0, [pc, #200]	@ (800c9a4 <_printf_i+0x238>)
 800c8da:	2778      	movs	r7, #120	@ 0x78
 800c8dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	6831      	ldr	r1, [r6, #0]
 800c8e4:	061f      	lsls	r7, r3, #24
 800c8e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8ea:	d402      	bmi.n	800c8f2 <_printf_i+0x186>
 800c8ec:	065f      	lsls	r7, r3, #25
 800c8ee:	bf48      	it	mi
 800c8f0:	b2ad      	uxthmi	r5, r5
 800c8f2:	6031      	str	r1, [r6, #0]
 800c8f4:	07d9      	lsls	r1, r3, #31
 800c8f6:	bf44      	itt	mi
 800c8f8:	f043 0320 	orrmi.w	r3, r3, #32
 800c8fc:	6023      	strmi	r3, [r4, #0]
 800c8fe:	b11d      	cbz	r5, 800c908 <_printf_i+0x19c>
 800c900:	2310      	movs	r3, #16
 800c902:	e7ad      	b.n	800c860 <_printf_i+0xf4>
 800c904:	4826      	ldr	r0, [pc, #152]	@ (800c9a0 <_printf_i+0x234>)
 800c906:	e7e9      	b.n	800c8dc <_printf_i+0x170>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	f023 0320 	bic.w	r3, r3, #32
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	e7f6      	b.n	800c900 <_printf_i+0x194>
 800c912:	4616      	mov	r6, r2
 800c914:	e7bd      	b.n	800c892 <_printf_i+0x126>
 800c916:	6833      	ldr	r3, [r6, #0]
 800c918:	6825      	ldr	r5, [r4, #0]
 800c91a:	6961      	ldr	r1, [r4, #20]
 800c91c:	1d18      	adds	r0, r3, #4
 800c91e:	6030      	str	r0, [r6, #0]
 800c920:	062e      	lsls	r6, r5, #24
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	d501      	bpl.n	800c92a <_printf_i+0x1be>
 800c926:	6019      	str	r1, [r3, #0]
 800c928:	e002      	b.n	800c930 <_printf_i+0x1c4>
 800c92a:	0668      	lsls	r0, r5, #25
 800c92c:	d5fb      	bpl.n	800c926 <_printf_i+0x1ba>
 800c92e:	8019      	strh	r1, [r3, #0]
 800c930:	2300      	movs	r3, #0
 800c932:	6123      	str	r3, [r4, #16]
 800c934:	4616      	mov	r6, r2
 800c936:	e7bc      	b.n	800c8b2 <_printf_i+0x146>
 800c938:	6833      	ldr	r3, [r6, #0]
 800c93a:	1d1a      	adds	r2, r3, #4
 800c93c:	6032      	str	r2, [r6, #0]
 800c93e:	681e      	ldr	r6, [r3, #0]
 800c940:	6862      	ldr	r2, [r4, #4]
 800c942:	2100      	movs	r1, #0
 800c944:	4630      	mov	r0, r6
 800c946:	f7f3 fc73 	bl	8000230 <memchr>
 800c94a:	b108      	cbz	r0, 800c950 <_printf_i+0x1e4>
 800c94c:	1b80      	subs	r0, r0, r6
 800c94e:	6060      	str	r0, [r4, #4]
 800c950:	6863      	ldr	r3, [r4, #4]
 800c952:	6123      	str	r3, [r4, #16]
 800c954:	2300      	movs	r3, #0
 800c956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c95a:	e7aa      	b.n	800c8b2 <_printf_i+0x146>
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	4632      	mov	r2, r6
 800c960:	4649      	mov	r1, r9
 800c962:	4640      	mov	r0, r8
 800c964:	47d0      	blx	sl
 800c966:	3001      	adds	r0, #1
 800c968:	d0ad      	beq.n	800c8c6 <_printf_i+0x15a>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	079b      	lsls	r3, r3, #30
 800c96e:	d413      	bmi.n	800c998 <_printf_i+0x22c>
 800c970:	68e0      	ldr	r0, [r4, #12]
 800c972:	9b03      	ldr	r3, [sp, #12]
 800c974:	4298      	cmp	r0, r3
 800c976:	bfb8      	it	lt
 800c978:	4618      	movlt	r0, r3
 800c97a:	e7a6      	b.n	800c8ca <_printf_i+0x15e>
 800c97c:	2301      	movs	r3, #1
 800c97e:	4632      	mov	r2, r6
 800c980:	4649      	mov	r1, r9
 800c982:	4640      	mov	r0, r8
 800c984:	47d0      	blx	sl
 800c986:	3001      	adds	r0, #1
 800c988:	d09d      	beq.n	800c8c6 <_printf_i+0x15a>
 800c98a:	3501      	adds	r5, #1
 800c98c:	68e3      	ldr	r3, [r4, #12]
 800c98e:	9903      	ldr	r1, [sp, #12]
 800c990:	1a5b      	subs	r3, r3, r1
 800c992:	42ab      	cmp	r3, r5
 800c994:	dcf2      	bgt.n	800c97c <_printf_i+0x210>
 800c996:	e7eb      	b.n	800c970 <_printf_i+0x204>
 800c998:	2500      	movs	r5, #0
 800c99a:	f104 0619 	add.w	r6, r4, #25
 800c99e:	e7f5      	b.n	800c98c <_printf_i+0x220>
 800c9a0:	0800d535 	.word	0x0800d535
 800c9a4:	0800d546 	.word	0x0800d546

0800c9a8 <_scanf_chars>:
 800c9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ac:	4615      	mov	r5, r2
 800c9ae:	688a      	ldr	r2, [r1, #8]
 800c9b0:	4680      	mov	r8, r0
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	b932      	cbnz	r2, 800c9c4 <_scanf_chars+0x1c>
 800c9b6:	698a      	ldr	r2, [r1, #24]
 800c9b8:	2a00      	cmp	r2, #0
 800c9ba:	bf14      	ite	ne
 800c9bc:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800c9c0:	2201      	moveq	r2, #1
 800c9c2:	608a      	str	r2, [r1, #8]
 800c9c4:	6822      	ldr	r2, [r4, #0]
 800c9c6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ca58 <_scanf_chars+0xb0>
 800c9ca:	06d1      	lsls	r1, r2, #27
 800c9cc:	bf5f      	itttt	pl
 800c9ce:	681a      	ldrpl	r2, [r3, #0]
 800c9d0:	1d11      	addpl	r1, r2, #4
 800c9d2:	6019      	strpl	r1, [r3, #0]
 800c9d4:	6816      	ldrpl	r6, [r2, #0]
 800c9d6:	2700      	movs	r7, #0
 800c9d8:	69a0      	ldr	r0, [r4, #24]
 800c9da:	b188      	cbz	r0, 800ca00 <_scanf_chars+0x58>
 800c9dc:	2801      	cmp	r0, #1
 800c9de:	d107      	bne.n	800c9f0 <_scanf_chars+0x48>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	6963      	ldr	r3, [r4, #20]
 800c9e6:	5c9b      	ldrb	r3, [r3, r2]
 800c9e8:	b953      	cbnz	r3, 800ca00 <_scanf_chars+0x58>
 800c9ea:	2f00      	cmp	r7, #0
 800c9ec:	d031      	beq.n	800ca52 <_scanf_chars+0xaa>
 800c9ee:	e022      	b.n	800ca36 <_scanf_chars+0x8e>
 800c9f0:	2802      	cmp	r0, #2
 800c9f2:	d120      	bne.n	800ca36 <_scanf_chars+0x8e>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c9fc:	071b      	lsls	r3, r3, #28
 800c9fe:	d41a      	bmi.n	800ca36 <_scanf_chars+0x8e>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	06da      	lsls	r2, r3, #27
 800ca04:	bf5e      	ittt	pl
 800ca06:	682b      	ldrpl	r3, [r5, #0]
 800ca08:	781b      	ldrbpl	r3, [r3, #0]
 800ca0a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ca0e:	682a      	ldr	r2, [r5, #0]
 800ca10:	686b      	ldr	r3, [r5, #4]
 800ca12:	3201      	adds	r2, #1
 800ca14:	602a      	str	r2, [r5, #0]
 800ca16:	68a2      	ldr	r2, [r4, #8]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	3a01      	subs	r2, #1
 800ca1c:	606b      	str	r3, [r5, #4]
 800ca1e:	3701      	adds	r7, #1
 800ca20:	60a2      	str	r2, [r4, #8]
 800ca22:	b142      	cbz	r2, 800ca36 <_scanf_chars+0x8e>
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dcd7      	bgt.n	800c9d8 <_scanf_chars+0x30>
 800ca28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	4640      	mov	r0, r8
 800ca30:	4798      	blx	r3
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d0d0      	beq.n	800c9d8 <_scanf_chars+0x30>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	f013 0310 	ands.w	r3, r3, #16
 800ca3c:	d105      	bne.n	800ca4a <_scanf_chars+0xa2>
 800ca3e:	68e2      	ldr	r2, [r4, #12]
 800ca40:	3201      	adds	r2, #1
 800ca42:	60e2      	str	r2, [r4, #12]
 800ca44:	69a2      	ldr	r2, [r4, #24]
 800ca46:	b102      	cbz	r2, 800ca4a <_scanf_chars+0xa2>
 800ca48:	7033      	strb	r3, [r6, #0]
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	443b      	add	r3, r7
 800ca4e:	6123      	str	r3, [r4, #16]
 800ca50:	2000      	movs	r0, #0
 800ca52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca56:	bf00      	nop
 800ca58:	0800d573 	.word	0x0800d573

0800ca5c <_scanf_i>:
 800ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	4698      	mov	r8, r3
 800ca62:	4b74      	ldr	r3, [pc, #464]	@ (800cc34 <_scanf_i+0x1d8>)
 800ca64:	460c      	mov	r4, r1
 800ca66:	4682      	mov	sl, r0
 800ca68:	4616      	mov	r6, r2
 800ca6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	ab03      	add	r3, sp, #12
 800ca72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ca76:	4b70      	ldr	r3, [pc, #448]	@ (800cc38 <_scanf_i+0x1dc>)
 800ca78:	69a1      	ldr	r1, [r4, #24]
 800ca7a:	4a70      	ldr	r2, [pc, #448]	@ (800cc3c <_scanf_i+0x1e0>)
 800ca7c:	2903      	cmp	r1, #3
 800ca7e:	bf08      	it	eq
 800ca80:	461a      	moveq	r2, r3
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	9201      	str	r2, [sp, #4]
 800ca86:	1e5a      	subs	r2, r3, #1
 800ca88:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ca8c:	bf88      	it	hi
 800ca8e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ca92:	4627      	mov	r7, r4
 800ca94:	bf82      	ittt	hi
 800ca96:	eb03 0905 	addhi.w	r9, r3, r5
 800ca9a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ca9e:	60a3      	strhi	r3, [r4, #8]
 800caa0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800caa4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800caa8:	bf98      	it	ls
 800caaa:	f04f 0900 	movls.w	r9, #0
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	463d      	mov	r5, r7
 800cab2:	f04f 0b00 	mov.w	fp, #0
 800cab6:	6831      	ldr	r1, [r6, #0]
 800cab8:	ab03      	add	r3, sp, #12
 800caba:	7809      	ldrb	r1, [r1, #0]
 800cabc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cac0:	2202      	movs	r2, #2
 800cac2:	f7f3 fbb5 	bl	8000230 <memchr>
 800cac6:	b328      	cbz	r0, 800cb14 <_scanf_i+0xb8>
 800cac8:	f1bb 0f01 	cmp.w	fp, #1
 800cacc:	d159      	bne.n	800cb82 <_scanf_i+0x126>
 800cace:	6862      	ldr	r2, [r4, #4]
 800cad0:	b92a      	cbnz	r2, 800cade <_scanf_i+0x82>
 800cad2:	6822      	ldr	r2, [r4, #0]
 800cad4:	2108      	movs	r1, #8
 800cad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cada:	6061      	str	r1, [r4, #4]
 800cadc:	6022      	str	r2, [r4, #0]
 800cade:	6822      	ldr	r2, [r4, #0]
 800cae0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800cae4:	6022      	str	r2, [r4, #0]
 800cae6:	68a2      	ldr	r2, [r4, #8]
 800cae8:	1e51      	subs	r1, r2, #1
 800caea:	60a1      	str	r1, [r4, #8]
 800caec:	b192      	cbz	r2, 800cb14 <_scanf_i+0xb8>
 800caee:	6832      	ldr	r2, [r6, #0]
 800caf0:	1c51      	adds	r1, r2, #1
 800caf2:	6031      	str	r1, [r6, #0]
 800caf4:	7812      	ldrb	r2, [r2, #0]
 800caf6:	f805 2b01 	strb.w	r2, [r5], #1
 800cafa:	6872      	ldr	r2, [r6, #4]
 800cafc:	3a01      	subs	r2, #1
 800cafe:	2a00      	cmp	r2, #0
 800cb00:	6072      	str	r2, [r6, #4]
 800cb02:	dc07      	bgt.n	800cb14 <_scanf_i+0xb8>
 800cb04:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4650      	mov	r0, sl
 800cb0c:	4790      	blx	r2
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	f040 8085 	bne.w	800cc1e <_scanf_i+0x1c2>
 800cb14:	f10b 0b01 	add.w	fp, fp, #1
 800cb18:	f1bb 0f03 	cmp.w	fp, #3
 800cb1c:	d1cb      	bne.n	800cab6 <_scanf_i+0x5a>
 800cb1e:	6863      	ldr	r3, [r4, #4]
 800cb20:	b90b      	cbnz	r3, 800cb26 <_scanf_i+0xca>
 800cb22:	230a      	movs	r3, #10
 800cb24:	6063      	str	r3, [r4, #4]
 800cb26:	6863      	ldr	r3, [r4, #4]
 800cb28:	4945      	ldr	r1, [pc, #276]	@ (800cc40 <_scanf_i+0x1e4>)
 800cb2a:	6960      	ldr	r0, [r4, #20]
 800cb2c:	1ac9      	subs	r1, r1, r3
 800cb2e:	f000 f997 	bl	800ce60 <__sccl>
 800cb32:	f04f 0b00 	mov.w	fp, #0
 800cb36:	68a3      	ldr	r3, [r4, #8]
 800cb38:	6822      	ldr	r2, [r4, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d03d      	beq.n	800cbba <_scanf_i+0x15e>
 800cb3e:	6831      	ldr	r1, [r6, #0]
 800cb40:	6960      	ldr	r0, [r4, #20]
 800cb42:	f891 c000 	ldrb.w	ip, [r1]
 800cb46:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d035      	beq.n	800cbba <_scanf_i+0x15e>
 800cb4e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800cb52:	d124      	bne.n	800cb9e <_scanf_i+0x142>
 800cb54:	0510      	lsls	r0, r2, #20
 800cb56:	d522      	bpl.n	800cb9e <_scanf_i+0x142>
 800cb58:	f10b 0b01 	add.w	fp, fp, #1
 800cb5c:	f1b9 0f00 	cmp.w	r9, #0
 800cb60:	d003      	beq.n	800cb6a <_scanf_i+0x10e>
 800cb62:	3301      	adds	r3, #1
 800cb64:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800cb68:	60a3      	str	r3, [r4, #8]
 800cb6a:	6873      	ldr	r3, [r6, #4]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	6073      	str	r3, [r6, #4]
 800cb72:	dd1b      	ble.n	800cbac <_scanf_i+0x150>
 800cb74:	6833      	ldr	r3, [r6, #0]
 800cb76:	3301      	adds	r3, #1
 800cb78:	6033      	str	r3, [r6, #0]
 800cb7a:	68a3      	ldr	r3, [r4, #8]
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	60a3      	str	r3, [r4, #8]
 800cb80:	e7d9      	b.n	800cb36 <_scanf_i+0xda>
 800cb82:	f1bb 0f02 	cmp.w	fp, #2
 800cb86:	d1ae      	bne.n	800cae6 <_scanf_i+0x8a>
 800cb88:	6822      	ldr	r2, [r4, #0]
 800cb8a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800cb8e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cb92:	d1c4      	bne.n	800cb1e <_scanf_i+0xc2>
 800cb94:	2110      	movs	r1, #16
 800cb96:	6061      	str	r1, [r4, #4]
 800cb98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cb9c:	e7a2      	b.n	800cae4 <_scanf_i+0x88>
 800cb9e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800cba2:	6022      	str	r2, [r4, #0]
 800cba4:	780b      	ldrb	r3, [r1, #0]
 800cba6:	f805 3b01 	strb.w	r3, [r5], #1
 800cbaa:	e7de      	b.n	800cb6a <_scanf_i+0x10e>
 800cbac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	4650      	mov	r0, sl
 800cbb4:	4798      	blx	r3
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d0df      	beq.n	800cb7a <_scanf_i+0x11e>
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	05d9      	lsls	r1, r3, #23
 800cbbe:	d50d      	bpl.n	800cbdc <_scanf_i+0x180>
 800cbc0:	42bd      	cmp	r5, r7
 800cbc2:	d909      	bls.n	800cbd8 <_scanf_i+0x17c>
 800cbc4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cbc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbcc:	4632      	mov	r2, r6
 800cbce:	4650      	mov	r0, sl
 800cbd0:	4798      	blx	r3
 800cbd2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800cbd6:	464d      	mov	r5, r9
 800cbd8:	42bd      	cmp	r5, r7
 800cbda:	d028      	beq.n	800cc2e <_scanf_i+0x1d2>
 800cbdc:	6822      	ldr	r2, [r4, #0]
 800cbde:	f012 0210 	ands.w	r2, r2, #16
 800cbe2:	d113      	bne.n	800cc0c <_scanf_i+0x1b0>
 800cbe4:	702a      	strb	r2, [r5, #0]
 800cbe6:	6863      	ldr	r3, [r4, #4]
 800cbe8:	9e01      	ldr	r6, [sp, #4]
 800cbea:	4639      	mov	r1, r7
 800cbec:	4650      	mov	r0, sl
 800cbee:	47b0      	blx	r6
 800cbf0:	f8d8 3000 	ldr.w	r3, [r8]
 800cbf4:	6821      	ldr	r1, [r4, #0]
 800cbf6:	1d1a      	adds	r2, r3, #4
 800cbf8:	f8c8 2000 	str.w	r2, [r8]
 800cbfc:	f011 0f20 	tst.w	r1, #32
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	d00f      	beq.n	800cc24 <_scanf_i+0x1c8>
 800cc04:	6018      	str	r0, [r3, #0]
 800cc06:	68e3      	ldr	r3, [r4, #12]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	60e3      	str	r3, [r4, #12]
 800cc0c:	6923      	ldr	r3, [r4, #16]
 800cc0e:	1bed      	subs	r5, r5, r7
 800cc10:	445d      	add	r5, fp
 800cc12:	442b      	add	r3, r5
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	2000      	movs	r0, #0
 800cc18:	b007      	add	sp, #28
 800cc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1e:	f04f 0b00 	mov.w	fp, #0
 800cc22:	e7ca      	b.n	800cbba <_scanf_i+0x15e>
 800cc24:	07ca      	lsls	r2, r1, #31
 800cc26:	bf4c      	ite	mi
 800cc28:	8018      	strhmi	r0, [r3, #0]
 800cc2a:	6018      	strpl	r0, [r3, #0]
 800cc2c:	e7eb      	b.n	800cc06 <_scanf_i+0x1aa>
 800cc2e:	2001      	movs	r0, #1
 800cc30:	e7f2      	b.n	800cc18 <_scanf_i+0x1bc>
 800cc32:	bf00      	nop
 800cc34:	0800d40c 	.word	0x0800d40c
 800cc38:	0800d131 	.word	0x0800d131
 800cc3c:	0800d211 	.word	0x0800d211
 800cc40:	0800d567 	.word	0x0800d567

0800cc44 <__sflush_r>:
 800cc44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4c:	0716      	lsls	r6, r2, #28
 800cc4e:	4605      	mov	r5, r0
 800cc50:	460c      	mov	r4, r1
 800cc52:	d454      	bmi.n	800ccfe <__sflush_r+0xba>
 800cc54:	684b      	ldr	r3, [r1, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	dc02      	bgt.n	800cc60 <__sflush_r+0x1c>
 800cc5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dd48      	ble.n	800ccf2 <__sflush_r+0xae>
 800cc60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc62:	2e00      	cmp	r6, #0
 800cc64:	d045      	beq.n	800ccf2 <__sflush_r+0xae>
 800cc66:	2300      	movs	r3, #0
 800cc68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc6c:	682f      	ldr	r7, [r5, #0]
 800cc6e:	6a21      	ldr	r1, [r4, #32]
 800cc70:	602b      	str	r3, [r5, #0]
 800cc72:	d030      	beq.n	800ccd6 <__sflush_r+0x92>
 800cc74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	0759      	lsls	r1, r3, #29
 800cc7a:	d505      	bpl.n	800cc88 <__sflush_r+0x44>
 800cc7c:	6863      	ldr	r3, [r4, #4]
 800cc7e:	1ad2      	subs	r2, r2, r3
 800cc80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc82:	b10b      	cbz	r3, 800cc88 <__sflush_r+0x44>
 800cc84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc86:	1ad2      	subs	r2, r2, r3
 800cc88:	2300      	movs	r3, #0
 800cc8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc8c:	6a21      	ldr	r1, [r4, #32]
 800cc8e:	4628      	mov	r0, r5
 800cc90:	47b0      	blx	r6
 800cc92:	1c43      	adds	r3, r0, #1
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	d106      	bne.n	800cca6 <__sflush_r+0x62>
 800cc98:	6829      	ldr	r1, [r5, #0]
 800cc9a:	291d      	cmp	r1, #29
 800cc9c:	d82b      	bhi.n	800ccf6 <__sflush_r+0xb2>
 800cc9e:	4a2a      	ldr	r2, [pc, #168]	@ (800cd48 <__sflush_r+0x104>)
 800cca0:	40ca      	lsrs	r2, r1
 800cca2:	07d6      	lsls	r6, r2, #31
 800cca4:	d527      	bpl.n	800ccf6 <__sflush_r+0xb2>
 800cca6:	2200      	movs	r2, #0
 800cca8:	6062      	str	r2, [r4, #4]
 800ccaa:	04d9      	lsls	r1, r3, #19
 800ccac:	6922      	ldr	r2, [r4, #16]
 800ccae:	6022      	str	r2, [r4, #0]
 800ccb0:	d504      	bpl.n	800ccbc <__sflush_r+0x78>
 800ccb2:	1c42      	adds	r2, r0, #1
 800ccb4:	d101      	bne.n	800ccba <__sflush_r+0x76>
 800ccb6:	682b      	ldr	r3, [r5, #0]
 800ccb8:	b903      	cbnz	r3, 800ccbc <__sflush_r+0x78>
 800ccba:	6560      	str	r0, [r4, #84]	@ 0x54
 800ccbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccbe:	602f      	str	r7, [r5, #0]
 800ccc0:	b1b9      	cbz	r1, 800ccf2 <__sflush_r+0xae>
 800ccc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccc6:	4299      	cmp	r1, r3
 800ccc8:	d002      	beq.n	800ccd0 <__sflush_r+0x8c>
 800ccca:	4628      	mov	r0, r5
 800cccc:	f7fe ff7e 	bl	800bbcc <_free_r>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccd4:	e00d      	b.n	800ccf2 <__sflush_r+0xae>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	4628      	mov	r0, r5
 800ccda:	47b0      	blx	r6
 800ccdc:	4602      	mov	r2, r0
 800ccde:	1c50      	adds	r0, r2, #1
 800cce0:	d1c9      	bne.n	800cc76 <__sflush_r+0x32>
 800cce2:	682b      	ldr	r3, [r5, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d0c6      	beq.n	800cc76 <__sflush_r+0x32>
 800cce8:	2b1d      	cmp	r3, #29
 800ccea:	d001      	beq.n	800ccf0 <__sflush_r+0xac>
 800ccec:	2b16      	cmp	r3, #22
 800ccee:	d11e      	bne.n	800cd2e <__sflush_r+0xea>
 800ccf0:	602f      	str	r7, [r5, #0]
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	e022      	b.n	800cd3c <__sflush_r+0xf8>
 800ccf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccfa:	b21b      	sxth	r3, r3
 800ccfc:	e01b      	b.n	800cd36 <__sflush_r+0xf2>
 800ccfe:	690f      	ldr	r7, [r1, #16]
 800cd00:	2f00      	cmp	r7, #0
 800cd02:	d0f6      	beq.n	800ccf2 <__sflush_r+0xae>
 800cd04:	0793      	lsls	r3, r2, #30
 800cd06:	680e      	ldr	r6, [r1, #0]
 800cd08:	bf08      	it	eq
 800cd0a:	694b      	ldreq	r3, [r1, #20]
 800cd0c:	600f      	str	r7, [r1, #0]
 800cd0e:	bf18      	it	ne
 800cd10:	2300      	movne	r3, #0
 800cd12:	eba6 0807 	sub.w	r8, r6, r7
 800cd16:	608b      	str	r3, [r1, #8]
 800cd18:	f1b8 0f00 	cmp.w	r8, #0
 800cd1c:	dde9      	ble.n	800ccf2 <__sflush_r+0xae>
 800cd1e:	6a21      	ldr	r1, [r4, #32]
 800cd20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd22:	4643      	mov	r3, r8
 800cd24:	463a      	mov	r2, r7
 800cd26:	4628      	mov	r0, r5
 800cd28:	47b0      	blx	r6
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	dc08      	bgt.n	800cd40 <__sflush_r+0xfc>
 800cd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd36:	81a3      	strh	r3, [r4, #12]
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd40:	4407      	add	r7, r0
 800cd42:	eba8 0800 	sub.w	r8, r8, r0
 800cd46:	e7e7      	b.n	800cd18 <__sflush_r+0xd4>
 800cd48:	20400001 	.word	0x20400001

0800cd4c <_fflush_r>:
 800cd4c:	b538      	push	{r3, r4, r5, lr}
 800cd4e:	690b      	ldr	r3, [r1, #16]
 800cd50:	4605      	mov	r5, r0
 800cd52:	460c      	mov	r4, r1
 800cd54:	b913      	cbnz	r3, 800cd5c <_fflush_r+0x10>
 800cd56:	2500      	movs	r5, #0
 800cd58:	4628      	mov	r0, r5
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	b118      	cbz	r0, 800cd66 <_fflush_r+0x1a>
 800cd5e:	6a03      	ldr	r3, [r0, #32]
 800cd60:	b90b      	cbnz	r3, 800cd66 <_fflush_r+0x1a>
 800cd62:	f7fe fcdb 	bl	800b71c <__sinit>
 800cd66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0f3      	beq.n	800cd56 <_fflush_r+0xa>
 800cd6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd70:	07d0      	lsls	r0, r2, #31
 800cd72:	d404      	bmi.n	800cd7e <_fflush_r+0x32>
 800cd74:	0599      	lsls	r1, r3, #22
 800cd76:	d402      	bmi.n	800cd7e <_fflush_r+0x32>
 800cd78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd7a:	f7fe ff16 	bl	800bbaa <__retarget_lock_acquire_recursive>
 800cd7e:	4628      	mov	r0, r5
 800cd80:	4621      	mov	r1, r4
 800cd82:	f7ff ff5f 	bl	800cc44 <__sflush_r>
 800cd86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd88:	07da      	lsls	r2, r3, #31
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	d4e4      	bmi.n	800cd58 <_fflush_r+0xc>
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	059b      	lsls	r3, r3, #22
 800cd92:	d4e1      	bmi.n	800cd58 <_fflush_r+0xc>
 800cd94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd96:	f7fe ff09 	bl	800bbac <__retarget_lock_release_recursive>
 800cd9a:	e7dd      	b.n	800cd58 <_fflush_r+0xc>

0800cd9c <__swhatbuf_r>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	460c      	mov	r4, r1
 800cda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda4:	2900      	cmp	r1, #0
 800cda6:	b096      	sub	sp, #88	@ 0x58
 800cda8:	4615      	mov	r5, r2
 800cdaa:	461e      	mov	r6, r3
 800cdac:	da0d      	bge.n	800cdca <__swhatbuf_r+0x2e>
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cdb4:	f04f 0100 	mov.w	r1, #0
 800cdb8:	bf14      	ite	ne
 800cdba:	2340      	movne	r3, #64	@ 0x40
 800cdbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	6031      	str	r1, [r6, #0]
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	b016      	add	sp, #88	@ 0x58
 800cdc8:	bd70      	pop	{r4, r5, r6, pc}
 800cdca:	466a      	mov	r2, sp
 800cdcc:	f000 f8d6 	bl	800cf7c <_fstat_r>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	dbec      	blt.n	800cdae <__swhatbuf_r+0x12>
 800cdd4:	9901      	ldr	r1, [sp, #4]
 800cdd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdde:	4259      	negs	r1, r3
 800cde0:	4159      	adcs	r1, r3
 800cde2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cde6:	e7eb      	b.n	800cdc0 <__swhatbuf_r+0x24>

0800cde8 <__smakebuf_r>:
 800cde8:	898b      	ldrh	r3, [r1, #12]
 800cdea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdec:	079d      	lsls	r5, r3, #30
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	d507      	bpl.n	800ce04 <__smakebuf_r+0x1c>
 800cdf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	6163      	str	r3, [r4, #20]
 800ce00:	b003      	add	sp, #12
 800ce02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce04:	ab01      	add	r3, sp, #4
 800ce06:	466a      	mov	r2, sp
 800ce08:	f7ff ffc8 	bl	800cd9c <__swhatbuf_r>
 800ce0c:	9f00      	ldr	r7, [sp, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	4639      	mov	r1, r7
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7fe ff46 	bl	800bca4 <_malloc_r>
 800ce18:	b948      	cbnz	r0, 800ce2e <__smakebuf_r+0x46>
 800ce1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1e:	059a      	lsls	r2, r3, #22
 800ce20:	d4ee      	bmi.n	800ce00 <__smakebuf_r+0x18>
 800ce22:	f023 0303 	bic.w	r3, r3, #3
 800ce26:	f043 0302 	orr.w	r3, r3, #2
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	e7e2      	b.n	800cdf4 <__smakebuf_r+0xc>
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	6020      	str	r0, [r4, #0]
 800ce32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	9b01      	ldr	r3, [sp, #4]
 800ce3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce3e:	b15b      	cbz	r3, 800ce58 <__smakebuf_r+0x70>
 800ce40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce44:	4630      	mov	r0, r6
 800ce46:	f000 f8ab 	bl	800cfa0 <_isatty_r>
 800ce4a:	b128      	cbz	r0, 800ce58 <__smakebuf_r+0x70>
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	f043 0301 	orr.w	r3, r3, #1
 800ce56:	81a3      	strh	r3, [r4, #12]
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	431d      	orrs	r5, r3
 800ce5c:	81a5      	strh	r5, [r4, #12]
 800ce5e:	e7cf      	b.n	800ce00 <__smakebuf_r+0x18>

0800ce60 <__sccl>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	780b      	ldrb	r3, [r1, #0]
 800ce64:	4604      	mov	r4, r0
 800ce66:	2b5e      	cmp	r3, #94	@ 0x5e
 800ce68:	bf0b      	itete	eq
 800ce6a:	784b      	ldrbeq	r3, [r1, #1]
 800ce6c:	1c4a      	addne	r2, r1, #1
 800ce6e:	1c8a      	addeq	r2, r1, #2
 800ce70:	2100      	movne	r1, #0
 800ce72:	bf08      	it	eq
 800ce74:	2101      	moveq	r1, #1
 800ce76:	3801      	subs	r0, #1
 800ce78:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ce7c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ce80:	42a8      	cmp	r0, r5
 800ce82:	d1fb      	bne.n	800ce7c <__sccl+0x1c>
 800ce84:	b90b      	cbnz	r3, 800ce8a <__sccl+0x2a>
 800ce86:	1e50      	subs	r0, r2, #1
 800ce88:	bd70      	pop	{r4, r5, r6, pc}
 800ce8a:	f081 0101 	eor.w	r1, r1, #1
 800ce8e:	54e1      	strb	r1, [r4, r3]
 800ce90:	4610      	mov	r0, r2
 800ce92:	4602      	mov	r2, r0
 800ce94:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ce98:	2d2d      	cmp	r5, #45	@ 0x2d
 800ce9a:	d005      	beq.n	800cea8 <__sccl+0x48>
 800ce9c:	2d5d      	cmp	r5, #93	@ 0x5d
 800ce9e:	d016      	beq.n	800cece <__sccl+0x6e>
 800cea0:	2d00      	cmp	r5, #0
 800cea2:	d0f1      	beq.n	800ce88 <__sccl+0x28>
 800cea4:	462b      	mov	r3, r5
 800cea6:	e7f2      	b.n	800ce8e <__sccl+0x2e>
 800cea8:	7846      	ldrb	r6, [r0, #1]
 800ceaa:	2e5d      	cmp	r6, #93	@ 0x5d
 800ceac:	d0fa      	beq.n	800cea4 <__sccl+0x44>
 800ceae:	42b3      	cmp	r3, r6
 800ceb0:	dcf8      	bgt.n	800cea4 <__sccl+0x44>
 800ceb2:	3002      	adds	r0, #2
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	3201      	adds	r2, #1
 800ceb8:	4296      	cmp	r6, r2
 800ceba:	54a1      	strb	r1, [r4, r2]
 800cebc:	dcfb      	bgt.n	800ceb6 <__sccl+0x56>
 800cebe:	1af2      	subs	r2, r6, r3
 800cec0:	3a01      	subs	r2, #1
 800cec2:	1c5d      	adds	r5, r3, #1
 800cec4:	42b3      	cmp	r3, r6
 800cec6:	bfa8      	it	ge
 800cec8:	2200      	movge	r2, #0
 800ceca:	18ab      	adds	r3, r5, r2
 800cecc:	e7e1      	b.n	800ce92 <__sccl+0x32>
 800cece:	4610      	mov	r0, r2
 800ced0:	e7da      	b.n	800ce88 <__sccl+0x28>

0800ced2 <__submore>:
 800ced2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced6:	460c      	mov	r4, r1
 800ced8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ceda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cede:	4299      	cmp	r1, r3
 800cee0:	d11d      	bne.n	800cf1e <__submore+0x4c>
 800cee2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cee6:	f7fe fedd 	bl	800bca4 <_malloc_r>
 800ceea:	b918      	cbnz	r0, 800cef4 <__submore+0x22>
 800ceec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cef8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cefa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cefe:	6360      	str	r0, [r4, #52]	@ 0x34
 800cf00:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800cf04:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cf08:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800cf0c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cf10:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800cf14:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800cf18:	6020      	str	r0, [r4, #0]
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	e7e8      	b.n	800cef0 <__submore+0x1e>
 800cf1e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cf20:	0077      	lsls	r7, r6, #1
 800cf22:	463a      	mov	r2, r7
 800cf24:	f000 f85c 	bl	800cfe0 <_realloc_r>
 800cf28:	4605      	mov	r5, r0
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d0de      	beq.n	800ceec <__submore+0x1a>
 800cf2e:	eb00 0806 	add.w	r8, r0, r6
 800cf32:	4601      	mov	r1, r0
 800cf34:	4632      	mov	r2, r6
 800cf36:	4640      	mov	r0, r8
 800cf38:	f7fe fe39 	bl	800bbae <memcpy>
 800cf3c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cf40:	f8c4 8000 	str.w	r8, [r4]
 800cf44:	e7e9      	b.n	800cf1a <__submore+0x48>

0800cf46 <memmove>:
 800cf46:	4288      	cmp	r0, r1
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	eb01 0402 	add.w	r4, r1, r2
 800cf4e:	d902      	bls.n	800cf56 <memmove+0x10>
 800cf50:	4284      	cmp	r4, r0
 800cf52:	4623      	mov	r3, r4
 800cf54:	d807      	bhi.n	800cf66 <memmove+0x20>
 800cf56:	1e43      	subs	r3, r0, #1
 800cf58:	42a1      	cmp	r1, r4
 800cf5a:	d008      	beq.n	800cf6e <memmove+0x28>
 800cf5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf60:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf64:	e7f8      	b.n	800cf58 <memmove+0x12>
 800cf66:	4402      	add	r2, r0
 800cf68:	4601      	mov	r1, r0
 800cf6a:	428a      	cmp	r2, r1
 800cf6c:	d100      	bne.n	800cf70 <memmove+0x2a>
 800cf6e:	bd10      	pop	{r4, pc}
 800cf70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf78:	e7f7      	b.n	800cf6a <memmove+0x24>
	...

0800cf7c <_fstat_r>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	4d07      	ldr	r5, [pc, #28]	@ (800cf9c <_fstat_r+0x20>)
 800cf80:	2300      	movs	r3, #0
 800cf82:	4604      	mov	r4, r0
 800cf84:	4608      	mov	r0, r1
 800cf86:	4611      	mov	r1, r2
 800cf88:	602b      	str	r3, [r5, #0]
 800cf8a:	f7f6 fc72 	bl	8003872 <_fstat>
 800cf8e:	1c43      	adds	r3, r0, #1
 800cf90:	d102      	bne.n	800cf98 <_fstat_r+0x1c>
 800cf92:	682b      	ldr	r3, [r5, #0]
 800cf94:	b103      	cbz	r3, 800cf98 <_fstat_r+0x1c>
 800cf96:	6023      	str	r3, [r4, #0]
 800cf98:	bd38      	pop	{r3, r4, r5, pc}
 800cf9a:	bf00      	nop
 800cf9c:	20000b84 	.word	0x20000b84

0800cfa0 <_isatty_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d06      	ldr	r5, [pc, #24]	@ (800cfbc <_isatty_r+0x1c>)
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	602b      	str	r3, [r5, #0]
 800cfac:	f7f6 fc71 	bl	8003892 <_isatty>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d102      	bne.n	800cfba <_isatty_r+0x1a>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	b103      	cbz	r3, 800cfba <_isatty_r+0x1a>
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	bd38      	pop	{r3, r4, r5, pc}
 800cfbc:	20000b84 	.word	0x20000b84

0800cfc0 <_sbrk_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4d06      	ldr	r5, [pc, #24]	@ (800cfdc <_sbrk_r+0x1c>)
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	4608      	mov	r0, r1
 800cfca:	602b      	str	r3, [r5, #0]
 800cfcc:	f7f6 fc7a 	bl	80038c4 <_sbrk>
 800cfd0:	1c43      	adds	r3, r0, #1
 800cfd2:	d102      	bne.n	800cfda <_sbrk_r+0x1a>
 800cfd4:	682b      	ldr	r3, [r5, #0]
 800cfd6:	b103      	cbz	r3, 800cfda <_sbrk_r+0x1a>
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	20000b84 	.word	0x20000b84

0800cfe0 <_realloc_r>:
 800cfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	4614      	mov	r4, r2
 800cfe8:	460d      	mov	r5, r1
 800cfea:	b921      	cbnz	r1, 800cff6 <_realloc_r+0x16>
 800cfec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	4611      	mov	r1, r2
 800cff2:	f7fe be57 	b.w	800bca4 <_malloc_r>
 800cff6:	b92a      	cbnz	r2, 800d004 <_realloc_r+0x24>
 800cff8:	f7fe fde8 	bl	800bbcc <_free_r>
 800cffc:	4625      	mov	r5, r4
 800cffe:	4628      	mov	r0, r5
 800d000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d004:	f000 f906 	bl	800d214 <_malloc_usable_size_r>
 800d008:	4284      	cmp	r4, r0
 800d00a:	4606      	mov	r6, r0
 800d00c:	d802      	bhi.n	800d014 <_realloc_r+0x34>
 800d00e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d012:	d8f4      	bhi.n	800cffe <_realloc_r+0x1e>
 800d014:	4621      	mov	r1, r4
 800d016:	4638      	mov	r0, r7
 800d018:	f7fe fe44 	bl	800bca4 <_malloc_r>
 800d01c:	4680      	mov	r8, r0
 800d01e:	b908      	cbnz	r0, 800d024 <_realloc_r+0x44>
 800d020:	4645      	mov	r5, r8
 800d022:	e7ec      	b.n	800cffe <_realloc_r+0x1e>
 800d024:	42b4      	cmp	r4, r6
 800d026:	4622      	mov	r2, r4
 800d028:	4629      	mov	r1, r5
 800d02a:	bf28      	it	cs
 800d02c:	4632      	movcs	r2, r6
 800d02e:	f7fe fdbe 	bl	800bbae <memcpy>
 800d032:	4629      	mov	r1, r5
 800d034:	4638      	mov	r0, r7
 800d036:	f7fe fdc9 	bl	800bbcc <_free_r>
 800d03a:	e7f1      	b.n	800d020 <_realloc_r+0x40>

0800d03c <_strtol_l.isra.0>:
 800d03c:	2b24      	cmp	r3, #36	@ 0x24
 800d03e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d042:	4686      	mov	lr, r0
 800d044:	4690      	mov	r8, r2
 800d046:	d801      	bhi.n	800d04c <_strtol_l.isra.0+0x10>
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d106      	bne.n	800d05a <_strtol_l.isra.0+0x1e>
 800d04c:	f7fe fd82 	bl	800bb54 <__errno>
 800d050:	2316      	movs	r3, #22
 800d052:	6003      	str	r3, [r0, #0]
 800d054:	2000      	movs	r0, #0
 800d056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d05a:	4834      	ldr	r0, [pc, #208]	@ (800d12c <_strtol_l.isra.0+0xf0>)
 800d05c:	460d      	mov	r5, r1
 800d05e:	462a      	mov	r2, r5
 800d060:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d064:	5d06      	ldrb	r6, [r0, r4]
 800d066:	f016 0608 	ands.w	r6, r6, #8
 800d06a:	d1f8      	bne.n	800d05e <_strtol_l.isra.0+0x22>
 800d06c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d06e:	d110      	bne.n	800d092 <_strtol_l.isra.0+0x56>
 800d070:	782c      	ldrb	r4, [r5, #0]
 800d072:	2601      	movs	r6, #1
 800d074:	1c95      	adds	r5, r2, #2
 800d076:	f033 0210 	bics.w	r2, r3, #16
 800d07a:	d115      	bne.n	800d0a8 <_strtol_l.isra.0+0x6c>
 800d07c:	2c30      	cmp	r4, #48	@ 0x30
 800d07e:	d10d      	bne.n	800d09c <_strtol_l.isra.0+0x60>
 800d080:	782a      	ldrb	r2, [r5, #0]
 800d082:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d086:	2a58      	cmp	r2, #88	@ 0x58
 800d088:	d108      	bne.n	800d09c <_strtol_l.isra.0+0x60>
 800d08a:	786c      	ldrb	r4, [r5, #1]
 800d08c:	3502      	adds	r5, #2
 800d08e:	2310      	movs	r3, #16
 800d090:	e00a      	b.n	800d0a8 <_strtol_l.isra.0+0x6c>
 800d092:	2c2b      	cmp	r4, #43	@ 0x2b
 800d094:	bf04      	itt	eq
 800d096:	782c      	ldrbeq	r4, [r5, #0]
 800d098:	1c95      	addeq	r5, r2, #2
 800d09a:	e7ec      	b.n	800d076 <_strtol_l.isra.0+0x3a>
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1f6      	bne.n	800d08e <_strtol_l.isra.0+0x52>
 800d0a0:	2c30      	cmp	r4, #48	@ 0x30
 800d0a2:	bf14      	ite	ne
 800d0a4:	230a      	movne	r3, #10
 800d0a6:	2308      	moveq	r3, #8
 800d0a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d0ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	fbbc f9f3 	udiv	r9, ip, r3
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d0bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d0c0:	2f09      	cmp	r7, #9
 800d0c2:	d80f      	bhi.n	800d0e4 <_strtol_l.isra.0+0xa8>
 800d0c4:	463c      	mov	r4, r7
 800d0c6:	42a3      	cmp	r3, r4
 800d0c8:	dd1b      	ble.n	800d102 <_strtol_l.isra.0+0xc6>
 800d0ca:	1c57      	adds	r7, r2, #1
 800d0cc:	d007      	beq.n	800d0de <_strtol_l.isra.0+0xa2>
 800d0ce:	4581      	cmp	r9, r0
 800d0d0:	d314      	bcc.n	800d0fc <_strtol_l.isra.0+0xc0>
 800d0d2:	d101      	bne.n	800d0d8 <_strtol_l.isra.0+0x9c>
 800d0d4:	45a2      	cmp	sl, r4
 800d0d6:	db11      	blt.n	800d0fc <_strtol_l.isra.0+0xc0>
 800d0d8:	fb00 4003 	mla	r0, r0, r3, r4
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0e2:	e7eb      	b.n	800d0bc <_strtol_l.isra.0+0x80>
 800d0e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d0e8:	2f19      	cmp	r7, #25
 800d0ea:	d801      	bhi.n	800d0f0 <_strtol_l.isra.0+0xb4>
 800d0ec:	3c37      	subs	r4, #55	@ 0x37
 800d0ee:	e7ea      	b.n	800d0c6 <_strtol_l.isra.0+0x8a>
 800d0f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d0f4:	2f19      	cmp	r7, #25
 800d0f6:	d804      	bhi.n	800d102 <_strtol_l.isra.0+0xc6>
 800d0f8:	3c57      	subs	r4, #87	@ 0x57
 800d0fa:	e7e4      	b.n	800d0c6 <_strtol_l.isra.0+0x8a>
 800d0fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d100:	e7ed      	b.n	800d0de <_strtol_l.isra.0+0xa2>
 800d102:	1c53      	adds	r3, r2, #1
 800d104:	d108      	bne.n	800d118 <_strtol_l.isra.0+0xdc>
 800d106:	2322      	movs	r3, #34	@ 0x22
 800d108:	f8ce 3000 	str.w	r3, [lr]
 800d10c:	4660      	mov	r0, ip
 800d10e:	f1b8 0f00 	cmp.w	r8, #0
 800d112:	d0a0      	beq.n	800d056 <_strtol_l.isra.0+0x1a>
 800d114:	1e69      	subs	r1, r5, #1
 800d116:	e006      	b.n	800d126 <_strtol_l.isra.0+0xea>
 800d118:	b106      	cbz	r6, 800d11c <_strtol_l.isra.0+0xe0>
 800d11a:	4240      	negs	r0, r0
 800d11c:	f1b8 0f00 	cmp.w	r8, #0
 800d120:	d099      	beq.n	800d056 <_strtol_l.isra.0+0x1a>
 800d122:	2a00      	cmp	r2, #0
 800d124:	d1f6      	bne.n	800d114 <_strtol_l.isra.0+0xd8>
 800d126:	f8c8 1000 	str.w	r1, [r8]
 800d12a:	e794      	b.n	800d056 <_strtol_l.isra.0+0x1a>
 800d12c:	0800d573 	.word	0x0800d573

0800d130 <_strtol_r>:
 800d130:	f7ff bf84 	b.w	800d03c <_strtol_l.isra.0>

0800d134 <_strtoul_l.isra.0>:
 800d134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d138:	4e34      	ldr	r6, [pc, #208]	@ (800d20c <_strtoul_l.isra.0+0xd8>)
 800d13a:	4686      	mov	lr, r0
 800d13c:	460d      	mov	r5, r1
 800d13e:	4628      	mov	r0, r5
 800d140:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d144:	5d37      	ldrb	r7, [r6, r4]
 800d146:	f017 0708 	ands.w	r7, r7, #8
 800d14a:	d1f8      	bne.n	800d13e <_strtoul_l.isra.0+0xa>
 800d14c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d14e:	d110      	bne.n	800d172 <_strtoul_l.isra.0+0x3e>
 800d150:	782c      	ldrb	r4, [r5, #0]
 800d152:	2701      	movs	r7, #1
 800d154:	1c85      	adds	r5, r0, #2
 800d156:	f033 0010 	bics.w	r0, r3, #16
 800d15a:	d115      	bne.n	800d188 <_strtoul_l.isra.0+0x54>
 800d15c:	2c30      	cmp	r4, #48	@ 0x30
 800d15e:	d10d      	bne.n	800d17c <_strtoul_l.isra.0+0x48>
 800d160:	7828      	ldrb	r0, [r5, #0]
 800d162:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d166:	2858      	cmp	r0, #88	@ 0x58
 800d168:	d108      	bne.n	800d17c <_strtoul_l.isra.0+0x48>
 800d16a:	786c      	ldrb	r4, [r5, #1]
 800d16c:	3502      	adds	r5, #2
 800d16e:	2310      	movs	r3, #16
 800d170:	e00a      	b.n	800d188 <_strtoul_l.isra.0+0x54>
 800d172:	2c2b      	cmp	r4, #43	@ 0x2b
 800d174:	bf04      	itt	eq
 800d176:	782c      	ldrbeq	r4, [r5, #0]
 800d178:	1c85      	addeq	r5, r0, #2
 800d17a:	e7ec      	b.n	800d156 <_strtoul_l.isra.0+0x22>
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d1f6      	bne.n	800d16e <_strtoul_l.isra.0+0x3a>
 800d180:	2c30      	cmp	r4, #48	@ 0x30
 800d182:	bf14      	ite	ne
 800d184:	230a      	movne	r3, #10
 800d186:	2308      	moveq	r3, #8
 800d188:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800d18c:	2600      	movs	r6, #0
 800d18e:	fbb8 f8f3 	udiv	r8, r8, r3
 800d192:	fb03 f908 	mul.w	r9, r3, r8
 800d196:	ea6f 0909 	mvn.w	r9, r9
 800d19a:	4630      	mov	r0, r6
 800d19c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d1a0:	f1bc 0f09 	cmp.w	ip, #9
 800d1a4:	d810      	bhi.n	800d1c8 <_strtoul_l.isra.0+0x94>
 800d1a6:	4664      	mov	r4, ip
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	dd1e      	ble.n	800d1ea <_strtoul_l.isra.0+0xb6>
 800d1ac:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800d1b0:	d007      	beq.n	800d1c2 <_strtoul_l.isra.0+0x8e>
 800d1b2:	4580      	cmp	r8, r0
 800d1b4:	d316      	bcc.n	800d1e4 <_strtoul_l.isra.0+0xb0>
 800d1b6:	d101      	bne.n	800d1bc <_strtoul_l.isra.0+0x88>
 800d1b8:	45a1      	cmp	r9, r4
 800d1ba:	db13      	blt.n	800d1e4 <_strtoul_l.isra.0+0xb0>
 800d1bc:	fb00 4003 	mla	r0, r0, r3, r4
 800d1c0:	2601      	movs	r6, #1
 800d1c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1c6:	e7e9      	b.n	800d19c <_strtoul_l.isra.0+0x68>
 800d1c8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d1cc:	f1bc 0f19 	cmp.w	ip, #25
 800d1d0:	d801      	bhi.n	800d1d6 <_strtoul_l.isra.0+0xa2>
 800d1d2:	3c37      	subs	r4, #55	@ 0x37
 800d1d4:	e7e8      	b.n	800d1a8 <_strtoul_l.isra.0+0x74>
 800d1d6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d1da:	f1bc 0f19 	cmp.w	ip, #25
 800d1de:	d804      	bhi.n	800d1ea <_strtoul_l.isra.0+0xb6>
 800d1e0:	3c57      	subs	r4, #87	@ 0x57
 800d1e2:	e7e1      	b.n	800d1a8 <_strtoul_l.isra.0+0x74>
 800d1e4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800d1e8:	e7eb      	b.n	800d1c2 <_strtoul_l.isra.0+0x8e>
 800d1ea:	1c73      	adds	r3, r6, #1
 800d1ec:	d106      	bne.n	800d1fc <_strtoul_l.isra.0+0xc8>
 800d1ee:	2322      	movs	r3, #34	@ 0x22
 800d1f0:	f8ce 3000 	str.w	r3, [lr]
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	b932      	cbnz	r2, 800d206 <_strtoul_l.isra.0+0xd2>
 800d1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1fc:	b107      	cbz	r7, 800d200 <_strtoul_l.isra.0+0xcc>
 800d1fe:	4240      	negs	r0, r0
 800d200:	2a00      	cmp	r2, #0
 800d202:	d0f9      	beq.n	800d1f8 <_strtoul_l.isra.0+0xc4>
 800d204:	b106      	cbz	r6, 800d208 <_strtoul_l.isra.0+0xd4>
 800d206:	1e69      	subs	r1, r5, #1
 800d208:	6011      	str	r1, [r2, #0]
 800d20a:	e7f5      	b.n	800d1f8 <_strtoul_l.isra.0+0xc4>
 800d20c:	0800d573 	.word	0x0800d573

0800d210 <_strtoul_r>:
 800d210:	f7ff bf90 	b.w	800d134 <_strtoul_l.isra.0>

0800d214 <_malloc_usable_size_r>:
 800d214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d218:	1f18      	subs	r0, r3, #4
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	bfbc      	itt	lt
 800d21e:	580b      	ldrlt	r3, [r1, r0]
 800d220:	18c0      	addlt	r0, r0, r3
 800d222:	4770      	bx	lr

0800d224 <_init>:
 800d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d226:	bf00      	nop
 800d228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d22a:	bc08      	pop	{r3}
 800d22c:	469e      	mov	lr, r3
 800d22e:	4770      	bx	lr

0800d230 <_fini>:
 800d230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d232:	bf00      	nop
 800d234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d236:	bc08      	pop	{r3}
 800d238:	469e      	mov	lr, r3
 800d23a:	4770      	bx	lr
